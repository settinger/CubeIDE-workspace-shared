
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080018f8  080018f8  000118f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001918  08001918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001924  08001924  00011924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  08001928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  8 .bss          0000004c  20000028  20000028  00020028  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000074  20000074  00020028  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 11 .debug_line   00008d2f  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00008816  00000000  00000000  00028d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e69  00000000  00000000  0003159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cf821  00000000  00000000  000339e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a48  00000000  00000000  00103208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00003347  00000000  00000000  00103c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022434  00000000  00000000  00106f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001293cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e50  00000000  00000000  0012941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080018e0 	.word	0x080018e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080018e0 	.word	0x080018e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000528 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004f6:	e003      	b.n	8000500 <LoopCopyDataInit>

080004f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004fe:	3104      	adds	r1, #4

08000500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000508:	d3f6      	bcc.n	80004f8 <CopyDataInit>
  ldr  r2, =_sbss
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800050c:	e002      	b.n	8000514 <LoopFillZerobss>

0800050e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800050e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000510:	f842 3b04 	str.w	r3, [r2], #4

08000514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000518:	d3f9      	bcc.n	800050e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800051a:	f000 fb6f 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051e:	f001 f9bb 	bl	8001898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000522:	f000 f9ef 	bl	8000904 <main>
  bx  lr    
 8000526:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000528:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800052c:	08001928 	.word	0x08001928
  ldr  r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000534:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000538:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 800053c:	20000074 	.word	0x20000074

08000540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <EE_VerifyPageFullyErased+0x20>)
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8000546:	f64f 71ff 	movw	r1, #65535	; 0xffff
  while (Address <= PAGE0_END_ADDRESS)
 800054a:	4290      	cmp	r0, r2
 800054c:	d301      	bcc.n	8000552 <EE_VerifyPageFullyErased+0xe>
  uint32_t ReadStatus = 1;
 800054e:	2001      	movs	r0, #1
 8000550:	4770      	bx	lr
    AddressValue = (*(__IO uint16_t*)Address);
 8000552:	8803      	ldrh	r3, [r0, #0]
 8000554:	b29b      	uxth	r3, r3
    if (AddressValue != ERASED)
 8000556:	428b      	cmp	r3, r1
 8000558:	d101      	bne.n	800055e <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 800055a:	3004      	adds	r0, #4
 800055c:	e7f5      	b.n	800054a <EE_VerifyPageFullyErased+0x6>
      ReadStatus = 0;
 800055e:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	0800c000 	.word	0x0800c000

08000568 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <EE_VerifyPageFullWriteVariable+0x70>)
 800056c:	881b      	ldrh	r3, [r3, #0]
{
 800056e:	4604      	mov	r4, r0
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000570:	b298      	uxth	r0, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <EE_VerifyPageFullWriteVariable+0x74>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
{
 8000578:	460a      	mov	r2, r1
      if (PageStatus1 == VALID_PAGE)
 800057a:	b97b      	cbnz	r3, 800059c <EE_VerifyPageFullWriteVariable+0x34>
          return PAGE0;         /* Page0 valid */
 800057c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8000580:	1ac3      	subs	r3, r0, r3
 8000582:	bf18      	it	ne
 8000584:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000586:	f503 5500 	add.w	r5, r3, #8192	; 0x2000

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <EE_VerifyPageFullWriteVariable+0x78>)
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800058c:	3502      	adds	r5, #2
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800058e:	039b      	lsls	r3, r3, #14
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000590:	03ad      	lsls	r5, r5, #14
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000592:	4418      	add	r0, r3

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000594:	4285      	cmp	r5, r0
 8000596:	d308      	bcc.n	80005aa <EE_VerifyPageFullWriteVariable+0x42>
      Address = Address + 4;
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	e011      	b.n	80005c0 <EE_VerifyPageFullWriteVariable+0x58>
      else if (PageStatus0 == VALID_PAGE)
 800059c:	b9d0      	cbnz	r0, 80005d4 <EE_VerifyPageFullWriteVariable+0x6c>
          return PAGE0;         /* Page0 valid */
 800059e:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80005a2:	1a59      	subs	r1, r3, r1
 80005a4:	424b      	negs	r3, r1
 80005a6:	414b      	adcs	r3, r1
 80005a8:	e7ed      	b.n	8000586 <EE_VerifyPageFullWriteVariable+0x1e>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80005aa:	682b      	ldr	r3, [r5, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	d10f      	bne.n	80005d0 <EE_VerifyPageFullWriteVariable+0x68>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80005b0:	2300      	movs	r3, #0
 80005b2:	4629      	mov	r1, r5
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fcbd 	bl	8000f34 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 80005ba:	4603      	mov	r3, r0
 80005bc:	b108      	cbz	r0, 80005c2 <EE_VerifyPageFullWriteVariable+0x5a>
        return FlashStatus;
 80005be:	b280      	uxth	r0, r0
}
 80005c0:	bd38      	pop	{r3, r4, r5, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80005c2:	4622      	mov	r2, r4
 80005c4:	1ca9      	adds	r1, r5, #2
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fcb4 	bl	8000f34 <HAL_FLASH_Program>
      return FlashStatus;
 80005cc:	b280      	uxth	r0, r0
 80005ce:	e7f7      	b.n	80005c0 <EE_VerifyPageFullWriteVariable+0x58>
      Address = Address + 4;
 80005d0:	3504      	adds	r5, #4
 80005d2:	e7df      	b.n	8000594 <EE_VerifyPageFullWriteVariable+0x2c>
    return  NO_VALID_PAGE;
 80005d4:	20ab      	movs	r0, #171	; 0xab
 80005d6:	e7f3      	b.n	80005c0 <EE_VerifyPageFullWriteVariable+0x58>
 80005d8:	08008000 	.word	0x08008000
 80005dc:	0800c000 	.word	0x0800c000
 80005e0:	0800bfff 	.word	0x0800bfff

080005e4 <EE_Format>:
{
 80005e4:	b510      	push	{r4, lr}
  uint32_t SectorError = 0;
 80005e6:	2300      	movs	r3, #0
{
 80005e8:	b086      	sub	sp, #24
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80005ea:	e9cd 3300 	strd	r3, r3, [sp]
  pEraseInit.NbSectors = 1;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2302      	movs	r3, #2
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <EE_Format+0x58>)
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80005f4:	9305      	str	r3, [sp, #20]
  pEraseInit.NbSectors = 1;
 80005f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80005fa:	f7ff ffa3 	bl	8000544 <EE_VerifyPageFullyErased>
 80005fe:	b198      	cbz	r0, 8000628 <EE_Format+0x44>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000600:	490e      	ldr	r1, [pc, #56]	; (800063c <EE_Format+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fc94 	bl	8000f34 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 800060c:	4604      	mov	r4, r0
 800060e:	b990      	cbnz	r0, 8000636 <EE_Format+0x52>
  pEraseInit.Sector = PAGE1_ID;
 8000610:	2303      	movs	r3, #3
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <EE_Format+0x5c>)
  pEraseInit.Sector = PAGE1_ID;
 8000614:	9303      	str	r3, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000616:	f7ff ff95 	bl	8000544 <EE_VerifyPageFullyErased>
 800061a:	b960      	cbnz	r0, 8000636 <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800061c:	4669      	mov	r1, sp
 800061e:	a801      	add	r0, sp, #4
 8000620:	f000 fd3e 	bl	80010a0 <HAL_FLASHEx_Erase>
 8000624:	4604      	mov	r4, r0
    if (FlashStatus != HAL_OK)
 8000626:	e006      	b.n	8000636 <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000628:	4669      	mov	r1, sp
 800062a:	a801      	add	r0, sp, #4
 800062c:	f000 fd38 	bl	80010a0 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 8000630:	4604      	mov	r4, r0
 8000632:	2800      	cmp	r0, #0
 8000634:	d0e4      	beq.n	8000600 <EE_Format+0x1c>
}
 8000636:	4620      	mov	r0, r4
 8000638:	b006      	add	sp, #24
 800063a:	bd10      	pop	{r4, pc}
 800063c:	08008000 	.word	0x08008000
 8000640:	0800c000 	.word	0x0800c000

08000644 <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <EE_ReadVariable+0x4c>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <EE_ReadVariable+0x50>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000648:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800064a:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800064c:	b29b      	uxth	r3, r3
{
 800064e:	b510      	push	{r4, lr}
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000650:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 8000652:	b10b      	cbz	r3, 8000658 <EE_ReadVariable+0x14>
      else if (PageStatus1 == VALID_PAGE)
 8000654:	b9d2      	cbnz	r2, 800068c <EE_ReadVariable+0x48>
        return PAGE1;           /* Page1 valid */
 8000656:	2301      	movs	r3, #1
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000658:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800065c:	3202      	adds	r2, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800065e:	4c0e      	ldr	r4, [pc, #56]	; (8000698 <EE_ReadVariable+0x54>)
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000660:	b292      	uxth	r2, r2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000662:	3301      	adds	r3, #1
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000664:	0392      	lsls	r2, r2, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000666:	b29b      	uxth	r3, r3
 8000668:	eb04 3383 	add.w	r3, r4, r3, lsl #14
  while (Address > (PageStartAddress + 2))
 800066c:	3202      	adds	r2, #2
 800066e:	429a      	cmp	r2, r3
 8000670:	d301      	bcc.n	8000676 <EE_ReadVariable+0x32>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000672:	2001      	movs	r0, #1
 8000674:	e007      	b.n	8000686 <EE_ReadVariable+0x42>
    AddressValue = (*(__IO uint16_t*)Address);
 8000676:	881c      	ldrh	r4, [r3, #0]
 8000678:	b2a4      	uxth	r4, r4
    if (AddressValue == VirtAddress)
 800067a:	4284      	cmp	r4, r0
 800067c:	d104      	bne.n	8000688 <EE_ReadVariable+0x44>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800067e:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8000682:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8000684:	2000      	movs	r0, #0
}
 8000686:	bd10      	pop	{r4, pc}
      Address = Address - 4;
 8000688:	3b04      	subs	r3, #4
 800068a:	e7f0      	b.n	800066e <EE_ReadVariable+0x2a>
    return  NO_VALID_PAGE;
 800068c:	20ab      	movs	r0, #171	; 0xab
 800068e:	e7fa      	b.n	8000686 <EE_ReadVariable+0x42>
 8000690:	08008000 	.word	0x08008000
 8000694:	0800c000 	.word	0x0800c000
 8000698:	08007ffe 	.word	0x08007ffe

0800069c <EE_Init>:
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80006a0:	4e5c      	ldr	r6, [pc, #368]	; (8000814 <EE_Init+0x178>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80006a2:	4d5d      	ldr	r5, [pc, #372]	; (8000818 <EE_Init+0x17c>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80006a4:	8834      	ldrh	r4, [r6, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80006a6:	882b      	ldrh	r3, [r5, #0]
{
 80006a8:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 80006aa:	2200      	movs	r2, #0
  pEraseInit.NbSectors = 1;
 80006ac:	2101      	movs	r1, #1
  uint32_t SectorError = 0;
 80006ae:	9200      	str	r2, [sp, #0]
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80006b0:	9201      	str	r2, [sp, #4]
  pEraseInit.NbSectors = 1;
 80006b2:	2202      	movs	r2, #2
 80006b4:	e9cd 2103 	strd	r2, r1, [sp, #12]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80006b8:	b2a4      	uxth	r4, r4
  switch (PageStatus0)
 80006ba:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80006be:	428c      	cmp	r4, r1
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80006c0:	b29b      	uxth	r3, r3
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006c2:	9205      	str	r2, [sp, #20]
  switch (PageStatus0)
 80006c4:	d02a      	beq.n	800071c <EE_Init+0x80>
 80006c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ca:	4294      	cmp	r4, r2
 80006cc:	d005      	beq.n	80006da <EE_Init+0x3e>
 80006ce:	b90c      	cbnz	r4, 80006d4 <EE_Init+0x38>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d167      	bne.n	80007a4 <EE_Init+0x108>
      FlashStatus = EE_Format();
 80006d4:	f7ff ff86 	bl	80005e4 <EE_Format>
 80006d8:	e01d      	b.n	8000716 <EE_Init+0x7a>
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80006da:	b94b      	cbnz	r3, 80006f0 <EE_Init+0x54>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80006dc:	4630      	mov	r0, r6
 80006de:	f7ff ff31 	bl	8000544 <EE_VerifyPageFullyErased>
 80006e2:	2800      	cmp	r0, #0
 80006e4:	f000 8091 	beq.w	800080a <EE_Init+0x16e>
  return HAL_OK;
 80006e8:	2000      	movs	r0, #0
}
 80006ea:	b006      	add	sp, #24
 80006ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80006f0:	428b      	cmp	r3, r1
 80006f2:	d1ef      	bne.n	80006d4 <EE_Init+0x38>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80006f4:	4630      	mov	r0, r6
 80006f6:	f7ff ff25 	bl	8000544 <EE_VerifyPageFullyErased>
 80006fa:	b930      	cbnz	r0, 800070a <EE_Init+0x6e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006fc:	4669      	mov	r1, sp
 80006fe:	a801      	add	r0, sp, #4
 8000700:	f000 fcce 	bl	80010a0 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8000704:	b108      	cbz	r0, 800070a <EE_Init+0x6e>
        return FlashStatus;
 8000706:	b280      	uxth	r0, r0
 8000708:	e7ef      	b.n	80006ea <EE_Init+0x4e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800070a:	4943      	ldr	r1, [pc, #268]	; (8000818 <EE_Init+0x17c>)
 800070c:	2200      	movs	r2, #0
 800070e:	2300      	movs	r3, #0
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fc0f 	bl	8000f34 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 8000716:	2800      	cmp	r0, #0
 8000718:	d0e6      	beq.n	80006e8 <EE_Init+0x4c>
 800071a:	e7f4      	b.n	8000706 <EE_Init+0x6a>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800071c:	bb73      	cbnz	r3, 800077c <EE_Init+0xe0>
 800071e:	4d3f      	ldr	r5, [pc, #252]	; (800081c <EE_Init+0x180>)
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000720:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8000820 <EE_Init+0x184>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000724:	461c      	mov	r4, r3
  int16_t x = -1;
 8000726:	f04f 37ff 	mov.w	r7, #4294967295
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800072a:	88f3      	ldrh	r3, [r6, #6]
 800072c:	f835 0b02 	ldrh.w	r0, [r5], #2
 8000730:	b29b      	uxth	r3, r3
 8000732:	4283      	cmp	r3, r0
            x = VarIdx;
 8000734:	bf08      	it	eq
 8000736:	b227      	sxtheq	r7, r4
          if (VarIdx != x)
 8000738:	42a7      	cmp	r7, r4
 800073a:	d111      	bne.n	8000760 <EE_Init+0xc4>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800073c:	3401      	adds	r4, #1
 800073e:	2c03      	cmp	r4, #3
 8000740:	d1f3      	bne.n	800072a <EE_Init+0x8e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000742:	4934      	ldr	r1, [pc, #208]	; (8000814 <EE_Init+0x178>)
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fbf3 	bl	8000f34 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 800074e:	2800      	cmp	r0, #0
 8000750:	d1d9      	bne.n	8000706 <EE_Init+0x6a>
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000752:	2201      	movs	r2, #1
 8000754:	2302      	movs	r3, #2
 8000756:	e9cd 2304 	strd	r2, r3, [sp, #16]
        pEraseInit.Sector = PAGE1_ID;
 800075a:	9403      	str	r4, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800075c:	482e      	ldr	r0, [pc, #184]	; (8000818 <EE_Init+0x17c>)
 800075e:	e7be      	b.n	80006de <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000760:	492f      	ldr	r1, [pc, #188]	; (8000820 <EE_Init+0x184>)
 8000762:	f7ff ff6f 	bl	8000644 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8000766:	2801      	cmp	r0, #1
 8000768:	d0e8      	beq.n	800073c <EE_Init+0xa0>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800076a:	f8b8 1000 	ldrh.w	r1, [r8]
 800076e:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 8000772:	f7ff fef9 	bl	8000568 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8000776:	2800      	cmp	r0, #0
 8000778:	d0e0      	beq.n	800073c <EE_Init+0xa0>
 800077a:	e7b6      	b.n	80006ea <EE_Init+0x4e>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800077c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000780:	4293      	cmp	r3, r2
 8000782:	d1a7      	bne.n	80006d4 <EE_Init+0x38>
        pEraseInit.Sector = PAGE1_ID;
 8000784:	2303      	movs	r3, #3
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000786:	4628      	mov	r0, r5
        pEraseInit.Sector = PAGE1_ID;
 8000788:	9303      	str	r3, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800078a:	f7ff fedb 	bl	8000544 <EE_VerifyPageFullyErased>
 800078e:	b928      	cbnz	r0, 800079c <EE_Init+0x100>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000790:	4669      	mov	r1, sp
 8000792:	a801      	add	r0, sp, #4
 8000794:	f000 fc84 	bl	80010a0 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8000798:	2800      	cmp	r0, #0
 800079a:	d1b4      	bne.n	8000706 <EE_Init+0x6a>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800079c:	491d      	ldr	r1, [pc, #116]	; (8000814 <EE_Init+0x178>)
 800079e:	2200      	movs	r2, #0
 80007a0:	2300      	movs	r3, #0
 80007a2:	e7b5      	b.n	8000710 <EE_Init+0x74>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d102      	bne.n	80007ae <EE_Init+0x112>
        pEraseInit.Sector = PAGE1_ID;
 80007a8:	2303      	movs	r3, #3
 80007aa:	9303      	str	r3, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007ac:	e7d6      	b.n	800075c <EE_Init+0xc0>
 80007ae:	4e1b      	ldr	r6, [pc, #108]	; (800081c <EE_Init+0x180>)
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000820 <EE_Init+0x184>
  int16_t x = -1;
 80007b4:	f04f 37ff 	mov.w	r7, #4294967295
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80007b8:	88eb      	ldrh	r3, [r5, #6]
 80007ba:	f836 0b02 	ldrh.w	r0, [r6], #2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4283      	cmp	r3, r0
            x = VarIdx;
 80007c2:	bf08      	it	eq
 80007c4:	b227      	sxtheq	r7, r4
          if (VarIdx != x)
 80007c6:	42a7      	cmp	r7, r4
 80007c8:	d111      	bne.n	80007ee <EE_Init+0x152>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007ca:	3401      	adds	r4, #1
 80007cc:	2c03      	cmp	r4, #3
 80007ce:	d1f3      	bne.n	80007b8 <EE_Init+0x11c>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80007d0:	4911      	ldr	r1, [pc, #68]	; (8000818 <EE_Init+0x17c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	2300      	movs	r3, #0
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fbac 	bl	8000f34 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 80007dc:	2800      	cmp	r0, #0
 80007de:	d192      	bne.n	8000706 <EE_Init+0x6a>
        pEraseInit.NbSectors = 1;
 80007e0:	2302      	movs	r3, #2
 80007e2:	2201      	movs	r2, #1
 80007e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <EE_Init+0x178>)
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80007ea:	9305      	str	r3, [sp, #20]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80007ec:	e777      	b.n	80006de <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007ee:	490c      	ldr	r1, [pc, #48]	; (8000820 <EE_Init+0x184>)
 80007f0:	f7ff ff28 	bl	8000644 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 80007f4:	2801      	cmp	r0, #1
 80007f6:	d0e8      	beq.n	80007ca <EE_Init+0x12e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007f8:	f8b8 1000 	ldrh.w	r1, [r8]
 80007fc:	f836 0c02 	ldrh.w	r0, [r6, #-2]
 8000800:	f7ff feb2 	bl	8000568 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8000804:	2800      	cmp	r0, #0
 8000806:	d0e0      	beq.n	80007ca <EE_Init+0x12e>
 8000808:	e76f      	b.n	80006ea <EE_Init+0x4e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800080a:	4669      	mov	r1, sp
 800080c:	a801      	add	r0, sp, #4
 800080e:	f000 fc47 	bl	80010a0 <HAL_FLASHEx_Erase>
 8000812:	e780      	b.n	8000716 <EE_Init+0x7a>
 8000814:	08008000 	.word	0x08008000
 8000818:	0800c000 	.word	0x0800c000
 800081c:	20000000 	.word	0x20000000
 8000820:	20000044 	.word	0x20000044

08000824 <EE_WriteVariable>:
{
 8000824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000828:	b087      	sub	sp, #28
 800082a:	4606      	mov	r6, r0
 800082c:	4688      	mov	r8, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800082e:	f7ff fe9b 	bl	8000568 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 8000832:	2880      	cmp	r0, #128	; 0x80
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000834:	4604      	mov	r4, r0
  if (Status == PAGE_FULL)
 8000836:	d13f      	bne.n	80008b8 <EE_WriteVariable+0x94>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000838:	492a      	ldr	r1, [pc, #168]	; (80008e4 <EE_WriteVariable+0xc0>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800083a:	4d2b      	ldr	r5, [pc, #172]	; (80008e8 <EE_WriteVariable+0xc4>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800083c:	880a      	ldrh	r2, [r1, #0]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	9300      	str	r3, [sp, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000842:	882b      	ldrh	r3, [r5, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000844:	b292      	uxth	r2, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000846:	b29b      	uxth	r3, r3
      if (PageStatus0 == VALID_PAGE)
 8000848:	b16a      	cbz	r2, 8000866 <EE_WriteVariable+0x42>
      else if (PageStatus1 == VALID_PAGE)
 800084a:	2b00      	cmp	r3, #0
 800084c:	d147      	bne.n	80008de <EE_WriteVariable+0xba>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800084e:	2703      	movs	r7, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000850:	460d      	mov	r5, r1
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000852:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000856:	2300      	movs	r3, #0
 8000858:	4629      	mov	r1, r5
 800085a:	2001      	movs	r0, #1
 800085c:	f000 fb6a 	bl	8000f34 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000860:	b118      	cbz	r0, 800086a <EE_WriteVariable+0x46>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
  {
    return FlashStatus;
 8000862:	b284      	uxth	r4, r0
 8000864:	e028      	b.n	80008b8 <EE_WriteVariable+0x94>
    OldPageId = PAGE0_ID;
 8000866:	2702      	movs	r7, #2
 8000868:	e7f3      	b.n	8000852 <EE_WriteVariable+0x2e>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800086a:	4641      	mov	r1, r8
 800086c:	4630      	mov	r0, r6
 800086e:	f7ff fe7b 	bl	8000568 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 8000872:	4604      	mov	r4, r0
 8000874:	bb00      	cbnz	r0, 80008b8 <EE_WriteVariable+0x94>
 8000876:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80008f0 <EE_WriteVariable+0xcc>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800087a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80008ec <EE_WriteVariable+0xc8>
  if (EepromStatus != HAL_OK)
 800087e:	2403      	movs	r4, #3
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000880:	f838 0b02 	ldrh.w	r0, [r8], #2
 8000884:	4286      	cmp	r6, r0
 8000886:	d11b      	bne.n	80008c0 <EE_WriteVariable+0x9c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000888:	3c01      	subs	r4, #1
 800088a:	b2a4      	uxth	r4, r4
 800088c:	2c00      	cmp	r4, #0
 800088e:	d1f7      	bne.n	8000880 <EE_WriteVariable+0x5c>
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000890:	2601      	movs	r6, #1
 8000892:	2302      	movs	r3, #2
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000894:	4669      	mov	r1, sp
 8000896:	a801      	add	r0, sp, #4
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000898:	e9cd 6304 	strd	r6, r3, [sp, #16]
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800089c:	9401      	str	r4, [sp, #4]
  pEraseInit.Sector = OldPageId;
 800089e:	9703      	str	r7, [sp, #12]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80008a0:	f000 fbfe 	bl	80010a0 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d1dc      	bne.n	8000862 <EE_WriteVariable+0x3e>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 80008a8:	2200      	movs	r2, #0
 80008aa:	2300      	movs	r3, #0
 80008ac:	4629      	mov	r1, r5
 80008ae:	4630      	mov	r0, r6
 80008b0:	f000 fb40 	bl	8000f34 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d1d4      	bne.n	8000862 <EE_WriteVariable+0x3e>
}
 80008b8:	4620      	mov	r0, r4
 80008ba:	b007      	add	sp, #28
 80008bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80008c0:	490a      	ldr	r1, [pc, #40]	; (80008ec <EE_WriteVariable+0xc8>)
 80008c2:	f7ff febf 	bl	8000644 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 80008c6:	2801      	cmp	r0, #1
 80008c8:	d0de      	beq.n	8000888 <EE_WriteVariable+0x64>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80008ca:	f8b9 1000 	ldrh.w	r1, [r9]
 80008ce:	f838 0c02 	ldrh.w	r0, [r8, #-2]
 80008d2:	f7ff fe49 	bl	8000568 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d0d6      	beq.n	8000888 <EE_WriteVariable+0x64>
 80008da:	4604      	mov	r4, r0
 80008dc:	e7ec      	b.n	80008b8 <EE_WriteVariable+0x94>
    return NO_VALID_PAGE;       /* No valid Page */
 80008de:	24ab      	movs	r4, #171	; 0xab
 80008e0:	e7ea      	b.n	80008b8 <EE_WriteVariable+0x94>
 80008e2:	bf00      	nop
 80008e4:	08008000 	.word	0x08008000
 80008e8:	0800c000 	.word	0x0800c000
 80008ec:	20000044 	.word	0x20000044
 80008f0:	20000000 	.word	0x20000000

080008f4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80008f4:	b508      	push	{r3, lr}
  while(1)
  {
    /* Toggle LED3 fast */
    BSP_LED_Toggle(LED3);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f972 	bl	8000be0 <BSP_LED_Toggle>
    HAL_Delay(40);
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	f000 f9f3 	bl	8000ce8 <HAL_Delay>
  while(1)
 8000902:	e7f8      	b.n	80008f6 <Error_Handler+0x2>

08000904 <main>:
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000908:	f000 f9c2 	bl	8000c90 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	4b84      	ldr	r3, [pc, #528]	; (8000b20 <main+0x21c>)
 800090e:	2100      	movs	r1, #0
 8000910:	9101      	str	r1, [sp, #4]
 8000912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000914:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000918:	641a      	str	r2, [r3, #64]	; 0x40
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	4b7f      	ldr	r3, [pc, #508]	; (8000b24 <main+0x220>)
 8000926:	9102      	str	r1, [sp, #8]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093a:	2701      	movs	r7, #1
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	e9cd 7308 	strd	r7, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000944:	2502      	movs	r5, #2
 8000946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 360;
 800094a:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000950:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000954:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000958:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095a:	2307      	movs	r3, #7
 800095c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095e:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000960:	f000 fd20 	bl	80013a4 <HAL_RCC_OscConfig>
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000964:	a808      	add	r0, sp, #32
 8000966:	f000 fd1d 	bl	80013a4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800096a:	4604      	mov	r4, r0
 800096c:	b100      	cbz	r0, 8000970 <main+0x6c>
    while(1) { ; } 
 800096e:	e7fe      	b.n	800096e <main+0x6a>
  HAL_PWREx_EnableOverDrive();
 8000970:	f000 fcde 	bl	8001330 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000974:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800097a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000982:	2105      	movs	r1, #5
 8000984:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000988:	e9cd 2306 	strd	r2, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800098c:	f000 fee8 	bl	8001760 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000990:	4604      	mov	r4, r0
 8000992:	b100      	cbz	r0, 8000996 <main+0x92>
    while(1) { ; }  
 8000994:	e7fe      	b.n	8000994 <main+0x90>
  HAL_FLASH_Unlock();
 8000996:	f000 fa93 	bl	8000ec0 <HAL_FLASH_Unlock>
  BSP_LED_Init(LED3);
 800099a:	4620      	mov	r0, r4
 800099c:	f000 f8d8 	bl	8000b50 <BSP_LED_Init>
  if( EE_Init() != EE_OK)
 80009a0:	f7ff fe7c 	bl	800069c <EE_Init>
 80009a4:	b108      	cbz	r0, 80009aa <main+0xa6>
    Error_Handler();
 80009a6:	f7ff ffa5 	bl	80008f4 <Error_Handler>
  for (VarValue = 1; VarValue <= 0x1000; VarValue++)
 80009aa:	4c5f      	ldr	r4, [pc, #380]	; (8000b28 <main+0x224>)
 80009ac:	4d5f      	ldr	r5, [pc, #380]	; (8000b2c <main+0x228>)
 80009ae:	4626      	mov	r6, r4
 80009b0:	f826 7b02 	strh.w	r7, [r6], #2
    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTab[1]) != HAL_OK)
 80009b4:	1d27      	adds	r7, r4, #4
  for (VarValue = 1; VarValue <= 0x1000; VarValue++)
 80009b6:	8821      	ldrh	r1, [r4, #0]
 80009b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80009bc:	d94c      	bls.n	8000a58 <main+0x154>
  for (VarValue = 1; VarValue <= 0x2000; VarValue++)
 80009be:	2301      	movs	r3, #1
    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTab[1]) != HAL_OK)
 80009c0:	4e5b      	ldr	r6, [pc, #364]	; (8000b30 <main+0x22c>)
  for (VarValue = 1; VarValue <= 0x2000; VarValue++)
 80009c2:	8023      	strh	r3, [r4, #0]
 80009c4:	8821      	ldrh	r1, [r4, #0]
 80009c6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80009ca:	d97f      	bls.n	8000acc <main+0x1c8>
  if(EE_ReadVariable(VirtAddVarTab[0], &VarDataTmp) != HAL_OK)
 80009cc:	4959      	ldr	r1, [pc, #356]	; (8000b34 <main+0x230>)
 80009ce:	8828      	ldrh	r0, [r5, #0]
 80009d0:	f7ff fe38 	bl	8000644 <EE_ReadVariable>
 80009d4:	2800      	cmp	r0, #0
 80009d6:	d1e6      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[0])
 80009d8:	8862      	ldrh	r2, [r4, #2]
 80009da:	8923      	ldrh	r3, [r4, #8]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d1e2      	bne.n	80009a6 <main+0xa2>
  if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTmp) != HAL_OK)
 80009e0:	4954      	ldr	r1, [pc, #336]	; (8000b34 <main+0x230>)
 80009e2:	8868      	ldrh	r0, [r5, #2]
 80009e4:	f7ff fe2e 	bl	8000644 <EE_ReadVariable>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d1dc      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[1])
 80009ec:	88a2      	ldrh	r2, [r4, #4]
 80009ee:	8923      	ldrh	r3, [r4, #8]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d1d8      	bne.n	80009a6 <main+0xa2>
  if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTmp) != HAL_OK)
 80009f4:	494f      	ldr	r1, [pc, #316]	; (8000b34 <main+0x230>)
 80009f6:	88a8      	ldrh	r0, [r5, #4]
 80009f8:	f7ff fe24 	bl	8000644 <EE_ReadVariable>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1d2      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[2])
 8000a00:	88e2      	ldrh	r2, [r4, #6]
 8000a02:	8923      	ldrh	r3, [r4, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d1ce      	bne.n	80009a6 <main+0xa2>
  for (VarValue = 1; VarValue <= 0x3000; VarValue++)
 8000a08:	2301      	movs	r3, #1
 8000a0a:	8023      	strh	r3, [r4, #0]
 8000a0c:	8821      	ldrh	r1, [r4, #0]
 8000a0e:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8000a12:	d970      	bls.n	8000af6 <main+0x1f2>
  if(EE_ReadVariable(VirtAddVarTab[0], &VarDataTmp) != HAL_OK)
 8000a14:	4947      	ldr	r1, [pc, #284]	; (8000b34 <main+0x230>)
 8000a16:	8828      	ldrh	r0, [r5, #0]
 8000a18:	f7ff fe14 	bl	8000644 <EE_ReadVariable>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d1c2      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[0])
 8000a20:	8862      	ldrh	r2, [r4, #2]
 8000a22:	8923      	ldrh	r3, [r4, #8]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d1be      	bne.n	80009a6 <main+0xa2>
  if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTmp) != HAL_OK)
 8000a28:	4942      	ldr	r1, [pc, #264]	; (8000b34 <main+0x230>)
 8000a2a:	8868      	ldrh	r0, [r5, #2]
 8000a2c:	f7ff fe0a 	bl	8000644 <EE_ReadVariable>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d1b8      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[1])
 8000a34:	88a2      	ldrh	r2, [r4, #4]
 8000a36:	8923      	ldrh	r3, [r4, #8]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d1b4      	bne.n	80009a6 <main+0xa2>
  if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTmp) != HAL_OK)
 8000a3c:	493d      	ldr	r1, [pc, #244]	; (8000b34 <main+0x230>)
 8000a3e:	88a8      	ldrh	r0, [r5, #4]
 8000a40:	f7ff fe00 	bl	8000644 <EE_ReadVariable>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d1ae      	bne.n	80009a6 <main+0xa2>
  if (VarDataTmp != VarDataTab[2])
 8000a48:	88e2      	ldrh	r2, [r4, #6]
 8000a4a:	8923      	ldrh	r3, [r4, #8]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d1aa      	bne.n	80009a6 <main+0xa2>
    BSP_LED_On(LED3);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f8b7 	bl	8000bc4 <BSP_LED_On>
  while (1)
 8000a56:	e7fb      	b.n	8000a50 <main+0x14c>
    if((EE_WriteVariable(VirtAddVarTab[0],  VarValue)) != HAL_OK)
 8000a58:	8828      	ldrh	r0, [r5, #0]
 8000a5a:	f7ff fee3 	bl	8000824 <EE_WriteVariable>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d1a1      	bne.n	80009a6 <main+0xa2>
    if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab[0])) != HAL_OK)
 8000a62:	8828      	ldrh	r0, [r5, #0]
 8000a64:	4631      	mov	r1, r6
 8000a66:	f7ff fded 	bl	8000644 <EE_ReadVariable>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d19b      	bne.n	80009a6 <main+0xa2>
    if (VarValue != VarDataTab[0])
 8000a6e:	8823      	ldrh	r3, [r4, #0]
 8000a70:	8861      	ldrh	r1, [r4, #2]
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d197      	bne.n	80009a6 <main+0xa2>
    if(EE_WriteVariable(VirtAddVarTab[1], ~VarValue) != HAL_OK)
 8000a76:	43c9      	mvns	r1, r1
 8000a78:	8868      	ldrh	r0, [r5, #2]
 8000a7a:	b289      	uxth	r1, r1
 8000a7c:	f7ff fed2 	bl	8000824 <EE_WriteVariable>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d190      	bne.n	80009a6 <main+0xa2>
    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTab[1]) != HAL_OK)
 8000a84:	8868      	ldrh	r0, [r5, #2]
 8000a86:	4639      	mov	r1, r7
 8000a88:	f7ff fddc 	bl	8000644 <EE_ReadVariable>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d18a      	bne.n	80009a6 <main+0xa2>
    if(((uint16_t)~VarValue) != VarDataTab[1])
 8000a90:	8821      	ldrh	r1, [r4, #0]
 8000a92:	88a2      	ldrh	r2, [r4, #4]
 8000a94:	43cb      	mvns	r3, r1
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d184      	bne.n	80009a6 <main+0xa2>
    if(EE_WriteVariable(VirtAddVarTab[2],  VarValue << 1) != HAL_OK)
 8000a9c:	0049      	lsls	r1, r1, #1
 8000a9e:	88a8      	ldrh	r0, [r5, #4]
 8000aa0:	b289      	uxth	r1, r1
 8000aa2:	f7ff febf 	bl	8000824 <EE_WriteVariable>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	f47f af7d 	bne.w	80009a6 <main+0xa2>
    if(EE_ReadVariable(VirtAddVarTab[2],  &VarDataTab[2]) != HAL_OK)
 8000aac:	4922      	ldr	r1, [pc, #136]	; (8000b38 <main+0x234>)
 8000aae:	88a8      	ldrh	r0, [r5, #4]
 8000ab0:	f7ff fdc8 	bl	8000644 <EE_ReadVariable>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	f47f af76 	bne.w	80009a6 <main+0xa2>
    if ((VarValue << 1) != VarDataTab[2])
 8000aba:	8823      	ldrh	r3, [r4, #0]
 8000abc:	88e2      	ldrh	r2, [r4, #6]
 8000abe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8000ac2:	f47f af70 	bne.w	80009a6 <main+0xa2>
  for (VarValue = 1; VarValue <= 0x1000; VarValue++)
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	8023      	strh	r3, [r4, #0]
 8000aca:	e774      	b.n	80009b6 <main+0xb2>
    if(EE_WriteVariable(VirtAddVarTab[1], VarValue) != HAL_OK)
 8000acc:	8868      	ldrh	r0, [r5, #2]
 8000ace:	f7ff fea9 	bl	8000824 <EE_WriteVariable>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	f47f af67 	bne.w	80009a6 <main+0xa2>
    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTab[1]) != HAL_OK)
 8000ad8:	8868      	ldrh	r0, [r5, #2]
 8000ada:	4631      	mov	r1, r6
 8000adc:	f7ff fdb2 	bl	8000644 <EE_ReadVariable>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	f47f af60 	bne.w	80009a6 <main+0xa2>
    if(VarValue != VarDataTab[1])
 8000ae6:	8822      	ldrh	r2, [r4, #0]
 8000ae8:	88a3      	ldrh	r3, [r4, #4]
 8000aea:	4293      	cmp	r3, r2
 8000aec:	f47f af5b 	bne.w	80009a6 <main+0xa2>
  for (VarValue = 1; VarValue <= 0x2000; VarValue++)
 8000af0:	3301      	adds	r3, #1
 8000af2:	8023      	strh	r3, [r4, #0]
 8000af4:	e766      	b.n	80009c4 <main+0xc0>
    if(EE_WriteVariable(VirtAddVarTab[2], VarValue) != HAL_OK)
 8000af6:	88a8      	ldrh	r0, [r5, #4]
 8000af8:	f7ff fe94 	bl	8000824 <EE_WriteVariable>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	f47f af52 	bne.w	80009a6 <main+0xa2>
    if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTab[2]) != HAL_OK)
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <main+0x234>)
 8000b04:	88a8      	ldrh	r0, [r5, #4]
 8000b06:	f7ff fd9d 	bl	8000644 <EE_ReadVariable>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	f47f af4b 	bne.w	80009a6 <main+0xa2>
    if(VarValue != VarDataTab[2])
 8000b10:	8822      	ldrh	r2, [r4, #0]
 8000b12:	88e3      	ldrh	r3, [r4, #6]
 8000b14:	4293      	cmp	r3, r2
 8000b16:	f47f af46 	bne.w	80009a6 <main+0xa2>
  for (VarValue = 1; VarValue <= 0x3000; VarValue++)
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	e775      	b.n	8000a0a <main+0x106>
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000
 8000b28:	20000046 	.word	0x20000046
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	2000004a 	.word	0x2000004a
 8000b34:	2000004e 	.word	0x2000004e
 8000b38:	2000004c 	.word	0x2000004c

08000b3c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000b3c:	4770      	bx	lr

08000b3e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler>

08000b40 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler>

08000b42 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler>

08000b44 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler>

08000b46 <SVC_Handler>:
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000b4c:	f000 b8ba 	b.w	8000cc4 <HAL_IncTick>

08000b50 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b54:	bb08      	cbnz	r0, 8000b9a <BSP_LED_Init+0x4a>
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <BSP_LED_Init+0x68>)
 8000b58:	9001      	str	r0, [sp, #4]
 8000b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b6c:	4c13      	ldr	r4, [pc, #76]	; (8000bbc <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b70:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b74:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b78:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b7a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b82:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b84:	2302      	movs	r3, #2
 8000b86:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b88:	f000 fade 	bl	8001148 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b8c:	6860      	ldr	r0, [r4, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4629      	mov	r1, r5
 8000b92:	f000 fbbf 	bl	8001314 <HAL_GPIO_WritePin>
}
 8000b96:	b009      	add	sp, #36	; 0x24
 8000b98:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b9a:	2801      	cmp	r0, #1
 8000b9c:	d1e6      	bne.n	8000b6c <BSP_LED_Init+0x1c>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <BSP_LED_Init+0x68>)
 8000ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	9b02      	ldr	r3, [sp, #8]
 8000bb6:	e7d9      	b.n	8000b6c <BSP_LED_Init+0x1c>
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	080018f8 	.word	0x080018f8

08000bc4 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <BSP_LED_On+0x14>)
 8000bc6:	4905      	ldr	r1, [pc, #20]	; (8000bdc <BSP_LED_On+0x18>)
 8000bc8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000bcc:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000bd0:	6858      	ldr	r0, [r3, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f000 bb9e 	b.w	8001314 <HAL_GPIO_WritePin>
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	080018f8 	.word	0x080018f8

08000be0 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <BSP_LED_Toggle+0x14>)
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <BSP_LED_Toggle+0x18>)
 8000be4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000be8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000bec:	6858      	ldr	r0, [r3, #4]
 8000bee:	f000 bb96 	b.w	800131e <HAL_GPIO_TogglePin>
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	080018f8 	.word	0x080018f8

08000bfc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	490f      	ldr	r1, [pc, #60]	; (8000c3c <SystemInit+0x40>)
 8000bfe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000c02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SystemInit+0x44>)
 8000c0c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000c16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <SystemInit+0x48>)
 8000c26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c30:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c36:	608b      	str	r3, [r1, #8]
#endif
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	24003010 	.word	0x24003010

08000c48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_InitTick+0x3c>)
 8000c50:	4e0e      	ldr	r6, [pc, #56]	; (8000c8c <HAL_InitTick+0x40>)
{
 8000c52:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	7830      	ldrb	r0, [r6, #0]
 8000c5a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c5e:	6810      	ldr	r0, [r2, #0]
 8000c60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c64:	f000 f898 	bl	8000d98 <HAL_SYSTICK_Config>
 8000c68:	4604      	mov	r4, r0
 8000c6a:	b950      	cbnz	r0, 8000c82 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	2d0f      	cmp	r5, #15
 8000c6e:	d808      	bhi.n	8000c82 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	4602      	mov	r2, r0
 8000c72:	4629      	mov	r1, r5
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f85c 	bl	8000d34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	6075      	str	r5, [r6, #4]
 8000c7e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000c82:	2001      	movs	r0, #1
 8000c84:	e7fc      	b.n	8000c80 <HAL_InitTick+0x34>
 8000c86:	bf00      	nop
 8000c88:	2000001c 	.word	0x2000001c
 8000c8c:	20000020 	.word	0x20000020

08000c90 <HAL_Init>:
{
 8000c90:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x30>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ca2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000caa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f82f 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff ffca 	bl	8000c4c <HAL_InitTick>
  HAL_MspInit();
 8000cb8:	f7ff ffc6 	bl	8000c48 <HAL_MspInit>
}
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	bd08      	pop	{r3, pc}
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x10>)
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_IncTick+0x14>)
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	440b      	add	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000050 	.word	0x20000050
 8000cd8:	20000020 	.word	0x20000020

08000cdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <HAL_GetTick+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000050 	.word	0x20000050

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff6 	bl	8000cdc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	bf1c      	itt	ne
 8000cf4:	4b05      	ldrne	r3, [pc, #20]	; (8000d0c <HAL_Delay+0x24>)
 8000cf6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	bf18      	it	ne
 8000cfc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	f7ff ffed 	bl	8000cdc <HAL_GetTick>
 8000d02:	1b43      	subs	r3, r0, r5
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	d3fa      	bcc.n	8000cfe <HAL_Delay+0x16>
  {
  }
}
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000020 	.word	0x20000020

08000d10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b530      	push	{r4, r5, lr}
 8000d38:	68dc      	ldr	r4, [r3, #12]
 8000d3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	2d04      	cmp	r5, #4
 8000d46:	bf28      	it	cs
 8000d48:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d50:	bf8c      	ite	hi
 8000d52:	3c03      	subhi	r4, #3
 8000d54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d56:	fa03 f505 	lsl.w	r5, r3, r5
 8000d5a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5e:	40a3      	lsls	r3, r4
 8000d60:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000d66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	bfac      	ite	ge
 8000d6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	4a08      	ldrlt	r2, [pc, #32]	; (8000d94 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	bfb8      	it	lt
 8000d7a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	bfaa      	itet	ge
 8000d82:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d8c:	bd30      	pop	{r4, r5, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	e000ed14 	.word	0xe000ed14

08000d98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	3801      	subs	r0, #1
 8000d9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d9e:	d20b      	bcs.n	8000db8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	21f0      	movs	r1, #240	; 0xf0
 8000daa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000db8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <FLASH_Program_DoubleWord+0x28>)
{
 8000dc2:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dc4:	690c      	ldr	r4, [r1, #16]
 8000dc6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000dca:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000dcc:	690c      	ldr	r4, [r1, #16]
 8000dce:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000dd2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dd4:	690c      	ldr	r4, [r1, #16]
 8000dd6:	f044 0401 	orr.w	r4, r4, #1
 8000dda:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000ddc:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000de2:	6043      	str	r3, [r0, #4]
}
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <FLASH_Program_Word+0x20>)
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000df4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dfc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000e06:	6001      	str	r1, [r0, #0]
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <FLASH_Program_HalfWord+0x20>)
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000e2a:	8001      	strh	r1, [r0, #0]
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <FLASH_SetErrorCode+0x84>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	06d0      	lsls	r0, r2, #27
 8000e3a:	d506      	bpl.n	8000e4a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e3c:	491f      	ldr	r1, [pc, #124]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000e3e:	69ca      	ldr	r2, [r1, #28]
 8000e40:	f042 0210 	orr.w	r2, r2, #16
 8000e44:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000e46:	2210      	movs	r2, #16
 8000e48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	0691      	lsls	r1, r2, #26
 8000e4e:	d506      	bpl.n	8000e5e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000e50:	491a      	ldr	r1, [pc, #104]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000e52:	69ca      	ldr	r2, [r1, #28]
 8000e54:	f042 0208 	orr.w	r2, r2, #8
 8000e58:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <FLASH_SetErrorCode+0x84>)
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	0652      	lsls	r2, r2, #25
 8000e64:	d506      	bpl.n	8000e74 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000e66:	4915      	ldr	r1, [pc, #84]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000e68:	69ca      	ldr	r2, [r1, #28]
 8000e6a:	f042 0204 	orr.w	r2, r2, #4
 8000e6e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	0610      	lsls	r0, r2, #24
 8000e78:	d506      	bpl.n	8000e88 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000e7a:	4910      	ldr	r1, [pc, #64]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000e7c:	69ca      	ldr	r2, [r1, #28]
 8000e7e:	f042 0202 	orr.w	r2, r2, #2
 8000e82:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <FLASH_SetErrorCode+0x84>)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	05d1      	lsls	r1, r2, #23
 8000e8e:	d507      	bpl.n	8000ea0 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000e90:	490a      	ldr	r1, [pc, #40]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000e92:	69ca      	ldr	r2, [r1, #28]
 8000e94:	f042 0201 	orr.w	r2, r2, #1
 8000e98:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	0792      	lsls	r2, r2, #30
 8000ea4:	d506      	bpl.n	8000eb4 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ea6:	4905      	ldr	r1, [pc, #20]	; (8000ebc <FLASH_SetErrorCode+0x88>)
 8000ea8:	69ca      	ldr	r2, [r1, #28]
 8000eaa:	f042 0220 	orr.w	r2, r2, #32
 8000eae:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	60da      	str	r2, [r3, #12]
  }
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00
 8000ebc:	20000054 	.word	0x20000054

08000ec0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_FLASH_Unlock+0x1c>)
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ec6:	bfbf      	itttt	lt
 8000ec8:	4a05      	ldrlt	r2, [pc, #20]	; (8000ee0 <HAL_FLASH_Unlock+0x20>)
 8000eca:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ecc:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000ed0:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ed2:	bfba      	itte	lt
 8000ed4:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed6:	0fc0      	lsrlt	r0, r0, #31
 8000ed8:	2000      	movge	r0, #0
}
 8000eda:	4770      	bx	lr
 8000edc:	40023c00 	.word	0x40023c00
 8000ee0:	45670123 	.word	0x45670123

08000ee4 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <FLASH_WaitForLastOperation+0x48>)
{ 
 8000ee6:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ee8:	2200      	movs	r2, #0
{ 
 8000eea:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eec:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000eee:	f7ff fef5 	bl	8000cdc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ef2:	4d0f      	ldr	r5, [pc, #60]	; (8000f30 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8000ef4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ef6:	68eb      	ldr	r3, [r5, #12]
 8000ef8:	03da      	lsls	r2, r3, #15
 8000efa:	d40c      	bmi.n	8000f16 <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000efc:	68eb      	ldr	r3, [r5, #12]
 8000efe:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f00:	bf44      	itt	mi
 8000f02:	2301      	movmi	r3, #1
 8000f04:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000f06:	68e8      	ldr	r0, [r5, #12]
 8000f08:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000f0c:	d007      	beq.n	8000f1e <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8000f0e:	f7ff ff91 	bl	8000e34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e003      	b.n	8000f1e <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 8000f16:	1c61      	adds	r1, r4, #1
 8000f18:	d0ed      	beq.n	8000ef6 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000f1a:	b90c      	cbnz	r4, 8000f20 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8000f1c:	2003      	movs	r0, #3
}  
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000f20:	f7ff fedc 	bl	8000cdc <HAL_GetTick>
 8000f24:	1b80      	subs	r0, r0, r6
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d9e5      	bls.n	8000ef6 <FLASH_WaitForLastOperation+0x12>
 8000f2a:	e7f7      	b.n	8000f1c <FLASH_WaitForLastOperation+0x38>
 8000f2c:	20000054 	.word	0x20000054
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_FLASH_Program>:
{
 8000f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000f36:	4e20      	ldr	r6, [pc, #128]	; (8000fb8 <HAL_FLASH_Program+0x84>)
{
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000f3c:	7e32      	ldrb	r2, [r6, #24]
 8000f3e:	2a01      	cmp	r2, #1
{
 8000f40:	4607      	mov	r7, r0
 8000f42:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8000f44:	d035      	beq.n	8000fb2 <HAL_FLASH_Program+0x7e>
 8000f46:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f48:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000f4c:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f4e:	f7ff ffc9 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f52:	b9b8      	cbnz	r0, 8000f84 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	b9cf      	cbnz	r7, 8000f8c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_FLASH_Program+0x88>)
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f60:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f66:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f68:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000f70:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f76:	f7ff ffb5 	bl	8000ee4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_FLASH_Program+0x88>)
 8000f7c:	6913      	ldr	r3, [r2, #16]
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000f84:	2300      	movs	r3, #0
 8000f86:	7633      	strb	r3, [r6, #24]
}
 8000f88:	b003      	add	sp, #12
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f8c:	2f01      	cmp	r7, #1
 8000f8e:	d104      	bne.n	8000f9a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f90:	b2a1      	uxth	r1, r4
 8000f92:	4628      	mov	r0, r5
 8000f94:	f7ff ff3c 	bl	8000e10 <FLASH_Program_HalfWord>
 8000f98:	e7eb      	b.n	8000f72 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f9a:	2f02      	cmp	r7, #2
 8000f9c:	d104      	bne.n	8000fa8 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f7ff ff23 	bl	8000dec <FLASH_Program_Word>
 8000fa6:	e7e4      	b.n	8000f72 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000fa8:	4622      	mov	r2, r4
 8000faa:	4628      	mov	r0, r5
 8000fac:	f7ff ff08 	bl	8000dc0 <FLASH_Program_DoubleWord>
 8000fb0:	e7df      	b.n	8000f72 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e7e8      	b.n	8000f88 <HAL_FLASH_Program+0x54>
 8000fb6:	bf00      	nop
 8000fb8:	20000054 	.word	0x20000054
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <FLASH_MassErase+0x34>)
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fc8:	611a      	str	r2, [r3, #16]

  if (Banks == FLASH_BANK_BOTH)
 8000fca:	2903      	cmp	r1, #3
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8000fcc:	691a      	ldr	r2, [r3, #16]
  if (Banks == FLASH_BANK_BOTH)
 8000fce:	d10b      	bne.n	8000fe8 <FLASH_MassErase+0x28>
    FLASH->CR |= FLASH_MER_BIT;
 8000fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  }
  else if (Banks == FLASH_BANK_1)
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8000fd4:	f042 0204 	orr.w	r2, r2, #4
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8000fd8:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000fe0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000fe4:	6118      	str	r0, [r3, #16]
}
 8000fe6:	4770      	bx	lr
  else if (Banks == FLASH_BANK_1)
 8000fe8:	2901      	cmp	r1, #1
 8000fea:	d0f3      	beq.n	8000fd4 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 8000fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff0:	e7f2      	b.n	8000fd8 <FLASH_MassErase+0x18>
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ff8:	b139      	cbz	r1, 800100a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000ffa:	2901      	cmp	r1, #1
 8000ffc:	d01f      	beq.n	800103e <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000ffe:	2902      	cmp	r1, #2
 8001000:	bf0c      	ite	eq
 8001002:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8001006:	f44f 7140 	movne.w	r1, #768	; 0x300
  if (Sector > FLASH_SECTOR_11)
  {
    Sector += 4U;
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <FLASH_Erase_Sector+0x4c>)
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001012:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	4311      	orrs	r1, r2
 8001018:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001020:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001022:	691a      	ldr	r2, [r3, #16]
  if (Sector > FLASH_SECTOR_11)
 8001024:	280b      	cmp	r0, #11
    Sector += 4U;
 8001026:	bf88      	it	hi
 8001028:	3004      	addhi	r0, #4
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800102a:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800102e:	f040 0002 	orr.w	r0, r0, #2
 8001032:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800103a:	611a      	str	r2, [r3, #16]
}
 800103c:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	e7e2      	b.n	800100a <FLASH_Erase_Sector+0x12>
 8001044:	40023c00 	.word	0x40023c00

08001048 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <FLASH_FlushCaches+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	0591      	lsls	r1, r2, #22
 800104e:	d50f      	bpl.n	8001070 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001056:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001066:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106e:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <FLASH_FlushCaches+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	0552      	lsls	r2, r2, #21
 8001076:	d50f      	bpl.n	8001098 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800108e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001096:	601a      	str	r2, [r3, #0]
  }
}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_FLASHEx_Erase>:
{
 80010a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80010a4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001144 <HAL_FLASHEx_Erase+0xa4>
 80010a8:	f898 3018 	ldrb.w	r3, [r8, #24]
 80010ac:	2b01      	cmp	r3, #1
{
 80010ae:	4605      	mov	r5, r0
 80010b0:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80010b2:	d042      	beq.n	800113a <HAL_FLASHEx_Erase+0x9a>
 80010b4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010b6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80010ba:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010be:	f7ff ff11 	bl	8000ee4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80010c2:	4604      	mov	r4, r0
 80010c4:	b9b8      	cbnz	r0, 80010f6 <HAL_FLASHEx_Erase+0x56>
    *SectorError = 0xFFFFFFFFU;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d117      	bne.n	8001102 <HAL_FLASHEx_Erase+0x62>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80010d2:	6869      	ldr	r1, [r5, #4]
 80010d4:	7c28      	ldrb	r0, [r5, #16]
 80010d6:	f7ff ff73 	bl	8000fc0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010de:	f7ff ff01 	bl	8000ee4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_FLASHEx_Erase+0xa0>)
 80010e4:	6913      	ldr	r3, [r2, #16]
 80010e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ea:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010ee:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80010f0:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
 80010f2:	f7ff ffa9 	bl	8001048 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80010f6:	2300      	movs	r3, #0
 80010f8:	f888 3018 	strb.w	r3, [r8, #24]
}
 80010fc:	4620      	mov	r0, r4
 80010fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001102:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001104:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8001140 <HAL_FLASHEx_Erase+0xa0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001108:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800110c:	4413      	add	r3, r2
 800110e:	42b3      	cmp	r3, r6
 8001110:	d9ef      	bls.n	80010f2 <HAL_FLASHEx_Erase+0x52>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001112:	7c29      	ldrb	r1, [r5, #16]
 8001114:	4630      	mov	r0, r6
 8001116:	f7ff ff6f 	bl	8000ff8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800111a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800111e:	f7ff fee1 	bl	8000ee4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001126:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800112a:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 800112e:	b110      	cbz	r0, 8001136 <HAL_FLASHEx_Erase+0x96>
          *SectorError = index;
 8001130:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001132:	4604      	mov	r4, r0
          break;
 8001134:	e7dd      	b.n	80010f2 <HAL_FLASHEx_Erase+0x52>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001136:	3601      	adds	r6, #1
 8001138:	e7e6      	b.n	8001108 <HAL_FLASHEx_Erase+0x68>
  __HAL_LOCK(&pFlash);
 800113a:	2402      	movs	r4, #2
 800113c:	e7de      	b.n	80010fc <HAL_FLASHEx_Erase+0x5c>
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00
 8001144:	20000054 	.word	0x20000054

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001310 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001150:	4a6d      	ldr	r2, [pc, #436]	; (8001308 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001154:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001156:	2401      	movs	r4, #1
 8001158:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800115e:	43ac      	bics	r4, r5
 8001160:	f040 80b9 	bne.w	80012d6 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001164:	684d      	ldr	r5, [r1, #4]
 8001166:	f005 0403 	and.w	r4, r5, #3
 800116a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800116e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001170:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001172:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117c:	d834      	bhi.n	80011e8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800117e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001184:	68cf      	ldr	r7, [r1, #12]
 8001186:	fa07 f708 	lsl.w	r7, r7, r8
 800118a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800118e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001190:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001192:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800119a:	409f      	lsls	r7, r3
 800119c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011a0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80011a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	688f      	ldr	r7, [r1, #8]
 80011aa:	fa07 f708 	lsl.w	r7, r7, r8
 80011ae:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80011b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	d119      	bne.n	80011ec <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80011bc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80011cc:	f04f 0e0f 	mov.w	lr, #15
 80011d0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80011d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	690f      	ldr	r7, [r1, #16]
 80011da:	fa07 f70b 	lsl.w	r7, r7, fp
 80011de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	f8ca 7020 	str.w	r7, [sl, #32]
 80011e6:	e001      	b.n	80011ec <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	2c03      	cmp	r4, #3
 80011ea:	d1da      	bne.n	80011a2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80011ec:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ee:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80011fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	d06b      	beq.n	80012d6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	f04f 0a00 	mov.w	sl, #0
 8001202:	f8cd a004 	str.w	sl, [sp, #4]
 8001206:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	4c40      	ldr	r4, [pc, #256]	; (800130c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001210:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001214:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001218:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800121c:	9601      	str	r6, [sp, #4]
 800121e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001220:	f023 0603 	bic.w	r6, r3, #3
 8001224:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001228:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001230:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001238:	270f      	movs	r7, #15
 800123a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001244:	d04e      	beq.n	80012e4 <HAL_GPIO_Init+0x19c>
 8001246:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800124a:	42a0      	cmp	r0, r4
 800124c:	d04c      	beq.n	80012e8 <HAL_GPIO_Init+0x1a0>
 800124e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001252:	42a0      	cmp	r0, r4
 8001254:	d04a      	beq.n	80012ec <HAL_GPIO_Init+0x1a4>
 8001256:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800125a:	42a0      	cmp	r0, r4
 800125c:	d048      	beq.n	80012f0 <HAL_GPIO_Init+0x1a8>
 800125e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001262:	42a0      	cmp	r0, r4
 8001264:	d046      	beq.n	80012f4 <HAL_GPIO_Init+0x1ac>
 8001266:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800126a:	42a0      	cmp	r0, r4
 800126c:	d044      	beq.n	80012f8 <HAL_GPIO_Init+0x1b0>
 800126e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001272:	42a0      	cmp	r0, r4
 8001274:	d042      	beq.n	80012fc <HAL_GPIO_Init+0x1b4>
 8001276:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800127a:	42a0      	cmp	r0, r4
 800127c:	d040      	beq.n	8001300 <HAL_GPIO_Init+0x1b8>
 800127e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001282:	42a0      	cmp	r0, r4
 8001284:	d03e      	beq.n	8001304 <HAL_GPIO_Init+0x1bc>
 8001286:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800128a:	42a0      	cmp	r0, r4
 800128c:	bf0c      	ite	eq
 800128e:	2409      	moveq	r4, #9
 8001290:	240a      	movne	r4, #10
 8001292:	fa04 f40e 	lsl.w	r4, r4, lr
 8001296:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800129a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800129c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80012a2:	bf54      	ite	pl
 80012a4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80012aa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ae:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80012b0:	bf54      	ite	pl
 80012b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80012b8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012bc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80012be:	bf54      	ite	pl
 80012c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012c2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80012c6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ca:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80012cc:	bf54      	ite	pl
 80012ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80012d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80012d4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	3301      	adds	r3, #1
 80012d8:	2b10      	cmp	r3, #16
 80012da:	f47f af3b 	bne.w	8001154 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80012de:	b003      	add	sp, #12
 80012e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e4:	4654      	mov	r4, sl
 80012e6:	e7d4      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012e8:	2401      	movs	r4, #1
 80012ea:	e7d2      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012ec:	2402      	movs	r4, #2
 80012ee:	e7d0      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012f0:	2403      	movs	r4, #3
 80012f2:	e7ce      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012f4:	2404      	movs	r4, #4
 80012f6:	e7cc      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012f8:	2405      	movs	r4, #5
 80012fa:	e7ca      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 80012fc:	2406      	movs	r4, #6
 80012fe:	e7c8      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 8001300:	2407      	movs	r4, #7
 8001302:	e7c6      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 8001304:	2408      	movs	r4, #8
 8001306:	e7c4      	b.n	8001292 <HAL_GPIO_Init+0x14a>
 8001308:	40013c00 	.word	0x40013c00
 800130c:	40020000 	.word	0x40020000
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	b10a      	cbz	r2, 800131a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	6181      	str	r1, [r0, #24]
  }
}
 8001318:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	0409      	lsls	r1, r1, #16
 800131c:	e7fb      	b.n	8001316 <HAL_GPIO_WritePin+0x2>

0800131e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001320:	ea01 0203 	and.w	r2, r1, r3
 8001324:	ea21 0103 	bic.w	r1, r1, r3
 8001328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800132c:	6181      	str	r1, [r0, #24]
}
 800132e:	4770      	bx	lr

08001330 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001330:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001338:	4d18      	ldr	r5, [pc, #96]	; (800139c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_PWREx_EnableOverDrive+0x70>)
 800134e:	2201      	movs	r2, #1
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001352:	f7ff fcc3 	bl	8000cdc <HAL_GetTick>
 8001356:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001358:	686b      	ldr	r3, [r5, #4]
 800135a:	03da      	lsls	r2, r3, #15
 800135c:	d50b      	bpl.n	8001376 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001360:	4d0e      	ldr	r5, [pc, #56]	; (800139c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001362:	2201      	movs	r2, #1
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001366:	f7ff fcb9 	bl	8000cdc <HAL_GetTick>
 800136a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800136c:	686b      	ldr	r3, [r5, #4]
 800136e:	039b      	lsls	r3, r3, #14
 8001370:	d50a      	bpl.n	8001388 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001372:	2000      	movs	r0, #0
 8001374:	e006      	b.n	8001384 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001376:	f7ff fcb1 	bl	8000cdc <HAL_GetTick>
 800137a:	1b00      	subs	r0, r0, r4
 800137c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001380:	d9ea      	bls.n	8001358 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001382:	2003      	movs	r0, #3
}
 8001384:	b003      	add	sp, #12
 8001386:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001388:	f7ff fca8 	bl	8000cdc <HAL_GetTick>
 800138c:	1b00      	subs	r0, r0, r4
 800138e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001392:	d9eb      	bls.n	800136c <HAL_PWREx_EnableOverDrive+0x3c>
 8001394:	e7f5      	b.n	8001382 <HAL_PWREx_EnableOverDrive+0x52>
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000
 80013a0:	420e0000 	.word	0x420e0000

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	4604      	mov	r4, r0
 80013aa:	b340      	cbz	r0, 80013fe <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	07dd      	lsls	r5, r3, #31
 80013b0:	d410      	bmi.n	80013d4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	0798      	lsls	r0, r3, #30
 80013b6:	d45e      	bmi.n	8001476 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	071a      	lsls	r2, r3, #28
 80013bc:	f100 80a0 	bmi.w	8001500 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	075b      	lsls	r3, r3, #29
 80013c4:	f100 80c0 	bmi.w	8001548 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c8:	69a0      	ldr	r0, [r4, #24]
 80013ca:	2800      	cmp	r0, #0
 80013cc:	f040 8128 	bne.w	8001620 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80013d0:	2000      	movs	r0, #0
 80013d2:	e02b      	b.n	800142c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d4:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	f002 020c 	and.w	r2, r2, #12
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d007      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	2a08      	cmp	r2, #8
 80013e8:	d10b      	bne.n	8001402 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	0251      	lsls	r1, r2, #9
 80013ee:	d508      	bpl.n	8001402 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	039a      	lsls	r2, r3, #14
 80013f6:	d5dc      	bpl.n	80013b2 <HAL_RCC_OscConfig+0xe>
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1d9      	bne.n	80013b2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001402:	6862      	ldr	r2, [r4, #4]
 8001404:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001408:	d113      	bne.n	8001432 <HAL_RCC_OscConfig+0x8e>
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001410:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001412:	f7ff fc63 	bl	8000cdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4e7f      	ldr	r6, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001418:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	6833      	ldr	r3, [r6, #0]
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	d4c8      	bmi.n	80013b2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fc5c 	bl	8000cdc <HAL_GetTick>
 8001424:	1b40      	subs	r0, r0, r5
 8001426:	2864      	cmp	r0, #100	; 0x64
 8001428:	d9f7      	bls.n	800141a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800142a:	2003      	movs	r0, #3
}
 800142c:	b002      	add	sp, #8
 800142e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	4d78      	ldr	r5, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001434:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0xa8>
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	682b      	ldr	r3, [r5, #0]
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144a:	e7e2      	b.n	8001412 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001458:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145a:	2a00      	cmp	r2, #0
 800145c:	d1d9      	bne.n	8001412 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800145e:	f7ff fc3d 	bl	8000cdc <HAL_GetTick>
 8001462:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	039f      	lsls	r7, r3, #14
 8001468:	d5a3      	bpl.n	80013b2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146a:	f7ff fc37 	bl	8000cdc <HAL_GetTick>
 800146e:	1b80      	subs	r0, r0, r6
 8001470:	2864      	cmp	r0, #100	; 0x64
 8001472:	d9f7      	bls.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001474:	e7d9      	b.n	800142a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	f012 0f0c 	tst.w	r2, #12
 800147e:	d007      	beq.n	8001490 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	2a08      	cmp	r2, #8
 8001488:	d111      	bne.n	80014ae <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	025e      	lsls	r6, r3, #9
 800148e:	d40e      	bmi.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001490:	4a60      	ldr	r2, [pc, #384]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	079d      	lsls	r5, r3, #30
 8001496:	d502      	bpl.n	800149e <HAL_RCC_OscConfig+0xfa>
 8001498:	68e3      	ldr	r3, [r4, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d1af      	bne.n	80013fe <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	6921      	ldr	r1, [r4, #16]
 80014a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014aa:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ac:	e784      	b.n	80013b8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ae:	68e2      	ldr	r2, [r4, #12]
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 80014b2:	b1b2      	cbz	r2, 80014e2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc10 	bl	8000cdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4d55      	ldr	r5, [pc, #340]	; (8001614 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80014be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	0798      	lsls	r0, r3, #30
 80014c4:	d507      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	6922      	ldr	r2, [r4, #16]
 80014ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	e770      	b.n	80013b8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc01 	bl	8000cdc <HAL_GetTick>
 80014da:	1b80      	subs	r0, r0, r6
 80014dc:	2802      	cmp	r0, #2
 80014de:	d9ef      	bls.n	80014c0 <HAL_RCC_OscConfig+0x11c>
 80014e0:	e7a3      	b.n	800142a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80014e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e4:	f7ff fbfa 	bl	8000cdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e8:	4e4a      	ldr	r6, [pc, #296]	; (8001614 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80014ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ec:	6833      	ldr	r3, [r6, #0]
 80014ee:	0799      	lsls	r1, r3, #30
 80014f0:	f57f af62 	bpl.w	80013b8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbf2 	bl	8000cdc <HAL_GetTick>
 80014f8:	1b40      	subs	r0, r0, r5
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9f6      	bls.n	80014ec <HAL_RCC_OscConfig+0x148>
 80014fe:	e794      	b.n	800142a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001500:	6962      	ldr	r2, [r4, #20]
 8001502:	4b45      	ldr	r3, [pc, #276]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 8001504:	b182      	cbz	r2, 8001528 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001506:	2201      	movs	r2, #1
 8001508:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800150c:	f7ff fbe6 	bl	8000cdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001510:	4e40      	ldr	r6, [pc, #256]	; (8001614 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001512:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001516:	079f      	lsls	r7, r3, #30
 8001518:	f53f af52 	bmi.w	80013c0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fbde 	bl	8000cdc <HAL_GetTick>
 8001520:	1b40      	subs	r0, r0, r5
 8001522:	2802      	cmp	r0, #2
 8001524:	d9f6      	bls.n	8001514 <HAL_RCC_OscConfig+0x170>
 8001526:	e780      	b.n	800142a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001528:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800152c:	f7ff fbd6 	bl	8000cdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4e38      	ldr	r6, [pc, #224]	; (8001614 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001532:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001536:	0798      	lsls	r0, r3, #30
 8001538:	f57f af42 	bpl.w	80013c0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fbce 	bl	8000cdc <HAL_GetTick>
 8001540:	1b40      	subs	r0, r0, r5
 8001542:	2802      	cmp	r0, #2
 8001544:	d9f6      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
 8001546:	e770      	b.n	800142a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800154a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001550:	d128      	bne.n	80015a4 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001566:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4d2c      	ldr	r5, [pc, #176]	; (800161c <HAL_RCC_OscConfig+0x278>)
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	05d9      	lsls	r1, r3, #23
 800156e:	d51b      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	4d28      	ldr	r5, [pc, #160]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001574:	2b01      	cmp	r3, #1
 8001576:	d127      	bne.n	80015c8 <HAL_RCC_OscConfig+0x224>
 8001578:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001580:	f7ff fbac 	bl	8000cdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4e23      	ldr	r6, [pc, #140]	; (8001614 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001586:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800158e:	079b      	lsls	r3, r3, #30
 8001590:	d539      	bpl.n	8001606 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001592:	2f00      	cmp	r7, #0
 8001594:	f43f af18 	beq.w	80013c8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800159a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	e711      	b.n	80013c8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80015a4:	2700      	movs	r7, #0
 80015a6:	e7df      	b.n	8001568 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb94 	bl	8000cdc <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	05da      	lsls	r2, r3, #23
 80015ba:	d4d9      	bmi.n	8001570 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff fb8e 	bl	8000cdc <HAL_GetTick>
 80015c0:	1b80      	subs	r0, r0, r6
 80015c2:	2802      	cmp	r0, #2
 80015c4:	d9f7      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
 80015c6:	e730      	b.n	800142a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d104      	bne.n	80015d6 <HAL_RCC_OscConfig+0x232>
 80015cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	672b      	str	r3, [r5, #112]	; 0x70
 80015d4:	e7d0      	b.n	8001578 <HAL_RCC_OscConfig+0x1d4>
 80015d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	672a      	str	r2, [r5, #112]	; 0x70
 80015de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015e0:	f022 0204 	bic.w	r2, r2, #4
 80015e4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ca      	bne.n	8001580 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb77 	bl	8000cdc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f6:	0798      	lsls	r0, r3, #30
 80015f8:	d5cb      	bpl.n	8001592 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb6f 	bl	8000cdc <HAL_GetTick>
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	4540      	cmp	r0, r8
 8001602:	d9f7      	bls.n	80015f4 <HAL_RCC_OscConfig+0x250>
 8001604:	e711      	b.n	800142a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb69 	bl	8000cdc <HAL_GetTick>
 800160a:	1b40      	subs	r0, r0, r5
 800160c:	4540      	cmp	r0, r8
 800160e:	d9bd      	bls.n	800158c <HAL_RCC_OscConfig+0x1e8>
 8001610:	e70b      	b.n	800142a <HAL_RCC_OscConfig+0x86>
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	42470000 	.word	0x42470000
 800161c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001620:	4d36      	ldr	r5, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x358>)
 8001622:	68ab      	ldr	r3, [r5, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d03d      	beq.n	80016a8 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x35c>)
 800162e:	2200      	movs	r2, #0
 8001630:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001632:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001634:	d12b      	bne.n	800168e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001636:	f7ff fb51 	bl	8000cdc <HAL_GetTick>
 800163a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	0199      	lsls	r1, r3, #6
 8001640:	d41f      	bmi.n	8001682 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001642:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001646:	4313      	orrs	r3, r2
 8001648:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800164a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800164e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001650:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001656:	0852      	lsrs	r2, r2, #1
 8001658:	3a01      	subs	r2, #1
 800165a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800165e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4d26      	ldr	r5, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001664:	2201      	movs	r2, #1
 8001666:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001668:	f7ff fb38 	bl	8000cdc <HAL_GetTick>
 800166c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	019a      	lsls	r2, r3, #6
 8001672:	f53f aead 	bmi.w	80013d0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb31 	bl	8000cdc <HAL_GetTick>
 800167a:	1b00      	subs	r0, r0, r4
 800167c:	2802      	cmp	r0, #2
 800167e:	d9f6      	bls.n	800166e <HAL_RCC_OscConfig+0x2ca>
 8001680:	e6d3      	b.n	800142a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fb2b 	bl	8000cdc <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	2802      	cmp	r0, #2
 800168a:	d9d7      	bls.n	800163c <HAL_RCC_OscConfig+0x298>
 800168c:	e6cd      	b.n	800142a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800168e:	f7ff fb25 	bl	8000cdc <HAL_GetTick>
 8001692:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	019b      	lsls	r3, r3, #6
 8001698:	f57f ae9a 	bpl.w	80013d0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb1e 	bl	8000cdc <HAL_GetTick>
 80016a0:	1b00      	subs	r0, r0, r4
 80016a2:	2802      	cmp	r0, #2
 80016a4:	d9f6      	bls.n	8001694 <HAL_RCC_OscConfig+0x2f0>
 80016a6:	e6c0      	b.n	800142a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	2801      	cmp	r0, #1
 80016aa:	f43f aebf 	beq.w	800142c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80016ae:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	4291      	cmp	r1, r2
 80016b8:	f47f aea1 	bne.w	80013fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	428a      	cmp	r2, r1
 80016c4:	f47f ae9b 	bne.w	80013fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80016ce:	401a      	ands	r2, r3
 80016d0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80016d4:	f47f ae93 	bne.w	80013fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016da:	0852      	lsrs	r2, r2, #1
 80016dc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80016e0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016e6:	f47f ae8a 	bne.w	80013fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80016f4:	f43f ae6c 	beq.w	80013d0 <HAL_RCC_OscConfig+0x2c>
 80016f8:	e681      	b.n	80013fe <HAL_RCC_OscConfig+0x5a>
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000

08001704 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001704:	4913      	ldr	r1, [pc, #76]	; (8001754 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001706:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	688b      	ldr	r3, [r1, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d01c      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x48>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001716:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001718:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	bf14      	ite	ne
 8001722:	480d      	ldrne	r0, [pc, #52]	; (8001758 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	480d      	ldreq	r0, [pc, #52]	; (800175c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001726:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800172a:	bf18      	it	ne
 800172c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	fba1 0100 	umull	r0, r1, r1, r0
 8001736:	f7fe fd59 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_GetSysClockFreq+0x50>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001742:	3301      	adds	r3, #1
 8001744:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001746:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800174a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <HAL_RCC_GetSysClockFreq+0x54>)
 800174e:	e7fc      	b.n	800174a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001752:	e7fa      	b.n	800174a <HAL_RCC_GetSysClockFreq+0x46>
 8001754:	40023800 	.word	0x40023800
 8001758:	007a1200 	.word	0x007a1200
 800175c:	00f42400 	.word	0x00f42400

08001760 <HAL_RCC_ClockConfig>:
{
 8001760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001764:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001766:	4604      	mov	r4, r0
 8001768:	b910      	cbnz	r0, 8001770 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800176a:	2001      	movs	r0, #1
}
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b44      	ldr	r3, [pc, #272]	; (8001884 <HAL_RCC_ClockConfig+0x124>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f002 020f 	and.w	r2, r2, #15
 8001778:	428a      	cmp	r2, r1
 800177a:	d328      	bcc.n	80017ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	0797      	lsls	r7, r2, #30
 8001780:	d42d      	bmi.n	80017de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	07d0      	lsls	r0, r2, #31
 8001784:	d441      	bmi.n	800180a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x124>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f002 020f 	and.w	r2, r2, #15
 800178e:	42aa      	cmp	r2, r5
 8001790:	d866      	bhi.n	8001860 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	0751      	lsls	r1, r2, #29
 8001796:	d46c      	bmi.n	8001872 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	0713      	lsls	r3, r2, #28
 800179a:	d507      	bpl.n	80017ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179c:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 800179e:	6921      	ldr	r1, [r4, #16]
 80017a0:	6893      	ldr	r3, [r2, #8]
 80017a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ac:	f7ff ffaa 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 80017b2:	4a36      	ldr	r2, [pc, #216]	; (800188c <HAL_RCC_ClockConfig+0x12c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	40d8      	lsrs	r0, r3
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_ClockConfig+0x130>)
 80017c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_ClockConfig+0x134>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f7ff fa41 	bl	8000c4c <HAL_InitTick>
  return HAL_OK;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e7ce      	b.n	800176c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	428b      	cmp	r3, r1
 80017da:	d1c6      	bne.n	800176a <HAL_RCC_ClockConfig+0xa>
 80017dc:	e7ce      	b.n	800177c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 80017e0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	bf1e      	ittt	ne
 80017e6:	6899      	ldrne	r1, [r3, #8]
 80017e8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80017ec:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	bf42      	ittt	mi
 80017f2:	6899      	ldrmi	r1, [r3, #8]
 80017f4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80017f8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fa:	4923      	ldr	r1, [pc, #140]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 80017fc:	68a0      	ldr	r0, [r4, #8]
 80017fe:	688b      	ldr	r3, [r1, #8]
 8001800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001804:	4303      	orrs	r3, r0
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e7bb      	b.n	8001782 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	6862      	ldr	r2, [r4, #4]
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 800180e:	2a01      	cmp	r2, #1
 8001810:	d11c      	bne.n	800184c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	d0a7      	beq.n	800176a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4e1b      	ldr	r6, [pc, #108]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 800181c:	68b3      	ldr	r3, [r6, #8]
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	4313      	orrs	r3, r2
 8001824:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001826:	f7ff fa59 	bl	8000cdc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800182e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001830:	68b3      	ldr	r3, [r6, #8]
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800183c:	d0a3      	beq.n	8001786 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7ff fa4d 	bl	8000cdc <HAL_GetTick>
 8001842:	1bc0      	subs	r0, r0, r7
 8001844:	4540      	cmp	r0, r8
 8001846:	d9f3      	bls.n	8001830 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e78f      	b.n	800176c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184c:	1e91      	subs	r1, r2, #2
 800184e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	d802      	bhi.n	800185a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001858:	e7de      	b.n	8001818 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	f013 0f02 	tst.w	r3, #2
 800185e:	e7db      	b.n	8001818 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001860:	b2ea      	uxtb	r2, r5
 8001862:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	42ab      	cmp	r3, r5
 800186c:	f47f af7d 	bne.w	800176a <HAL_RCC_ClockConfig+0xa>
 8001870:	e78f      	b.n	8001792 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001872:	4905      	ldr	r1, [pc, #20]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 8001874:	68e0      	ldr	r0, [r4, #12]
 8001876:	688b      	ldr	r3, [r1, #8]
 8001878:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800187c:	4303      	orrs	r3, r0
 800187e:	608b      	str	r3, [r1, #8]
 8001880:	e78a      	b.n	8001798 <HAL_RCC_ClockConfig+0x38>
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08001900 	.word	0x08001900
 8001890:	2000001c 	.word	0x2000001c
 8001894:	20000024 	.word	0x20000024

08001898 <__libc_init_array>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	4d0d      	ldr	r5, [pc, #52]	; (80018d0 <__libc_init_array+0x38>)
 800189c:	4c0d      	ldr	r4, [pc, #52]	; (80018d4 <__libc_init_array+0x3c>)
 800189e:	1b64      	subs	r4, r4, r5
 80018a0:	10a4      	asrs	r4, r4, #2
 80018a2:	2600      	movs	r6, #0
 80018a4:	42a6      	cmp	r6, r4
 80018a6:	d109      	bne.n	80018bc <__libc_init_array+0x24>
 80018a8:	4d0b      	ldr	r5, [pc, #44]	; (80018d8 <__libc_init_array+0x40>)
 80018aa:	4c0c      	ldr	r4, [pc, #48]	; (80018dc <__libc_init_array+0x44>)
 80018ac:	f000 f818 	bl	80018e0 <_init>
 80018b0:	1b64      	subs	r4, r4, r5
 80018b2:	10a4      	asrs	r4, r4, #2
 80018b4:	2600      	movs	r6, #0
 80018b6:	42a6      	cmp	r6, r4
 80018b8:	d105      	bne.n	80018c6 <__libc_init_array+0x2e>
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
 80018bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c0:	4798      	blx	r3
 80018c2:	3601      	adds	r6, #1
 80018c4:	e7ee      	b.n	80018a4 <__libc_init_array+0xc>
 80018c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ca:	4798      	blx	r3
 80018cc:	3601      	adds	r6, #1
 80018ce:	e7f2      	b.n	80018b6 <__libc_init_array+0x1e>
 80018d0:	08001920 	.word	0x08001920
 80018d4:	08001920 	.word	0x08001920
 80018d8:	08001920 	.word	0x08001920
 80018dc:	08001924 	.word	0x08001924

080018e0 <_init>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	bf00      	nop
 80018e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e6:	bc08      	pop	{r3}
 80018e8:	469e      	mov	lr, r3
 80018ea:	4770      	bx	lr

080018ec <_fini>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	bf00      	nop
 80018f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f2:	bc08      	pop	{r3}
 80018f4:	469e      	mov	lr, r3
 80018f6:	4770      	bx	lr
