
touchscreen_test_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c10c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c34  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800def0  0800def0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800def8  0800def8  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800def8  0800def8  0001def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800defc  0800defc  0001defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800df00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          00000960  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a54  20000a54  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026d79  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b53  00000000  00000000  00046e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  0004c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f08  00000000  00000000  0004eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab56  00000000  00000000  00050a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c4f3  00000000  00000000  0007b5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee451  00000000  00000000  000a7ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00195f02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f5c  00000000  00000000  00195f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c2a4 	.word	0x0800c2a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	0800c2a4 	.word	0x0800c2a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_CRC_Init+0x20>)
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <MX_CRC_Init+0x24>)
 80005ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_CRC_Init+0x20>)
 80005b0:	f003 ffd2 	bl	8004558 <HAL_CRC_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005ba:	f001 fb43 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000110 	.word	0x20000110
 80005c8:	40023000 	.word	0x40023000

080005cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_CRC_MspInit+0x3c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d10d      	bne.n	80005fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023000 	.word	0x40023000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_DMA2D_Init+0x60>)
 8000618:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_DMA2D_Init+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_DMA2D_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_DMA2D_Init+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000646:	f004 f961 	bl	800490c <HAL_DMA2D_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000650:	f001 faf8 	bl	8001c44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000654:	2101      	movs	r1, #1
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000658:	f004 fab6 	bl	8004bc8 <HAL_DMA2D_ConfigLayer>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000662:	f001 faef 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000118 	.word	0x20000118
 8000670:	4002b000 	.word	0x4002b000

08000674 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <HAL_DMA2D_MspInit+0x3c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d10d      	bne.n	80006a2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_DMA2D_MspInit+0x40>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_DMA2D_MspInit+0x40>)
 8000690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <HAL_DMA2D_MspInit+0x40>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	4002b000 	.word	0x4002b000
 80006b4:	40023800 	.word	0x40023800

080006b8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80006be:	2306      	movs	r3, #6
 80006c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80006c2:	2306      	movs	r3, #6
 80006c4:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	83fb      	strh	r3, [r7, #30]
 80006ce:	2300      	movs	r3, #0
 80006d0:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d6:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80006dc:	4ba1      	ldr	r3, [pc, #644]	; (8000964 <EE_Init+0x2ac>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80006e2:	4ba1      	ldr	r3, [pc, #644]	; (8000968 <EE_Init+0x2b0>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80006f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00b      	beq.n	800071a <EE_Init+0x62>
 8000702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000706:	f280 8196 	bge.w	8000a36 <EE_Init+0x37e>
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 80f8 	beq.w	8000900 <EE_Init+0x248>
 8000710:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000714:	4293      	cmp	r3, r2
 8000716:	d050      	beq.n	80007ba <EE_Init+0x102>
 8000718:	e18d      	b.n	8000a36 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800071a:	8c3b      	ldrh	r3, [r7, #32]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d116      	bne.n	800074e <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000720:	4890      	ldr	r0, [pc, #576]	; (8000964 <EE_Init+0x2ac>)
 8000722:	f000 f9a9 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	f040 818e 	bne.w	8000a4a <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800072e:	f107 0214 	add.w	r2, r7, #20
 8000732:	463b      	mov	r3, r7
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fd2a 	bl	8005190 <HAL_FLASHEx_Erase>
 800073c:	4603      	mov	r3, r0
 800073e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000740:	7efb      	ldrb	r3, [r7, #27]
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 8181 	beq.w	8000a4a <EE_Init+0x392>
          {
            return FlashStatus;
 8000748:	7efb      	ldrb	r3, [r7, #27]
 800074a:	b29b      	uxth	r3, r3
 800074c:	e185      	b.n	8000a5a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800074e:	8c3b      	ldrh	r3, [r7, #32]
 8000750:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000754:	4293      	cmp	r3, r2
 8000756:	d125      	bne.n	80007a4 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000758:	4882      	ldr	r0, [pc, #520]	; (8000964 <EE_Init+0x2ac>)
 800075a:	f000 f98d 	bl	8000a78 <EE_VerifyPageFullyErased>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10e      	bne.n	8000782 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000764:	f107 0214 	add.w	r2, r7, #20
 8000768:	463b      	mov	r3, r7
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fd0f 	bl	8005190 <HAL_FLASHEx_Erase>
 8000772:	4603      	mov	r3, r0
 8000774:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000776:	7efb      	ldrb	r3, [r7, #27]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <EE_Init+0xca>
          {
            return FlashStatus;
 800077c:	7efb      	ldrb	r3, [r7, #27]
 800077e:	b29b      	uxth	r3, r3
 8000780:	e16b      	b.n	8000a5a <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	4977      	ldr	r1, [pc, #476]	; (8000968 <EE_Init+0x2b0>)
 800078c:	2001      	movs	r0, #1
 800078e:	f004 fb49 	bl	8004e24 <HAL_FLASH_Program>
 8000792:	4603      	mov	r3, r0
 8000794:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000796:	7efb      	ldrb	r3, [r7, #27]
 8000798:	2b00      	cmp	r3, #0
 800079a:	f000 8156 	beq.w	8000a4a <EE_Init+0x392>
        {
          return FlashStatus;
 800079e:	7efb      	ldrb	r3, [r7, #27]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	e15a      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007a4:	f000 f9fa 	bl	8000b9c <EE_Format>
 80007a8:	4603      	mov	r3, r0
 80007aa:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007ac:	7efb      	ldrb	r3, [r7, #27]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 814b 	beq.w	8000a4a <EE_Init+0x392>
        {
          return FlashStatus;
 80007b4:	7efb      	ldrb	r3, [r7, #27]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	e14f      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80007ba:	8c3b      	ldrh	r3, [r7, #32]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d163      	bne.n	8000888 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007c4:	e030      	b.n	8000828 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80007c6:	4b69      	ldr	r3, [pc, #420]	; (800096c <EE_Init+0x2b4>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ce:	4968      	ldr	r1, [pc, #416]	; (8000970 <EE_Init+0x2b8>)
 80007d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d101      	bne.n	80007dc <EE_Init+0x124>
          {
            x = VarIdx;
 80007d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007da:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80007dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d01d      	beq.n	8000822 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007e8:	4a61      	ldr	r2, [pc, #388]	; (8000970 <EE_Init+0x2b8>)
 80007ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ee:	4961      	ldr	r1, [pc, #388]	; (8000974 <EE_Init+0x2bc>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f967 	bl	8000ac4 <EE_ReadVariable>
 80007f6:	4603      	mov	r3, r0
 80007f8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80007fa:	8bbb      	ldrh	r3, [r7, #28]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d010      	beq.n	8000822 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000802:	4a5b      	ldr	r2, [pc, #364]	; (8000970 <EE_Init+0x2b8>)
 8000804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000808:	4a5a      	ldr	r2, [pc, #360]	; (8000974 <EE_Init+0x2bc>)
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fa5c 	bl	8000ccc <EE_VerifyPageFullWriteVariable>
 8000814:	4603      	mov	r3, r0
 8000816:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000818:	8bfb      	ldrh	r3, [r7, #30]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <EE_Init+0x16a>
              {
                return EepromStatus;
 800081e:	8bfb      	ldrh	r3, [r7, #30]
 8000820:	e11b      	b.n	8000a5a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	3301      	adds	r3, #1
 8000826:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800082a:	2b03      	cmp	r3, #3
 800082c:	d9cb      	bls.n	80007c6 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	494b      	ldr	r1, [pc, #300]	; (8000964 <EE_Init+0x2ac>)
 8000838:	2001      	movs	r0, #1
 800083a:	f004 faf3 	bl	8004e24 <HAL_FLASH_Program>
 800083e:	4603      	mov	r3, r0
 8000840:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000842:	7efb      	ldrb	r3, [r7, #27]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <EE_Init+0x196>
        {
          return FlashStatus;
 8000848:	7efb      	ldrb	r3, [r7, #27]
 800084a:	b29b      	uxth	r3, r3
 800084c:	e105      	b.n	8000a5a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 800084e:	2303      	movs	r3, #3
 8000850:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000856:	2302      	movs	r3, #2
 8000858:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800085a:	4843      	ldr	r0, [pc, #268]	; (8000968 <EE_Init+0x2b0>)
 800085c:	f000 f90c 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	f040 80f3 	bne.w	8000a4e <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000868:	f107 0214 	add.w	r2, r7, #20
 800086c:	463b      	mov	r3, r7
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fc8d 	bl	8005190 <HAL_FLASHEx_Erase>
 8000876:	4603      	mov	r3, r0
 8000878:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800087a:	7efb      	ldrb	r3, [r7, #27]
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 80e6 	beq.w	8000a4e <EE_Init+0x396>
          {
            return FlashStatus;
 8000882:	7efb      	ldrb	r3, [r7, #27]
 8000884:	b29b      	uxth	r3, r3
 8000886:	e0e8      	b.n	8000a5a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000888:	8c3b      	ldrh	r3, [r7, #32]
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	4293      	cmp	r3, r2
 8000890:	d12b      	bne.n	80008ea <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8000892:	2303      	movs	r3, #3
 8000894:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800089e:	4832      	ldr	r0, [pc, #200]	; (8000968 <EE_Init+0x2b0>)
 80008a0:	f000 f8ea 	bl	8000a78 <EE_VerifyPageFullyErased>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10e      	bne.n	80008c8 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008aa:	f107 0214 	add.w	r2, r7, #20
 80008ae:	463b      	mov	r3, r7
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fc6c 	bl	8005190 <HAL_FLASHEx_Erase>
 80008b8:	4603      	mov	r3, r0
 80008ba:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <EE_Init+0x210>
          {
            return FlashStatus;
 80008c2:	7efb      	ldrb	r3, [r7, #27]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	e0c8      	b.n	8000a5a <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	4924      	ldr	r1, [pc, #144]	; (8000964 <EE_Init+0x2ac>)
 80008d2:	2001      	movs	r0, #1
 80008d4:	f004 faa6 	bl	8004e24 <HAL_FLASH_Program>
 80008d8:	4603      	mov	r3, r0
 80008da:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008dc:	7efb      	ldrb	r3, [r7, #27]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80b5 	beq.w	8000a4e <EE_Init+0x396>
        {
          return FlashStatus;
 80008e4:	7efb      	ldrb	r3, [r7, #27]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	e0b7      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80008ea:	f000 f957 	bl	8000b9c <EE_Format>
 80008ee:	4603      	mov	r3, r0
 80008f0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008f2:	7efb      	ldrb	r3, [r7, #27]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80aa 	beq.w	8000a4e <EE_Init+0x396>
        {
          return FlashStatus;
 80008fa:	7efb      	ldrb	r3, [r7, #27]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	e0ac      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000900:	8c3b      	ldrh	r3, [r7, #32]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000906:	f000 f949 	bl	8000b9c <EE_Format>
 800090a:	4603      	mov	r3, r0
 800090c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800090e:	7efb      	ldrb	r3, [r7, #27]
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 809e 	beq.w	8000a52 <EE_Init+0x39a>
        {
          return FlashStatus;
 8000916:	7efb      	ldrb	r3, [r7, #27]
 8000918:	b29b      	uxth	r3, r3
 800091a:	e09e      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800091c:	8c3b      	ldrh	r3, [r7, #32]
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	4293      	cmp	r3, r2
 8000924:	d11b      	bne.n	800095e <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8000926:	2303      	movs	r3, #3
 8000928:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800092e:	2302      	movs	r3, #2
 8000930:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <EE_Init+0x2b0>)
 8000934:	f000 f8a0 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	f040 8089 	bne.w	8000a52 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000940:	f107 0214 	add.w	r2, r7, #20
 8000944:	463b      	mov	r3, r7
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fc21 	bl	8005190 <HAL_FLASHEx_Erase>
 800094e:	4603      	mov	r3, r0
 8000950:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000952:	7efb      	ldrb	r3, [r7, #27]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d07c      	beq.n	8000a52 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000958:	7efb      	ldrb	r3, [r7, #27]
 800095a:	b29b      	uxth	r3, r3
 800095c:	e07d      	b.n	8000a5a <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000962:	e03a      	b.n	80009da <EE_Init+0x322>
 8000964:	08008000 	.word	0x08008000
 8000968:	0800c000 	.word	0x0800c000
 800096c:	08008006 	.word	0x08008006
 8000970:	20000000 	.word	0x20000000
 8000974:	20000158 	.word	0x20000158
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <EE_Init+0x3ac>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b29a      	uxth	r2, r3
 800097e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000980:	4939      	ldr	r1, [pc, #228]	; (8000a68 <EE_Init+0x3b0>)
 8000982:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000986:	429a      	cmp	r2, r3
 8000988:	d101      	bne.n	800098e <EE_Init+0x2d6>
          {
            x = VarIdx;
 800098a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800098c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800098e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000990:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000994:	429a      	cmp	r2, r3
 8000996:	d01d      	beq.n	80009d4 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800099a:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <EE_Init+0x3b0>)
 800099c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a0:	4932      	ldr	r1, [pc, #200]	; (8000a6c <EE_Init+0x3b4>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f88e 	bl	8000ac4 <EE_ReadVariable>
 80009a8:	4603      	mov	r3, r0
 80009aa:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80009ac:	8bbb      	ldrh	r3, [r7, #28]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d010      	beq.n	80009d4 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <EE_Init+0x3b0>)
 80009b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ba:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <EE_Init+0x3b4>)
 80009bc:	8812      	ldrh	r2, [r2, #0]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f983 	bl	8000ccc <EE_VerifyPageFullWriteVariable>
 80009c6:	4603      	mov	r3, r0
 80009c8:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80009ca:	8bfb      	ldrh	r3, [r7, #30]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <EE_Init+0x31c>
              {
                return EepromStatus;
 80009d0:	8bfb      	ldrh	r3, [r7, #30]
 80009d2:	e042      	b.n	8000a5a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80009d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009d6:	3301      	adds	r3, #1
 80009d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d9cb      	bls.n	8000978 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80009e0:	f04f 0200 	mov.w	r2, #0
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	4921      	ldr	r1, [pc, #132]	; (8000a70 <EE_Init+0x3b8>)
 80009ea:	2001      	movs	r0, #1
 80009ec:	f004 fa1a 	bl	8004e24 <HAL_FLASH_Program>
 80009f0:	4603      	mov	r3, r0
 80009f2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80009f4:	7efb      	ldrb	r3, [r7, #27]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <EE_Init+0x348>
        {
          return FlashStatus;
 80009fa:	7efb      	ldrb	r3, [r7, #27]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	e02c      	b.n	8000a5a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8000a00:	2302      	movs	r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <EE_Init+0x3bc>)
 8000a0e:	f000 f833 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11c      	bne.n	8000a52 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000a18:	f107 0214 	add.w	r2, r7, #20
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 fbb5 	bl	8005190 <HAL_FLASHEx_Erase>
 8000a26:	4603      	mov	r3, r0
 8000a28:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000a2a:	7efb      	ldrb	r3, [r7, #27]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d010      	beq.n	8000a52 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000a30:	7efb      	ldrb	r3, [r7, #27]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	e011      	b.n	8000a5a <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000a36:	f000 f8b1 	bl	8000b9c <EE_Format>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000a3e:	7efb      	ldrb	r3, [r7, #27]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <EE_Init+0x39e>
      {
        return FlashStatus;
 8000a44:	7efb      	ldrb	r3, [r7, #27]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	e007      	b.n	8000a5a <EE_Init+0x3a2>
      break;
 8000a4a:	bf00      	nop
 8000a4c:	e004      	b.n	8000a58 <EE_Init+0x3a0>
      break;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <EE_Init+0x3a0>
      break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <EE_Init+0x3a0>
      }
      break;
 8000a56:	bf00      	nop
  }

  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	0800c006 	.word	0x0800c006
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000158 	.word	0x20000158
 8000a70:	0800c000 	.word	0x0800c000
 8000a74:	08008000 	.word	0x08008000

08000a78 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000a84:	f245 5355 	movw	r3, #21845	; 0x5555
 8000a88:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000a8a:	e00d      	b.n	8000aa8 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8000a92:	897b      	ldrh	r3, [r7, #10]
 8000a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d002      	beq.n	8000aa2 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

      break;
 8000aa0:	e006      	b.n	8000ab0 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <EE_VerifyPageFullyErased+0x48>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d3ed      	bcc.n	8000a8c <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	b29b      	uxth	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	0800c000 	.word	0x0800c000

08000ac4 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000ad4:	f245 5355 	movw	r3, #21845	; 0x5555
 8000ad8:	81bb      	strh	r3, [r7, #12]
 8000ada:	2301      	movs	r3, #1
 8000adc:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <EE_ReadVariable+0x8c>)
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <EE_ReadVariable+0x8c>)
 8000ae4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f8aa 	bl	8000c40 <EE_FindValidPage>
 8000aec:	4603      	mov	r3, r0
 8000aee:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	2bab      	cmp	r3, #171	; 0xab
 8000af4:	d101      	bne.n	8000afa <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000af6:	23ab      	movs	r3, #171	; 0xab
 8000af8:	e025      	b.n	8000b46 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b00:	3302      	adds	r3, #2
 8000b02:	039b      	lsls	r3, r3, #14
 8000b04:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	039a      	lsls	r2, r3, #14
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <EE_ReadVariable+0x90>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000b12:	e012      	b.n	8000b3a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000b1a:	89ba      	ldrh	r2, [r7, #12]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d108      	bne.n	8000b34 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	3b02      	subs	r3, #2
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	82fb      	strh	r3, [r7, #22]

      break;
 8000b32:	e007      	b.n	8000b44 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	3b04      	subs	r3, #4
 8000b38:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8e7      	bhi.n	8000b14 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000b44:	8afb      	ldrh	r3, [r7, #22]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08008000 	.word	0x08008000
 8000b54:	08007ffe 	.word	0x08007ffe

08000b58 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	80fb      	strh	r3, [r7, #6]
 8000b64:	4613      	mov	r3, r2
 8000b66:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000b6c:	88ba      	ldrh	r2, [r7, #4]
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f8aa 	bl	8000ccc <EE_VerifyPageFullWriteVariable>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	2b80      	cmp	r3, #128	; 0x80
 8000b80:	d107      	bne.n	8000b92 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f901 	bl	8000d90 <EE_PageTransfer>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000b92:	89fb      	ldrh	r3, [r7, #14]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000bba:	481f      	ldr	r0, [pc, #124]	; (8000c38 <EE_Format+0x9c>)
 8000bbc:	f7ff ff5c 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10d      	bne.n	8000be2 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000bc6:	f107 0218 	add.w	r2, r7, #24
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fade 	bl	8005190 <HAL_FLASHEx_Erase>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <EE_Format+0x46>
    {
      return FlashStatus;
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	e025      	b.n	8000c2e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	4913      	ldr	r1, [pc, #76]	; (8000c38 <EE_Format+0x9c>)
 8000bec:	2001      	movs	r0, #1
 8000bee:	f004 f919 	bl	8004e24 <HAL_FLASH_Program>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000bf6:	7ffb      	ldrb	r3, [r7, #31]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <EE_Format+0x64>
  {
    return FlashStatus;
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	e016      	b.n	8000c2e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000c00:	2303      	movs	r3, #3
 8000c02:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <EE_Format+0xa0>)
 8000c06:	f7ff ff37 	bl	8000a78 <EE_VerifyPageFullyErased>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10d      	bne.n	8000c2c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000c10:	f107 0218 	add.w	r2, r7, #24
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fab9 	bl	8005190 <HAL_FLASHEx_Erase>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000c22:	7ffb      	ldrb	r3, [r7, #31]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <EE_Format+0x90>
    {
      return FlashStatus;
 8000c28:	7ffb      	ldrb	r3, [r7, #31]
 8000c2a:	e000      	b.n	8000c2e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08008000 	.word	0x08008000
 8000c3c:	0800c000 	.word	0x0800c000

08000c40 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	81fb      	strh	r3, [r7, #14]
 8000c4e:	2306      	movs	r3, #6
 8000c50:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <EE_FindValidPage+0x84>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <EE_FindValidPage+0x88>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d01b      	beq.n	8000c9c <EE_FindValidPage+0x5c>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d125      	bne.n	8000cb4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d108      	bne.n	8000c80 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e01c      	b.n	8000cb6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e01a      	b.n	8000cb6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000c80:	89fb      	ldrh	r3, [r7, #14]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000c86:	89bb      	ldrh	r3, [r7, #12]
 8000c88:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000c90:	2301      	movs	r3, #1
 8000c92:	e010      	b.n	8000cb6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000c94:	2300      	movs	r3, #0
 8000c96:	e00e      	b.n	8000cb6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000c98:	23ab      	movs	r3, #171	; 0xab
 8000c9a:	e00c      	b.n	8000cb6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e007      	b.n	8000cb6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ca6:	89bb      	ldrh	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e002      	b.n	8000cb6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000cb0:	23ab      	movs	r3, #171	; 0xab
 8000cb2:	e000      	b.n	8000cb6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000cb4:	2300      	movs	r3, #0
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	08008000 	.word	0x08008000
 8000cc8:	0800c000 	.word	0x0800c000

08000ccc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff ffa6 	bl	8000c40 <EE_FindValidPage>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000cf8:	8a3b      	ldrh	r3, [r7, #16]
 8000cfa:	2bab      	cmp	r3, #171	; 0xab
 8000cfc:	d101      	bne.n	8000d02 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000cfe:	23ab      	movs	r3, #171	; 0xab
 8000d00:	e03b      	b.n	8000d7a <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000d02:	8a3b      	ldrh	r3, [r7, #16]
 8000d04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d08:	3302      	adds	r3, #2
 8000d0a:	039b      	lsls	r3, r3, #14
 8000d0c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000d0e:	8a3b      	ldrh	r3, [r7, #16]
 8000d10:	3301      	adds	r3, #1
 8000d12:	039a      	lsls	r2, r3, #14
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <EE_VerifyPageFullWriteVariable+0xc0>)
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000d1a:	e029      	b.n	8000d70 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d121      	bne.n	8000d6a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	4622      	mov	r2, r4
 8000d30:	462b      	mov	r3, r5
 8000d32:	6979      	ldr	r1, [r7, #20]
 8000d34:	2001      	movs	r0, #1
 8000d36:	f004 f875 	bl	8004e24 <HAL_FLASH_Program>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000d3e:	7cfb      	ldrb	r3, [r7, #19]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000d44:	7cfb      	ldrb	r3, [r7, #19]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	e017      	b.n	8000d7a <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	1c99      	adds	r1, r3, #2
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	2200      	movs	r2, #0
 8000d52:	4698      	mov	r8, r3
 8000d54:	4691      	mov	r9, r2
 8000d56:	4642      	mov	r2, r8
 8000d58:	464b      	mov	r3, r9
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f004 f862 	bl	8004e24 <HAL_FLASH_Program>
 8000d60:	4603      	mov	r3, r0
 8000d62:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000d64:	7cfb      	ldrb	r3, [r7, #19]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	e007      	b.n	8000d7a <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3d1      	bcc.n	8000d1c <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000d78:	2380      	movs	r3, #128	; 0x80
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d84:	08008000 	.word	0x08008000
 8000d88:	0800c000 	.word	0x0800c000
 8000d8c:	08007fff 	.word	0x08007fff

08000d90 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000da6:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <EE_PageTransfer+0x168>)
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000db2:	2300      	movs	r3, #0
 8000db4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	847b      	strh	r3, [r7, #34]	; 0x22
 8000dba:	2300      	movs	r3, #0
 8000dbc:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff ff3c 	bl	8000c40 <EE_FindValidPage>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <EE_PageTransfer+0x168>)
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000dda:	e009      	b.n	8000df0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d104      	bne.n	8000dec <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <EE_PageTransfer+0x16c>)
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000de6:	2302      	movs	r3, #2
 8000de8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000dea:	e001      	b.n	8000df0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000dec:	23ab      	movs	r3, #171	; 0xab
 8000dee:	e07e      	b.n	8000eee <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000df0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f004 f812 	bl	8004e24 <HAL_FLASH_Program>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	e06b      	b.n	8000eee <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000e16:	88ba      	ldrh	r2, [r7, #4]
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff55 	bl	8000ccc <EE_VerifyPageFullWriteVariable>
 8000e22:	4603      	mov	r3, r0
 8000e24:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e2e:	e05e      	b.n	8000eee <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	853b      	strh	r3, [r7, #40]	; 0x28
 8000e34:	e027      	b.n	8000e86 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000e36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e38:	4a31      	ldr	r2, [pc, #196]	; (8000f00 <EE_PageTransfer+0x170>)
 8000e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d01d      	beq.n	8000e80 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000e44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <EE_PageTransfer+0x170>)
 8000e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4c:	492d      	ldr	r1, [pc, #180]	; (8000f04 <EE_PageTransfer+0x174>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe38 	bl	8000ac4 <EE_ReadVariable>
 8000e54:	4603      	mov	r3, r0
 8000e56:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000e58:	8c3b      	ldrh	r3, [r7, #32]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d010      	beq.n	8000e80 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <EE_PageTransfer+0x170>)
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <EE_PageTransfer+0x174>)
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff2d 	bl	8000ccc <EE_VerifyPageFullWriteVariable>
 8000e72:	4603      	mov	r3, r0
 8000e74:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e7e:	e036      	b.n	8000eee <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e82:	3301      	adds	r3, #1
 8000e84:	853b      	strh	r3, [r7, #40]	; 0x28
 8000e86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d9d4      	bls.n	8000e36 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000e90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e92:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000e9c:	f107 021c 	add.w	r2, r7, #28
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f972 	bl	8005190 <HAL_FLASHEx_Erase>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	e015      	b.n	8000eee <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f003 ffa9 	bl	8004e24 <HAL_FLASH_Program>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	e002      	b.n	8000eee <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eec:	b29b      	uxth	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08008000 	.word	0x08008000
 8000efc:	0800c000 	.word	0x0800c000
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000158 	.word	0x20000158

08000f08 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f22:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <MX_FMC_Init+0x9c>)
 8000f24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f74:	2307      	movs	r3, #7
 8000f76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_FMC_Init+0x98>)
 8000f8a:	f008 f945 	bl	8009218 <HAL_SDRAM_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f94:	f000 fe56 	bl	8001c44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000015c 	.word	0x2000015c
 8000fa4:	a0000140 	.word	0xa0000140

08000fa8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_FMC_MspInit+0x104>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d16f      	bne.n	80010a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_FMC_MspInit+0x104>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_FMC_MspInit+0x108>)
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <HAL_FMC_MspInit+0x108>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6393      	str	r3, [r2, #56]	; 0x38
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_FMC_MspInit+0x108>)
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000fe6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000fea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <HAL_FMC_MspInit+0x10c>)
 8001002:	f004 fa05 	bl	8005410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <HAL_FMC_MspInit+0x110>)
 8001020:	f004 f9f6 	bl	8005410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001024:	f248 1333 	movw	r3, #33075	; 0x8133
 8001028:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001036:	230c      	movs	r3, #12
 8001038:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <HAL_FMC_MspInit+0x114>)
 8001040:	f004 f9e6 	bl	8005410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001044:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001048:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <HAL_FMC_MspInit+0x118>)
 8001060:	f004 f9d6 	bl	8005410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001064:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001068:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001076:	230c      	movs	r3, #12
 8001078:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <HAL_FMC_MspInit+0x11c>)
 8001080:	f004 f9c6 	bl	8005410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001094:	230c      	movs	r3, #12
 8001096:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <HAL_FMC_MspInit+0x120>)
 800109e:	f004 f9b7 	bl	8005410 <HAL_GPIO_Init>
 80010a2:	e000      	b.n	80010a6 <HAL_FMC_MspInit+0xfe>
    return;
 80010a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000190 	.word	0x20000190
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40020400 	.word	0x40020400

080010cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010d4:	f7ff ff68 	bl	8000fa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	4b85      	ldr	r3, [pc, #532]	; (8001310 <MX_GPIO_Init+0x230>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a84      	ldr	r2, [pc, #528]	; (8001310 <MX_GPIO_Init+0x230>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b82      	ldr	r3, [pc, #520]	; (8001310 <MX_GPIO_Init+0x230>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	4b7e      	ldr	r3, [pc, #504]	; (8001310 <MX_GPIO_Init+0x230>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a7d      	ldr	r2, [pc, #500]	; (8001310 <MX_GPIO_Init+0x230>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <MX_GPIO_Init+0x230>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b77      	ldr	r3, [pc, #476]	; (8001310 <MX_GPIO_Init+0x230>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a76      	ldr	r2, [pc, #472]	; (8001310 <MX_GPIO_Init+0x230>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b74      	ldr	r3, [pc, #464]	; (8001310 <MX_GPIO_Init+0x230>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <MX_GPIO_Init+0x230>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a6f      	ldr	r2, [pc, #444]	; (8001310 <MX_GPIO_Init+0x230>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <MX_GPIO_Init+0x230>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b69      	ldr	r3, [pc, #420]	; (8001310 <MX_GPIO_Init+0x230>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a68      	ldr	r2, [pc, #416]	; (8001310 <MX_GPIO_Init+0x230>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b66      	ldr	r3, [pc, #408]	; (8001310 <MX_GPIO_Init+0x230>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <MX_GPIO_Init+0x230>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a61      	ldr	r2, [pc, #388]	; (8001310 <MX_GPIO_Init+0x230>)
 800118c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <MX_GPIO_Init+0x230>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <MX_GPIO_Init+0x230>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <MX_GPIO_Init+0x230>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b58      	ldr	r3, [pc, #352]	; (8001310 <MX_GPIO_Init+0x230>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b54      	ldr	r3, [pc, #336]	; (8001310 <MX_GPIO_Init+0x230>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a53      	ldr	r2, [pc, #332]	; (8001310 <MX_GPIO_Init+0x230>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <MX_GPIO_Init+0x230>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2116      	movs	r1, #22
 80011da:	484e      	ldr	r0, [pc, #312]	; (8001314 <MX_GPIO_Init+0x234>)
 80011dc:	f004 fbd0 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	484c      	ldr	r0, [pc, #304]	; (8001318 <MX_GPIO_Init+0x238>)
 80011e6:	f004 fbcb 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011f0:	484a      	ldr	r0, [pc, #296]	; (800131c <MX_GPIO_Init+0x23c>)
 80011f2:	f004 fbc5 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <MX_GPIO_Init+0x240>)
 80011fe:	f004 fbbf 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001202:	2316      	movs	r3, #22
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	483e      	ldr	r0, [pc, #248]	; (8001314 <MX_GPIO_Init+0x234>)
 800121a:	f004 f8f9 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121e:	2301      	movs	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001222:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4839      	ldr	r0, [pc, #228]	; (8001318 <MX_GPIO_Init+0x238>)
 8001234:	f004 f8ec 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001238:	f248 0306 	movw	r3, #32774	; 0x8006
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4832      	ldr	r0, [pc, #200]	; (8001318 <MX_GPIO_Init+0x238>)
 8001250:	f004 f8de 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	482b      	ldr	r0, [pc, #172]	; (8001318 <MX_GPIO_Init+0x238>)
 800126c:	f004 f8d0 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001270:	2320      	movs	r3, #32
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001274:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_GPIO_Init+0x234>)
 8001286:	f004 f8c3 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800128a:	2304      	movs	r3, #4
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4821      	ldr	r0, [pc, #132]	; (8001324 <MX_GPIO_Init+0x244>)
 800129e:	f004 f8b7 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80012a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <MX_GPIO_Init+0x23c>)
 80012b8:	f004 f8aa 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80012bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x23c>)
 80012d6:	f004 f89b 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <MX_GPIO_Init+0x240>)
 80012f4:	f004 f88c 	bl	8005410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2006      	movs	r0, #6
 80012fe:	f003 f901 	bl	8004504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001302:	2006      	movs	r0, #6
 8001304:	f003 f91a 	bl	800453c <HAL_NVIC_EnableIRQ>

}
 8001308:	bf00      	nop
 800130a:	3738      	adds	r7, #56	; 0x38
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020800 	.word	0x40020800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021800 	.word	0x40021800
 8001324:	40020400 	.word	0x40020400

08001328 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_I2C3_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <MX_I2C3_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_I2C3_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <MX_I2C3_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_I2C3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_I2C3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_I2C3_Init+0x74>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_I2C3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2C3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_I2C3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_I2C3_Init+0x74>)
 8001366:	f005 fd07 	bl	8006d78 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 fc68 	bl	8001c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <MX_I2C3_Init+0x74>)
 8001378:	f006 fcfb 	bl	8007d72 <HAL_I2CEx_ConfigAnalogFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001382:	f000 fc5f 	bl	8001c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_I2C3_Init+0x74>)
 800138a:	f006 fd2e 	bl	8007dea <HAL_I2CEx_ConfigDigitalFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fc56 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000194 	.word	0x20000194
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <HAL_I2C_MspInit+0xc4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d14b      	bne.n	8001462 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140c:	2301      	movs	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001414:	2304      	movs	r3, #4
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <HAL_I2C_MspInit+0xcc>)
 8001420:	f003 fff6 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142a:	2312      	movs	r3, #18
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001436:	2304      	movs	r3, #4
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_I2C_MspInit+0xd0>)
 8001442:	f003 ffe5 	bl	8005410 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40005c00 	.word	0x40005c00
 8001470:	40023800 	.word	0x40023800
 8001474:	40020800 	.word	0x40020800
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_I2C_MspDeInit+0x3c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10f      	bne.n	80014ae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_I2C_MspDeInit+0x40>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_I2C_MspDeInit+0x40>)
 8001494:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <HAL_I2C_MspDeInit+0x44>)
 80014a0:	f004 f962 	bl	8005768 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80014a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_I2C_MspDeInit+0x48>)
 80014aa:	f004 f95d 	bl	8005768 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40005c00 	.word	0x40005c00
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020000 	.word	0x40020000

080014c8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09a      	sub	sp, #104	; 0x68
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00a fa6e 	bl	800b9b8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2234      	movs	r2, #52	; 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00a fa68 	bl	800b9b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <MX_LTDC_Init+0x158>)
 80014ea:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <MX_LTDC_Init+0x15c>)
 80014ec:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <MX_LTDC_Init+0x158>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <MX_LTDC_Init+0x158>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <MX_LTDC_Init+0x158>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <MX_LTDC_Init+0x158>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <MX_LTDC_Init+0x158>)
 8001508:	2207      	movs	r2, #7
 800150a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <MX_LTDC_Init+0x158>)
 800150e:	2203      	movs	r2, #3
 8001510:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <MX_LTDC_Init+0x158>)
 8001514:	220e      	movs	r2, #14
 8001516:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <MX_LTDC_Init+0x158>)
 800151a:	2205      	movs	r2, #5
 800151c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <MX_LTDC_Init+0x158>)
 8001520:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_LTDC_Init+0x158>)
 8001528:	22f5      	movs	r2, #245	; 0xf5
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_LTDC_Init+0x158>)
 800152e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <MX_LTDC_Init+0x158>)
 8001536:	22f7      	movs	r2, #247	; 0xf7
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <MX_LTDC_Init+0x158>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_LTDC_Init+0x158>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <MX_LTDC_Init+0x158>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001552:	4833      	ldr	r0, [pc, #204]	; (8001620 <MX_LTDC_Init+0x158>)
 8001554:	f006 fc88 	bl	8007e68 <HAL_LTDC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 800155e:	f000 fb71 	bl	8001c44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001584:	2305      	movs	r3, #5
 8001586:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <MX_LTDC_Init+0x158>)
 80015b0:	f006 fd2a 	bl	8008008 <HAL_LTDC_ConfigLayer>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 80015ba:	f000 fb43 	bl	8001c44 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015e0:	2305      	movs	r3, #5
 80015e2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001602:	463b      	mov	r3, r7
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_LTDC_Init+0x158>)
 800160a:	f006 fcfd 	bl	8008008 <HAL_LTDC_ConfigLayer>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8001614:	f000 fb16 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3768      	adds	r7, #104	; 0x68
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001e8 	.word	0x200001e8
 8001624:	40016800 	.word	0x40016800

08001628 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09a      	sub	sp, #104	; 0x68
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	2230      	movs	r2, #48	; 0x30
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f00a f9b5 	bl	800b9b8 <memset>
  if(ltdcHandle->Instance==LTDC)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a81      	ldr	r2, [pc, #516]	; (8001858 <HAL_LTDC_MspInit+0x230>)
 8001654:	4293      	cmp	r3, r2
 8001656:	f040 80fb 	bne.w	8001850 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800165a:	2308      	movs	r3, #8
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001662:	2304      	movs	r3, #4
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fc11 	bl	8008e98 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800167c:	f000 fae2 	bl	8001c44 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	4b75      	ldr	r3, [pc, #468]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	4a74      	ldr	r2, [pc, #464]	; (800185c <HAL_LTDC_MspInit+0x234>)
 800168a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800168e:	6453      	str	r3, [r2, #68]	; 0x44
 8001690:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	4b6e      	ldr	r3, [pc, #440]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a6d      	ldr	r2, [pc, #436]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a66      	ldr	r2, [pc, #408]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6313      	str	r3, [r2, #48]	; 0x30
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_LTDC_MspInit+0x234>)
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b52      	ldr	r3, [pc, #328]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_LTDC_MspInit+0x234>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_LTDC_MspInit+0x234>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a4a      	ldr	r2, [pc, #296]	; (800185c <HAL_LTDC_MspInit+0x234>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_LTDC_MspInit+0x234>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001748:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001756:	230e      	movs	r3, #14
 8001758:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175e:	4619      	mov	r1, r3
 8001760:	483f      	ldr	r0, [pc, #252]	; (8001860 <HAL_LTDC_MspInit+0x238>)
 8001762:	f003 fe55 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001766:	f641 0358 	movw	r3, #6232	; 0x1858
 800176a:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001778:	230e      	movs	r3, #14
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001780:	4619      	mov	r1, r3
 8001782:	4838      	ldr	r0, [pc, #224]	; (8001864 <HAL_LTDC_MspInit+0x23c>)
 8001784:	f003 fe44 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001788:	2303      	movs	r3, #3
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001798:	2309      	movs	r3, #9
 800179a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a0:	4619      	mov	r1, r3
 80017a2:	4831      	ldr	r0, [pc, #196]	; (8001868 <HAL_LTDC_MspInit+0x240>)
 80017a4:	f003 fe34 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017ac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ba:	230e      	movs	r3, #14
 80017bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c2:	4619      	mov	r1, r3
 80017c4:	4828      	ldr	r0, [pc, #160]	; (8001868 <HAL_LTDC_MspInit+0x240>)
 80017c6:	f003 fe23 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017dc:	230e      	movs	r3, #14
 80017de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e4:	4619      	mov	r1, r3
 80017e6:	4821      	ldr	r0, [pc, #132]	; (800186c <HAL_LTDC_MspInit+0x244>)
 80017e8:	f003 fe12 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017ec:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fe:	230e      	movs	r3, #14
 8001800:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001806:	4619      	mov	r1, r3
 8001808:	4819      	ldr	r0, [pc, #100]	; (8001870 <HAL_LTDC_MspInit+0x248>)
 800180a:	f003 fe01 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800180e:	2348      	movs	r3, #72	; 0x48
 8001810:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800181e:	230e      	movs	r3, #14
 8001820:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001826:	4619      	mov	r1, r3
 8001828:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_LTDC_MspInit+0x24c>)
 800182a:	f003 fdf1 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800182e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001832:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001840:	2309      	movs	r3, #9
 8001842:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001844:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001848:	4619      	mov	r1, r3
 800184a:	4808      	ldr	r0, [pc, #32]	; (800186c <HAL_LTDC_MspInit+0x244>)
 800184c:	f003 fde0 	bl	8005410 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	3768      	adds	r7, #104	; 0x68
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40016800 	.word	0x40016800
 800185c:	40023800 	.word	0x40023800
 8001860:	40021400 	.word	0x40021400
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40021800 	.word	0x40021800
 8001870:	40020800 	.word	0x40020800
 8001874:	40020c00 	.word	0x40020c00

08001878 <Serial_Message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send a message over serial
void Serial_Message(char string[]) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)string, strlen((char*)string), 100);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7fe fcb5 	bl	80001f0 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	b29a      	uxth	r2, r3
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <Serial_Message+0x30>)
 8001890:	f009 f801 	bl	800a896 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", 2, 100);
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	2202      	movs	r2, #2
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <Serial_Message+0x34>)
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <Serial_Message+0x30>)
 800189c:	f008 fffb 	bl	800a896 <HAL_UART_Transmit>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200003d8 	.word	0x200003d8
 80018ac:	0800c2bc 	.word	0x0800c2bc

080018b0 <Print_Int>:

void Print_Int(int x) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	char string[24]; // Lazy assume integer is fewer than 24 digits
	sprintf(string, "%d", x);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	490d      	ldr	r1, [pc, #52]	; (80018f4 <Print_Int+0x44>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00a f881 	bl	800b9c8 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)string, strlen(string), 100);
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fc90 	bl	80001f0 <strlen>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f107 0108 	add.w	r1, r7, #8
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <Print_Int+0x48>)
 80018dc:	f008 ffdb 	bl	800a896 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)"\r\n", 2, 100);
 80018e0:	2364      	movs	r3, #100	; 0x64
 80018e2:	2202      	movs	r2, #2
 80018e4:	4905      	ldr	r1, [pc, #20]	; (80018fc <Print_Int+0x4c>)
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <Print_Int+0x48>)
 80018e8:	f008 ffd5 	bl	800a896 <HAL_UART_Transmit>
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	0800c2c0 	.word	0x0800c2c0
 80018f8:	200003d8 	.word	0x200003d8
 80018fc:	0800c2bc 	.word	0x0800c2bc

08001900 <HAL_GPIO_EXTI_Callback>:

// External-interrupt callback to toggle LD4 when user button is pressed
// Debounces by expecting a 10ms gap (or more) between valid presses
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	uint32_t button0_debounce_time_new = HAL_GetTick();
 800190a:	f002 fd13 	bl	8004334 <HAL_GetTick>
 800190e:	60f8      	str	r0, [r7, #12]
	if ((button0_debounce_time_new-button0_debounce_time_old) >= DEBOUNCE_TIME_MS) {
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_Callback+0x34>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b09      	cmp	r3, #9
 800191a:	d907      	bls.n	800192c <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_GPIO_EXTI_Callback+0x38>)
 8001922:	f004 f846 	bl	80059b2 <HAL_GPIO_TogglePin>
		button0_debounce_time_old = button0_debounce_time_new;
 8001926:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_GPIO_EXTI_Callback+0x34>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6013      	str	r3, [r2, #0]
	}
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000290 	.word	0x20000290
 8001938:	40021800 	.word	0x40021800

0800193c <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;

  do
  {
    BSP_TS_GetState(&State);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fc0a 	bl	8004164 <BSP_TS_GetState>
    HAL_Delay(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f002 fcfb 	bl	800434c <HAL_Delay>
    if (State.TouchDetected == Pressed)
 8001956:	89ba      	ldrh	r2, [r7, #12]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	b29b      	uxth	r3, r3
 800195c:	429a      	cmp	r2, r3
 800195e:	d1f2      	bne.n	8001946 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8001960:	f002 fce8 	bl	8004334 <HAL_GetTick>
 8001964:	4603      	mov	r3, r0
 8001966:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fbf9 	bl	8004164 <BSP_TS_GetState>
        HAL_Delay(10);
 8001972:	200a      	movs	r0, #10
 8001974:	f002 fcea 	bl	800434c <HAL_Delay>
        if (State.TouchDetected != Pressed)
 8001978:	89ba      	ldrh	r2, [r7, #12]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	b29b      	uxth	r3, r3
 800197e:	429a      	cmp	r2, r3
 8001980:	d108      	bne.n	8001994 <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart)
 8001982:	f002 fcd7 	bl	8004334 <HAL_GetTick>
 8001986:	4603      	mov	r3, r0
 8001988:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800198c:	8afb      	ldrh	r3, [r7, #22]
 800198e:	429a      	cmp	r2, r3
 8001990:	d802      	bhi.n	8001998 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 8001992:	e7e9      	b.n	8001968 <WaitForPressedState+0x2c>
          break;
 8001994:	bf00      	nop
    BSP_TS_GetState(&State);
 8001996:	e7d6      	b.n	8001946 <WaitForPressedState+0xa>
        {
          return;
 8001998:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a6:	f002 fc8f 	bl	80042c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019aa:	f000 f8cd 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ae:	f7ff fb97 	bl	80010e0 <MX_GPIO_Init>
  MX_CRC_Init();
 80019b2:	f7fe fdf7 	bl	80005a4 <MX_CRC_Init>
  MX_FMC_Init();
 80019b6:	f7ff faa7 	bl	8000f08 <MX_FMC_Init>
  MX_I2C3_Init();
 80019ba:	f7ff fcb5 	bl	8001328 <MX_I2C3_Init>
  MX_SPI5_Init();
 80019be:	f000 f94f 	bl	8001c60 <MX_SPI5_Init>
  MX_TIM1_Init();
 80019c2:	f000 faf9 	bl	8001fb8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80019c6:	f000 fbdf 	bl	8002188 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80019ca:	f000 fca7 	bl	800231c <MX_USB_OTG_HS_HCD_Init>
  MX_UART5_Init();
 80019ce:	f000 fbb1 	bl	8002134 <MX_UART5_Init>
  MX_TIM7_Init();
 80019d2:	f000 fb41 	bl	8002058 <MX_TIM7_Init>
  MX_DMA2D_Init();
 80019d6:	f7fe fe1b 	bl	8000610 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80019da:	f7ff fd75 	bl	80014c8 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  Serial_Message("Device has turned on.\n");
 80019de:	484d      	ldr	r0, [pc, #308]	; (8001b14 <main+0x174>)
 80019e0:	f7ff ff4a 	bl	8001878 <Serial_Message>

  BSP_LCD_Init();
 80019e4:	f001 fd02 	bl	80033ec <BSP_LCD_Init>
  // Set up Layer 1 for white
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80019e8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80019ec:	2001      	movs	r0, #1
 80019ee:	f001 fd7f 	bl	80034f0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f001 fde0 	bl	80035b8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f001 fe6e 	bl	80036dc <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	2001      	movs	r0, #1
 8001a06:	f001 fe25 	bl	8003654 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f001 fde3 	bl	80035d8 <BSP_LCD_SetLayerVisible>

  // Set up Layer 0
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001a12:	4941      	ldr	r1, [pc, #260]	; (8001b18 <main+0x178>)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f001 fd6b 	bl	80034f0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f001 fdcc 	bl	80035b8 <BSP_LCD_SelectLayer>

  BSP_LCD_DisplayOn();
 8001a20:	f001 ff9e 	bl	8003960 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001a24:	483d      	ldr	r0, [pc, #244]	; (8001b1c <main+0x17c>)
 8001a26:	f001 fe59 	bl	80036dc <BSP_LCD_Clear>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)" Thank you ");
 8001a2a:	493d      	ldr	r1, [pc, #244]	; (8001b20 <main+0x180>)
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f001 ff7f 	bl	8003930 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"  XXXXXX!  ");
 8001a32:	493c      	ldr	r1, [pc, #240]	; (8001b24 <main+0x184>)
 8001a34:	2003      	movs	r0, #3
 8001a36:	f001 ff7b 	bl	8003930 <BSP_LCD_DisplayStringAtLine>

  // Touchscreen initialization
  // If no values for A1, A2, B1, B2 are stored in EEPROM, run the calibration
  // Else, go right into init things
  //Touchscreen_Calibration();
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001a3a:	f001 fd41 	bl	80034c0 <BSP_LCD_GetXSize>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29c      	uxth	r4, r3
 8001a42:	f001 fd49 	bl	80034d8 <BSP_LCD_GetYSize>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f002 fb4f 	bl	80040f0 <BSP_TS_Init>
  Serial_Message("LCD X dimension: ");
 8001a52:	4835      	ldr	r0, [pc, #212]	; (8001b28 <main+0x188>)
 8001a54:	f7ff ff10 	bl	8001878 <Serial_Message>
  Print_Int(BSP_LCD_GetXSize());
 8001a58:	f001 fd32 	bl	80034c0 <BSP_LCD_GetXSize>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff26 	bl	80018b0 <Print_Int>
  Serial_Message("\n\nLCD Y dimension: ");
 8001a64:	4831      	ldr	r0, [pc, #196]	; (8001b2c <main+0x18c>)
 8001a66:	f7ff ff07 	bl	8001878 <Serial_Message>
  Print_Int(BSP_LCD_GetYSize());
 8001a6a:	f001 fd35 	bl	80034d8 <BSP_LCD_GetYSize>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff1d 	bl	80018b0 <Print_Int>



  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8001a76:	f003 fa29 	bl	8004ecc <HAL_FLASH_Unlock>
  HAL_Delay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a7e:	f002 fc65 	bl	800434c <HAL_Delay>
  /* EEPROM Init */
  if( EE_Init() != EE_OK)
 8001a82:	f7fe fe19 	bl	80006b8 <EE_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <main+0xf0>
  {
    Error_Handler();
 8001a8c:	f000 f8da 	bl	8001c44 <Error_Handler>
  }

  uint16_t writeToEEPROM = 49;
 8001a90:	2331      	movs	r3, #49	; 0x31
 8001a92:	80fb      	strh	r3, [r7, #6]

  // Write something to EEPROM
  if((EE_WriteVariable(VirtAddVarTab[0],  writeToEEPROM)) != HAL_OK)
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <main+0x190>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f85b 	bl	8000b58 <EE_WriteVariable>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <main+0x10c>
  {
	Error_Handler();
 8001aa8:	f000 f8cc 	bl	8001c44 <Error_Handler>
  }
  // Read that back
  if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab[0])) != HAL_OK)
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <main+0x190>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	4920      	ldr	r1, [pc, #128]	; (8001b34 <main+0x194>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f806 	bl	8000ac4 <EE_ReadVariable>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <main+0x124>
  {
    Error_Handler();
 8001abe:	f000 f8c1 	bl	8001c44 <Error_Handler>
 8001ac2:	e007      	b.n	8001ad4 <main+0x134>
  } else {
	  Serial_Message("EEPROM read:");
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <main+0x198>)
 8001ac6:	f7ff fed7 	bl	8001878 <Serial_Message>
	  Print_Int(VarDataTab[0]);
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <main+0x194>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff feee 	bl	80018b0 <Print_Int>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	HAL_Delay(700);
	  WaitForPressedState(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff ff31 	bl	800193c <WaitForPressedState>

	  BSP_TS_GetState(&TS_State);
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <main+0x19c>)
 8001adc:	f002 fb42 	bl	8004164 <BSP_TS_GetState>
	  int16_t x = TS_State.X;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <main+0x19c>)
 8001ae2:	885b      	ldrh	r3, [r3, #2]
 8001ae4:	80bb      	strh	r3, [r7, #4]
	  int16_t y = TS_State.Y;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <main+0x19c>)
 8001ae8:	889b      	ldrh	r3, [r3, #4]
 8001aea:	807b      	strh	r3, [r7, #2]
	  Serial_Message("Touch X coordinate: ");
 8001aec:	4814      	ldr	r0, [pc, #80]	; (8001b40 <main+0x1a0>)
 8001aee:	f7ff fec3 	bl	8001878 <Serial_Message>
	  Print_Int(x);
 8001af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff feda 	bl	80018b0 <Print_Int>
	  Serial_Message("\n\nTouch Y coordinate: ");
 8001afc:	4811      	ldr	r0, [pc, #68]	; (8001b44 <main+0x1a4>)
 8001afe:	f7ff febb 	bl	8001878 <Serial_Message>
	  Print_Int(y);
 8001b02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fed2 	bl	80018b0 <Print_Int>

	  /* Wait until touch is released */
	  WaitForPressedState(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff15 	bl	800193c <WaitForPressedState>
  {
 8001b12:	e7df      	b.n	8001ad4 <main+0x134>
 8001b14:	0800c348 	.word	0x0800c348
 8001b18:	d0130000 	.word	0xd0130000
 8001b1c:	ff0000ff 	.word	0xff0000ff
 8001b20:	0800c360 	.word	0x0800c360
 8001b24:	0800c36c 	.word	0x0800c36c
 8001b28:	0800c378 	.word	0x0800c378
 8001b2c:	0800c38c 	.word	0x0800c38c
 8001b30:	20000000 	.word	0x20000000
 8001b34:	2000029c 	.word	0x2000029c
 8001b38:	0800c3a0 	.word	0x0800c3a0
 8001b3c:	20000294 	.word	0x20000294
 8001b40:	0800c3b0 	.word	0x0800c3b0
 8001b44:	0800c3c8 	.word	0x0800c3c8

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	; 0x50
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f009 ff2e 	bl	800b9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <SystemClock_Config+0xd0>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f006 fc96 	bl	8008504 <HAL_RCC_OscConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bde:	f000 f831 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be2:	230f      	movs	r3, #15
 8001be4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f006 fef8 	bl	80089f4 <HAL_RCC_ClockConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c0a:	f000 f81b 	bl	8001c44 <Error_Handler>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3750      	adds	r7, #80	; 0x50
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c32:	f002 fb6b 	bl	800430c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40001000 	.word	0x40001000

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Serial_Message("ERROR");
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <Error_Handler+0x18>)
 8001c4a:	f7ff fe15 	bl	8001878 <Serial_Message>
  //__disable_irq();
  while (1)
  {
	    /* Toggle LED3 fast */
	    BSP_LED_Toggle(LED3);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f001 f83e 	bl	8002cd0 <BSP_LED_Toggle>
	    HAL_Delay(40);
 8001c54:	2028      	movs	r0, #40	; 0x28
 8001c56:	f002 fb79 	bl	800434c <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8001c5a:	e7f8      	b.n	8001c4e <Error_Handler+0xa>
 8001c5c:	0800c2c4 	.word	0x0800c2c4

08001c60 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_SPI5_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c94:	2218      	movs	r2, #24
 8001c96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_SPI5_Init+0x64>)
 8001cb2:	f007 fb42 	bl	800933a <HAL_SPI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f7ff ffc2 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200002a4 	.word	0x200002a4
 8001cc8:	40015000 	.word	0x40015000

08001ccc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_SPI_MspInit+0x84>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12c      	bne.n	8001d48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_SPI_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001d26:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_SPI_MspInit+0x8c>)
 8001d44:	f003 fb64 	bl	8005410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40015000 	.word	0x40015000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40021400 	.word	0x40021400

08001d5c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_SPI_MspDeInit+0x30>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10a      	bne.n	8001d84 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_SPI_MspDeInit+0x34>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_SPI_MspDeInit+0x34>)
 8001d74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d7a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_SPI_MspDeInit+0x38>)
 8001d80:	f003 fcf2 	bl	8005768 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40015000 	.word	0x40015000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021400 	.word	0x40021400

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_MspInit+0x4c>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_MspInit+0x4c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2036      	movs	r0, #54	; 0x36
 8001dfe:	f002 fb81 	bl	8004504 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e02:	2036      	movs	r0, #54	; 0x36
 8001e04:	f002 fb9a 	bl	800453c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_InitTick+0xa4>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_InitTick+0xa4>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_InitTick+0xa4>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e24:	f107 0210 	add.w	r2, r7, #16
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f007 f800 	bl	8008e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e34:	f006 ffd6 	bl	8008de4 <HAL_RCC_GetPCLK1Freq>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_InitTick+0xa8>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_InitTick+0xac>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_InitTick+0xac>)
 8001e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_InitTick+0xac>)
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_InitTick+0xac>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_InitTick+0xac>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_InitTick+0xac>)
 8001e6e:	f008 f843 	bl	8009ef8 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <HAL_InitTick+0xac>)
 8001e7a:	f008 f88d 	bl	8009f98 <HAL_TIM_Base_Start_IT>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	200002fc 	.word	0x200002fc
 8001e98:	40001000 	.word	0x40001000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f003 fd76 	bl	80059e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM6_DAC_IRQHandler+0x10>)
 8001f06:	f008 f8b7 	bl	800a078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002fc 	.word	0x200002fc

08001f14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <OTG_HS_IRQHandler+0x10>)
 8001f1a:	f003 fddf 	bl	8005adc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000460 	.word	0x20000460

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f009 fd04 	bl	800b964 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20030000 	.word	0x20030000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	20000344 	.word	0x20000344
 8001f90:	20000a58 	.word	0x20000a58

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_TIM1_Init+0x98>)
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <MX_TIM1_Init+0x9c>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_TIM1_Init+0x98>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <MX_TIM1_Init+0x98>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_TIM1_Init+0x98>)
 8001fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_TIM1_Init+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_TIM1_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_TIM1_Init+0x98>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002000:	4813      	ldr	r0, [pc, #76]	; (8002050 <MX_TIM1_Init+0x98>)
 8002002:	f007 ff79 	bl	8009ef8 <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800200c:	f7ff fe1a 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM1_Init+0x98>)
 800201e:	f008 f933 	bl	800a288 <HAL_TIM_ConfigClockSource>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002028:	f7ff fe0c 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002034:	463b      	mov	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM1_Init+0x98>)
 800203a:	f008 fb4f 	bl	800a6dc <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002044:	f7ff fdfe 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000348 	.word	0x20000348
 8002054:	40010000 	.word	0x40010000

08002058 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_TIM7_Init+0x64>)
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <MX_TIM7_Init+0x68>)
 800206a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <MX_TIM7_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_TIM7_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_TIM7_Init+0x64>)
 800207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_TIM7_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_TIM7_Init+0x64>)
 8002088:	f007 ff36 	bl	8009ef8 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002092:	f7ff fdd7 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_TIM7_Init+0x64>)
 80020a4:	f008 fb1a 	bl	800a6dc <HAL_TIMEx_MasterConfigSynchronization>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80020ae:	f7ff fdc9 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000390 	.word	0x20000390
 80020c0:	40001400 	.word	0x40001400

080020c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_TIM_Base_MspInit+0x64>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80020f2:	e012      	b.n	800211a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_TIM_Base_MspInit+0x6c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10d      	bne.n	800211a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40023800 	.word	0x40023800
 8002130:	40001400 	.word	0x40001400

08002134 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_UART5_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_UART5_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_UART5_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_UART5_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_UART5_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_UART5_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_UART5_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_UART5_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_UART5_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_UART5_Init+0x4c>)
 800216c:	f008 fb46 	bl	800a7fc <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002176:	f7ff fd65 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200003d8 	.word	0x200003d8
 8002184:	40005000 	.word	0x40005000

08002188 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_USART1_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f008 fb1c 	bl	800a7fc <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f7ff fd3b 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000041c 	.word	0x2000041c
 80021d8:	40011000 	.word	0x40011000

080021dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_UART_MspInit+0x128>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d14b      	bne.n	8002296 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a39      	ldr	r2, [pc, #228]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_UART_MspInit+0x12c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_UART_MspInit+0x12c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_UART_MspInit+0x12c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002264:	2308      	movs	r3, #8
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4827      	ldr	r0, [pc, #156]	; (800230c <HAL_UART_MspInit+0x130>)
 8002270:	f003 f8ce 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002274:	2304      	movs	r3, #4
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002284:	2308      	movs	r3, #8
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	4820      	ldr	r0, [pc, #128]	; (8002310 <HAL_UART_MspInit+0x134>)
 8002290:	f003 f8be 	bl	8005410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002294:	e031      	b.n	80022fa <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_UART_MspInit+0x138>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d12c      	bne.n	80022fa <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6453      	str	r3, [r2, #68]	; 0x44
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_UART_MspInit+0x12c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ea:	2307      	movs	r3, #7
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	4619      	mov	r1, r3
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <HAL_UART_MspInit+0x13c>)
 80022f6:	f003 f88b 	bl	8005410 <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	3730      	adds	r7, #48	; 0x30
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40005000 	.word	0x40005000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40011000 	.word	0x40011000
 8002318:	40020000 	.word	0x40020000

0800231c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8002324:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002328:	220c      	movs	r2, #12
 800232a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800232e:	2201      	movs	r2, #1
 8002330:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800233a:	2202      	movs	r2, #2
 800233c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002358:	f003 fb5e 	bl	8005a18 <HAL_HCD_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8002362:	f7ff fc6f 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000460 	.word	0x20000460
 8002370:	40040000 	.word	0x40040000

08002374 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_HCD_MspInit+0xb0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d141      	bne.n	800241a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80023b2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80023c4:	230c      	movs	r3, #12
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4817      	ldr	r0, [pc, #92]	; (800242c <HAL_HCD_MspInit+0xb8>)
 80023d0:	f003 f81e 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80023d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4810      	ldr	r0, [pc, #64]	; (800242c <HAL_HCD_MspInit+0xb8>)
 80023ea:	f003 f811 	bl	8005410 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 80023f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_HCD_MspInit+0xb4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	204d      	movs	r0, #77	; 0x4d
 8002410:	f002 f878 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002414:	204d      	movs	r0, #77	; 0x4d
 8002416:	f002 f891 	bl	800453c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40040000 	.word	0x40040000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800244c:	4c0b      	ldr	r4, [pc, #44]	; (800247c <LoopFillZerobss+0x26>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245a:	f7ff fd9b 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f009 fa87 	bl	800b970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7ff fa9d 	bl	80019a0 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002468:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8002474:	0800df00 	.word	0x0800df00
  ldr r2, =_sbss
 8002478:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 800247c:	20000a54 	.word	0x20000a54

08002480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>

08002482 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002486:	f000 fe63 	bl	8003150 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800248a:	20ca      	movs	r0, #202	; 0xca
 800248c:	f000 f95d 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002490:	20c3      	movs	r0, #195	; 0xc3
 8002492:	f000 f967 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002496:	2008      	movs	r0, #8
 8002498:	f000 f964 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800249c:	2050      	movs	r0, #80	; 0x50
 800249e:	f000 f961 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80024a2:	20cf      	movs	r0, #207	; 0xcf
 80024a4:	f000 f951 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f000 f95b 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80024ae:	20c1      	movs	r0, #193	; 0xc1
 80024b0:	f000 f958 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80024b4:	2030      	movs	r0, #48	; 0x30
 80024b6:	f000 f955 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80024ba:	20ed      	movs	r0, #237	; 0xed
 80024bc:	f000 f945 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	f000 f94f 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 f94c 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80024cc:	2012      	movs	r0, #18
 80024ce:	f000 f949 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80024d2:	2081      	movs	r0, #129	; 0x81
 80024d4:	f000 f946 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80024d8:	20e8      	movs	r0, #232	; 0xe8
 80024da:	f000 f936 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80024de:	2085      	movs	r0, #133	; 0x85
 80024e0:	f000 f940 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f000 f93d 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80024ea:	2078      	movs	r0, #120	; 0x78
 80024ec:	f000 f93a 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80024f0:	20cb      	movs	r0, #203	; 0xcb
 80024f2:	f000 f92a 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80024f6:	2039      	movs	r0, #57	; 0x39
 80024f8:	f000 f934 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80024fc:	202c      	movs	r0, #44	; 0x2c
 80024fe:	f000 f931 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f000 f92e 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002508:	2034      	movs	r0, #52	; 0x34
 800250a:	f000 f92b 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800250e:	2002      	movs	r0, #2
 8002510:	f000 f928 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002514:	20f7      	movs	r0, #247	; 0xf7
 8002516:	f000 f918 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800251a:	2020      	movs	r0, #32
 800251c:	f000 f922 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002520:	20ea      	movs	r0, #234	; 0xea
 8002522:	f000 f912 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f000 f91c 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f000 f919 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002532:	20b1      	movs	r0, #177	; 0xb1
 8002534:	f000 f909 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f000 f913 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800253e:	201b      	movs	r0, #27
 8002540:	f000 f910 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002544:	20b6      	movs	r0, #182	; 0xb6
 8002546:	f000 f900 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800254a:	200a      	movs	r0, #10
 800254c:	f000 f90a 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002550:	20a2      	movs	r0, #162	; 0xa2
 8002552:	f000 f907 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002556:	20c0      	movs	r0, #192	; 0xc0
 8002558:	f000 f8f7 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800255c:	2010      	movs	r0, #16
 800255e:	f000 f901 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002562:	20c1      	movs	r0, #193	; 0xc1
 8002564:	f000 f8f1 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002568:	2010      	movs	r0, #16
 800256a:	f000 f8fb 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800256e:	20c5      	movs	r0, #197	; 0xc5
 8002570:	f000 f8eb 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002574:	2045      	movs	r0, #69	; 0x45
 8002576:	f000 f8f5 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800257a:	2015      	movs	r0, #21
 800257c:	f000 f8f2 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002580:	20c7      	movs	r0, #199	; 0xc7
 8002582:	f000 f8e2 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002586:	2090      	movs	r0, #144	; 0x90
 8002588:	f000 f8ec 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800258c:	2036      	movs	r0, #54	; 0x36
 800258e:	f000 f8dc 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002592:	20c8      	movs	r0, #200	; 0xc8
 8002594:	f000 f8e6 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002598:	20f2      	movs	r0, #242	; 0xf2
 800259a:	f000 f8d6 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f8e0 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80025a4:	20b0      	movs	r0, #176	; 0xb0
 80025a6:	f000 f8d0 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80025aa:	20c2      	movs	r0, #194	; 0xc2
 80025ac:	f000 f8da 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025b0:	20b6      	movs	r0, #182	; 0xb6
 80025b2:	f000 f8ca 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025b6:	200a      	movs	r0, #10
 80025b8:	f000 f8d4 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80025bc:	20a7      	movs	r0, #167	; 0xa7
 80025be:	f000 f8d1 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80025c2:	2027      	movs	r0, #39	; 0x27
 80025c4:	f000 f8ce 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f000 f8cb 	bl	8002764 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80025ce:	202a      	movs	r0, #42	; 0x2a
 80025d0:	f000 f8bb 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 f8c5 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f000 f8c2 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 f8bf 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80025e6:	20ef      	movs	r0, #239	; 0xef
 80025e8:	f000 f8bc 	bl	8002764 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80025ec:	202b      	movs	r0, #43	; 0x2b
 80025ee:	f000 f8ac 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 f8b6 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f000 f8b3 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 f8b0 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002604:	203f      	movs	r0, #63	; 0x3f
 8002606:	f000 f8ad 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800260a:	20f6      	movs	r0, #246	; 0xf6
 800260c:	f000 f89d 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002610:	2001      	movs	r0, #1
 8002612:	f000 f8a7 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f000 f8a4 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800261c:	2006      	movs	r0, #6
 800261e:	f000 f8a1 	bl	8002764 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002622:	202c      	movs	r0, #44	; 0x2c
 8002624:	f000 f891 	bl	800274a <ili9341_WriteReg>
  LCD_Delay(200);
 8002628:	20c8      	movs	r0, #200	; 0xc8
 800262a:	f000 fe7f 	bl	800332c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800262e:	2026      	movs	r0, #38	; 0x26
 8002630:	f000 f88b 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002634:	2001      	movs	r0, #1
 8002636:	f000 f895 	bl	8002764 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800263a:	20e0      	movs	r0, #224	; 0xe0
 800263c:	f000 f885 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002640:	200f      	movs	r0, #15
 8002642:	f000 f88f 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002646:	2029      	movs	r0, #41	; 0x29
 8002648:	f000 f88c 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800264c:	2024      	movs	r0, #36	; 0x24
 800264e:	f000 f889 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002652:	200c      	movs	r0, #12
 8002654:	f000 f886 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002658:	200e      	movs	r0, #14
 800265a:	f000 f883 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800265e:	2009      	movs	r0, #9
 8002660:	f000 f880 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002664:	204e      	movs	r0, #78	; 0x4e
 8002666:	f000 f87d 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800266a:	2078      	movs	r0, #120	; 0x78
 800266c:	f000 f87a 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002670:	203c      	movs	r0, #60	; 0x3c
 8002672:	f000 f877 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002676:	2009      	movs	r0, #9
 8002678:	f000 f874 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800267c:	2013      	movs	r0, #19
 800267e:	f000 f871 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002682:	2005      	movs	r0, #5
 8002684:	f000 f86e 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002688:	2017      	movs	r0, #23
 800268a:	f000 f86b 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800268e:	2011      	movs	r0, #17
 8002690:	f000 f868 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f000 f865 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800269a:	20e1      	movs	r0, #225	; 0xe1
 800269c:	f000 f855 	bl	800274a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f85f 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80026a6:	2016      	movs	r0, #22
 80026a8:	f000 f85c 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80026ac:	201b      	movs	r0, #27
 80026ae:	f000 f859 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026b2:	2004      	movs	r0, #4
 80026b4:	f000 f856 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026b8:	2011      	movs	r0, #17
 80026ba:	f000 f853 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80026be:	2007      	movs	r0, #7
 80026c0:	f000 f850 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80026c4:	2031      	movs	r0, #49	; 0x31
 80026c6:	f000 f84d 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80026ca:	2033      	movs	r0, #51	; 0x33
 80026cc:	f000 f84a 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80026d0:	2042      	movs	r0, #66	; 0x42
 80026d2:	f000 f847 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026d6:	2005      	movs	r0, #5
 80026d8:	f000 f844 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026dc:	200c      	movs	r0, #12
 80026de:	f000 f841 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80026e2:	200a      	movs	r0, #10
 80026e4:	f000 f83e 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80026e8:	2028      	movs	r0, #40	; 0x28
 80026ea:	f000 f83b 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80026ee:	202f      	movs	r0, #47	; 0x2f
 80026f0:	f000 f838 	bl	8002764 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80026f4:	200f      	movs	r0, #15
 80026f6:	f000 f835 	bl	8002764 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80026fa:	2011      	movs	r0, #17
 80026fc:	f000 f825 	bl	800274a <ili9341_WriteReg>
  LCD_Delay(200);
 8002700:	20c8      	movs	r0, #200	; 0xc8
 8002702:	f000 fe13 	bl	800332c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002706:	2029      	movs	r0, #41	; 0x29
 8002708:	f000 f81f 	bl	800274a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800270c:	202c      	movs	r0, #44	; 0x2c
 800270e:	f000 f81c 	bl	800274a <ili9341_WriteReg>
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}

08002716 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800271a:	f000 fd19 	bl	8003150 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800271e:	2103      	movs	r1, #3
 8002720:	20d3      	movs	r0, #211	; 0xd3
 8002722:	f000 f82c 	bl	800277e <ili9341_ReadData>
 8002726:	4603      	mov	r3, r0
 8002728:	b29b      	uxth	r3, r3
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}

0800272e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002732:	2029      	movs	r0, #41	; 0x29
 8002734:	f000 f809 	bl	800274a <ili9341_WriteReg>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002740:	2028      	movs	r0, #40	; 0x28
 8002742:	f000 f802 	bl	800274a <ili9341_WriteReg>
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}

0800274a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fd94 	bl	8003284 <LCD_IO_WriteReg>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fd65 	bl	8003240 <LCD_IO_WriteData>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	460a      	mov	r2, r1
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800278e:	797a      	ldrb	r2, [r7, #5]
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fd97 	bl	80032c8 <LCD_IO_ReadData>
 800279a:	4603      	mov	r3, r0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80027a8:	23f0      	movs	r3, #240	; 0xf0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80027b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fa59 	bl	8002c8c <stmpe811_GetInstance>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2bff      	cmp	r3, #255	; 0xff
 80027e2:	d112      	bne.n	800280a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f000 fa51 	bl	8002c8c <stmpe811_GetInstance>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80027ee:	7bbb      	ldrb	r3, [r7, #14]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d80a      	bhi.n	800280a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	b2d1      	uxtb	r1, r2
 80027fa:	4a06      	ldr	r2, [pc, #24]	; (8002814 <stmpe811_Init+0x4c>)
 80027fc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80027fe:	f000 fda0 	bl	8003342 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f807 	bl	8002818 <stmpe811_Reset>
    }
  }
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000764 	.word	0x20000764

08002818 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2202      	movs	r2, #2
 8002828:	2103      	movs	r1, #3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd95 	bl	800335a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002830:	200a      	movs	r0, #10
 8002832:	f000 fdcf 	bl	80033d4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2200      	movs	r2, #0
 800283c:	2103      	movs	r1, #3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd8b 	bl	800335a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002844:	2002      	movs	r0, #2
 8002846:	f000 fdc5 	bl	80033d4 <IOE_Delay>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800285c:	f000 fd71 	bl	8003342 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd8a 	bl	8003380 <IOE_Read>
 800286c:	4603      	mov	r3, r0
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd81 	bl	8003380 <IOE_Read>
 800287e:	4603      	mov	r3, r0
 8002880:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002882:	4323      	orrs	r3, r4
 8002884:	b21b      	sxth	r3, r3
 8002886:	b29b      	uxth	r3, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}

08002890 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2109      	movs	r1, #9
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fd6b 	bl	8003380 <IOE_Read>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	2109      	movs	r1, #9
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fd4b 	bl	800335a <IOE_Write>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2109      	movs	r1, #9
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fd4d 	bl	8003380 <IOE_Read>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	2109      	movs	r1, #9
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd2d 	bl	800335a <IOE_Write>
    
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	460a      	mov	r2, r1
 8002912:	80fb      	strh	r3, [r7, #6]
 8002914:	4613      	mov	r3, r2
 8002916:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	210a      	movs	r1, #10
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd2c 	bl	8003380 <IOE_Read>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	797b      	ldrb	r3, [r7, #5]
 8002930:	4313      	orrs	r3, r2
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	210a      	movs	r1, #10
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fd0c 	bl	800335a <IOE_Write>
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	460a      	mov	r2, r1
 8002954:	80fb      	strh	r3, [r7, #6]
 8002956:	4613      	mov	r3, r2
 8002958:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	210a      	movs	r1, #10
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fd0b 	bl	8003380 <IOE_Read>
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800296e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002972:	43db      	mvns	r3, r3
 8002974:	b25a      	sxtb	r2, r3
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4013      	ands	r3, r2
 800297c:	b25b      	sxtb	r3, r3
 800297e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	210a      	movs	r1, #10
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fce6 	bl	800335a <IOE_Write>
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	460a      	mov	r2, r1
 80029a0:	80fb      	strh	r3, [r7, #6]
 80029a2:	4613      	mov	r3, r2
 80029a4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	210b      	movs	r1, #11
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fce7 	bl	8003380 <IOE_Read>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	797b      	ldrb	r3, [r7, #5]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	80fb      	strh	r3, [r7, #6]
 80029d0:	4613      	mov	r3, r2
 80029d2:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	797a      	ldrb	r2, [r7, #5]
 80029da:	210b      	movs	r1, #11
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fcbc 	bl	800335a <IOE_Write>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2117      	movs	r1, #23
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fcbd 	bl	8003380 <IOE_Read>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	b25a      	sxtb	r2, r3
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	2117      	movs	r1, #23
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fc98 	bl	800335a <IOE_Write>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2104      	movs	r1, #4
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fc9c 	bl	8003380 <IOE_Read>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fc7c 	bl	800335a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	21f0      	movs	r1, #240	; 0xf0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffbf 	bl	80029ea <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fc6c 	bl	800335a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2249      	movs	r2, #73	; 0x49
 8002a88:	2120      	movs	r1, #32
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fc65 	bl	800335a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002a90:	2002      	movs	r0, #2
 8002a92:	f000 fc9f 	bl	80033d4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2121      	movs	r1, #33	; 0x21
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fc5b 	bl	800335a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	229a      	movs	r2, #154	; 0x9a
 8002aaa:	2141      	movs	r1, #65	; 0x41
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fc54 	bl	800335a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	214a      	movs	r1, #74	; 0x4a
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fc4d 	bl	800335a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	214b      	movs	r1, #75	; 0x4b
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fc46 	bl	800335a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	214b      	movs	r1, #75	; 0x4b
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fc3f 	bl	800335a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2156      	movs	r1, #86	; 0x56
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fc38 	bl	800335a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	2158      	movs	r1, #88	; 0x58
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fc31 	bl	800335a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2201      	movs	r2, #1
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fc2a 	bl	800335a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	210b      	movs	r1, #11
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fc23 	bl	800335a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b14:	2002      	movs	r0, #2
 8002b16:	f000 fc5d 	bl	80033d4 <IOE_Delay>
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc22 	bl	8003380 <IOE_Read>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	214c      	movs	r1, #76	; 0x4c
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fc10 	bl	8003380 <IOE_Read>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e00d      	b.n	8002b88 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2201      	movs	r2, #1
 8002b72:	214b      	movs	r1, #75	; 0x4b
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fbf0 	bl	800335a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2200      	movs	r2, #0
 8002b80:	214b      	movs	r1, #75	; 0x4b
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fbe9 	bl	800335a <IOE_Write>
  }
  
  return ret;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	f107 0210 	add.w	r2, r7, #16
 8002ba8:	2304      	movs	r3, #4
 8002baa:	21d7      	movs	r1, #215	; 0xd7
 8002bac:	f000 fbfb 	bl	80033a6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002bb0:	7c3b      	ldrb	r3, [r7, #16]
 8002bb2:	061a      	lsls	r2, r3, #24
 8002bb4:	7c7b      	ldrb	r3, [r7, #17]
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	7cbb      	ldrb	r3, [r7, #18]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	7cfa      	ldrb	r2, [r7, #19]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	0d1b      	lsrs	r3, r3, #20
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	214b      	movs	r1, #75	; 0x4b
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fbb6 	bl	800335a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	214b      	movs	r1, #75	; 0x4b
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fbaf 	bl	800335a <IOE_Write>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002c0e:	f000 fb9e 	bl	800334e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	211f      	movs	r1, #31
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fe76 	bl	8002908 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fe36 	bl	8002890 <stmpe811_EnableGlobalIT>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe47 	bl	80028cc <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	211f      	movs	r1, #31
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fe81 	bl	800294a <stmpe811_DisableITSource>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	211f      	movs	r1, #31
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe99 	bl	8002996 <stmpe811_ReadGITStatus>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	211f      	movs	r1, #31
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fea1 	bl	80029c4 <stmpe811_ClearGlobalIT>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e00b      	b.n	8002cb8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <stmpe811_GetInstance+0x40>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d101      	bne.n	8002cb2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	e006      	b.n	8002cc0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d9f0      	bls.n	8002ca0 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002cbe:	23ff      	movs	r3, #255	; 0xff
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	20000764 	.word	0x20000764

08002cd0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <BSP_LED_Toggle+0x2c>)
 8002cde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4906      	ldr	r1, [pc, #24]	; (8002d00 <BSP_LED_Toggle+0x30>)
 8002ce6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f002 fe60 	bl	80059b2 <HAL_GPIO_TogglePin>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000006c 	.word	0x2000006c
 8002d00:	0800c3f8 	.word	0x0800c3f8

08002d04 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <I2Cx_MspInit+0xdc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d15f      	bne.n	8002dd6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a31      	ldr	r2, [pc, #196]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002d54:	2312      	movs	r3, #18
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d60:	2304      	movs	r3, #4
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	481f      	ldr	r0, [pc, #124]	; (8002de8 <I2Cx_MspInit+0xe4>)
 8002d6c:	f002 fb50 	bl	8005410 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d74:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481b      	ldr	r0, [pc, #108]	; (8002dec <I2Cx_MspInit+0xe8>)
 8002d7e:	f002 fb47 	bl	8005410 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <I2Cx_MspInit+0xe0>)
 8002db0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002db4:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	210f      	movs	r1, #15
 8002dba:	2048      	movs	r0, #72	; 0x48
 8002dbc:	f001 fba2 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002dc0:	2048      	movs	r0, #72	; 0x48
 8002dc2:	f001 fbbb 	bl	800453c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	210f      	movs	r1, #15
 8002dca:	2049      	movs	r0, #73	; 0x49
 8002dcc:	f001 fb9a 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002dd0:	2049      	movs	r0, #73	; 0x49
 8002dd2:	f001 fbb3 	bl	800453c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40005c00 	.word	0x40005c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020800 	.word	0x40020800

08002df0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002df4:	4814      	ldr	r0, [pc, #80]	; (8002e48 <I2Cx_Init+0x58>)
 8002df6:	f004 fc53 	bl	80076a0 <HAL_I2C_GetState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d121      	bne.n	8002e44 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <I2Cx_Init+0x58>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <I2Cx_Init+0x5c>)
 8002e04:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <I2Cx_Init+0x58>)
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <I2Cx_Init+0x60>)
 8002e0a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <I2Cx_Init+0x58>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <I2Cx_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <I2Cx_Init+0x58>)
 8002e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <I2Cx_Init+0x58>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <I2Cx_Init+0x58>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <I2Cx_Init+0x58>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <I2Cx_Init+0x58>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002e38:	4803      	ldr	r0, [pc, #12]	; (8002e48 <I2Cx_Init+0x58>)
 8002e3a:	f7ff ff63 	bl	8002d04 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002e3e:	4802      	ldr	r0, [pc, #8]	; (8002e48 <I2Cx_Init+0x58>)
 8002e40:	f003 ff9a 	bl	8006d78 <HAL_I2C_Init>
  }
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000768 	.word	0x20000768
 8002e4c:	40005c00 	.word	0x40005c00
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <I2Cx_ITConfig+0x58>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <I2Cx_ITConfig+0x58>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <I2Cx_ITConfig+0x58>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002e84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e88:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <I2Cx_ITConfig+0x5c>)
 8002e90:	f002 fabe 	bl	8005410 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002e94:	2200      	movs	r2, #0
 8002e96:	210f      	movs	r1, #15
 8002e98:	2028      	movs	r0, #40	; 0x28
 8002e9a:	f001 fb33 	bl	8004504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002e9e:	2028      	movs	r0, #40	; 0x28
 8002ea0:	f001 fb4c 	bl	800453c <HAL_NVIC_EnableIRQ>
}
 8002ea4:	bf00      	nop
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af04      	add	r7, sp, #16
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	71bb      	strb	r3, [r7, #6]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	79bb      	ldrb	r3, [r7, #6]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <I2Cx_WriteData+0x4c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	1d7b      	adds	r3, r7, #5
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4808      	ldr	r0, [pc, #32]	; (8002f04 <I2Cx_WriteData+0x50>)
 8002ee4:	f004 f8bc 	bl	8007060 <HAL_I2C_Mem_Write>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002ef2:	f000 f863 	bl	8002fbc <I2Cx_Error>
  }        
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000074 	.word	0x20000074
 8002f04:	20000768 	.word	0x20000768

08002f08 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460a      	mov	r2, r1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	b299      	uxth	r1, r3
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <I2Cx_ReadData+0x50>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	f107 030e 	add.w	r3, r7, #14
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2301      	movs	r3, #1
 8002f3a:	4808      	ldr	r0, [pc, #32]	; (8002f5c <I2Cx_ReadData+0x54>)
 8002f3c:	f004 f98a 	bl	8007254 <HAL_I2C_Mem_Read>
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f4a:	f000 f837 	bl	8002fbc <I2Cx_Error>
  
  }
  return value;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000074 	.word	0x20000074
 8002f5c:	20000768 	.word	0x20000768

08002f60 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af04      	add	r7, sp, #16
 8002f66:	603a      	str	r2, [r7, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	71bb      	strb	r3, [r7, #6]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	79bb      	ldrb	r3, [r7, #6]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <I2Cx_ReadBuffer+0x54>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	9302      	str	r3, [sp, #8]
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2301      	movs	r3, #1
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <I2Cx_ReadBuffer+0x58>)
 8002f94:	f004 f95e 	bl	8007254 <HAL_I2C_Mem_Read>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002fa6:	f000 f809 	bl	8002fbc <I2Cx_Error>

    return 1;
 8002faa:	2301      	movs	r3, #1
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000074 	.word	0x20000074
 8002fb8:	20000768 	.word	0x20000768

08002fbc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <I2Cx_Error+0x14>)
 8002fc2:	f004 f81d 	bl	8007000 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002fc6:	f7ff ff13 	bl	8002df0 <I2Cx_Init>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000768 	.word	0x20000768

08002fd4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002fd8:	4819      	ldr	r0, [pc, #100]	; (8003040 <SPIx_Init+0x6c>)
 8002fda:	f006 fe4e 	bl	8009c7a <HAL_SPI_GetState>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12b      	bne.n	800303c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <SPIx_Init+0x6c>)
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <SPIx_Init+0x70>)
 8002fe8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <SPIx_Init+0x6c>)
 8002fec:	2218      	movs	r2, #24
 8002fee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <SPIx_Init+0x6c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <SPIx_Init+0x6c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <SPIx_Init+0x6c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <SPIx_Init+0x6c>)
 8003004:	2200      	movs	r2, #0
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <SPIx_Init+0x6c>)
 800300a:	2207      	movs	r2, #7
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <SPIx_Init+0x6c>)
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <SPIx_Init+0x6c>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <SPIx_Init+0x6c>)
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <SPIx_Init+0x6c>)
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SPIx_Init+0x6c>)
 800302a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800302e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <SPIx_Init+0x6c>)
 8003032:	f000 f853 	bl	80030dc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003036:	4802      	ldr	r0, [pc, #8]	; (8003040 <SPIx_Init+0x6c>)
 8003038:	f006 f97f 	bl	800933a <HAL_SPI_Init>
  } 
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200007bc 	.word	0x200007bc
 8003044:	40015000 	.word	0x40015000

08003048 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <SPIx_Read+0x38>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f107 0108 	add.w	r1, r7, #8
 8003062:	4808      	ldr	r0, [pc, #32]	; (8003084 <SPIx_Read+0x3c>)
 8003064:	f006 fb56 	bl	8009714 <HAL_SPI_Receive>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003072:	f000 f827 	bl	80030c4 <SPIx_Error>
  }
  
  return readvalue;
 8003076:	68bb      	ldr	r3, [r7, #8]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000078 	.word	0x20000078
 8003084:	200007bc 	.word	0x200007bc

08003088 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <SPIx_Write+0x34>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1db9      	adds	r1, r7, #6
 800309c:	2201      	movs	r2, #1
 800309e:	4808      	ldr	r0, [pc, #32]	; (80030c0 <SPIx_Write+0x38>)
 80030a0:	f006 f9fc 	bl	800949c <HAL_SPI_Transmit>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80030ae:	f000 f809 	bl	80030c4 <SPIx_Error>
  }
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000078 	.word	0x20000078
 80030c0:	200007bc 	.word	0x200007bc

080030c4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <SPIx_Error+0x14>)
 80030ca:	f006 f9bf 	bl	800944c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80030ce:	f7ff ff81 	bl	8002fd4 <SPIx_Init>
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200007bc 	.word	0x200007bc

080030dc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <SPIx_MspInit+0x6c>)
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <SPIx_MspInit+0x6c>)
 80030ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f2:	6453      	str	r3, [r2, #68]	; 0x44
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <SPIx_MspInit+0x6c>)
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <SPIx_MspInit+0x6c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <SPIx_MspInit+0x6c>)
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6313      	str	r3, [r2, #48]	; 0x30
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <SPIx_MspInit+0x6c>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800311c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003120:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003126:	2302      	movs	r3, #2
 8003128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800312a:	2301      	movs	r3, #1
 800312c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800312e:	2305      	movs	r3, #5
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <SPIx_MspInit+0x70>)
 800313a:	f002 f969 	bl	8005410 <HAL_GPIO_Init>
}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40021400 	.word	0x40021400

08003150 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <LCD_IO_Init+0xe0>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d164      	bne.n	8003228 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <LCD_IO_Init+0xe0>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	4b32      	ldr	r3, [pc, #200]	; (8003234 <LCD_IO_Init+0xe4>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a31      	ldr	r2, [pc, #196]	; (8003234 <LCD_IO_Init+0xe4>)
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <LCD_IO_Init+0xe4>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003186:	2301      	movs	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4827      	ldr	r0, [pc, #156]	; (8003238 <LCD_IO_Init+0xe8>)
 800319a:	f002 f939 	bl	8005410 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <LCD_IO_Init+0xe4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a23      	ldr	r2, [pc, #140]	; (8003234 <LCD_IO_Init+0xe4>)
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <LCD_IO_Init+0xe4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80031ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80031c8:	2302      	movs	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	4619      	mov	r1, r3
 80031d2:	4819      	ldr	r0, [pc, #100]	; (8003238 <LCD_IO_Init+0xe8>)
 80031d4:	f002 f91c 	bl	8005410 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4b15      	ldr	r3, [pc, #84]	; (8003234 <LCD_IO_Init+0xe4>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <LCD_IO_Init+0xe4>)
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	6313      	str	r3, [r2, #48]	; 0x30
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <LCD_IO_Init+0xe4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80031f4:	2304      	movs	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003200:	2302      	movs	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4619      	mov	r1, r3
 800320a:	480c      	ldr	r0, [pc, #48]	; (800323c <LCD_IO_Init+0xec>)
 800320c:	f002 f900 	bl	8005410 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003210:	2200      	movs	r2, #0
 8003212:	2104      	movs	r1, #4
 8003214:	4809      	ldr	r0, [pc, #36]	; (800323c <LCD_IO_Init+0xec>)
 8003216:	f002 fbb3 	bl	8005980 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800321a:	2201      	movs	r2, #1
 800321c:	2104      	movs	r1, #4
 800321e:	4807      	ldr	r0, [pc, #28]	; (800323c <LCD_IO_Init+0xec>)
 8003220:	f002 fbae 	bl	8005980 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003224:	f7ff fed6 	bl	8002fd4 <SPIx_Init>
  }
}
 8003228:	bf00      	nop
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000814 	.word	0x20000814
 8003234:	40023800 	.word	0x40023800
 8003238:	40020c00 	.word	0x40020c00
 800323c:	40020800 	.word	0x40020800

08003240 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003250:	480a      	ldr	r0, [pc, #40]	; (800327c <LCD_IO_WriteData+0x3c>)
 8003252:	f002 fb95 	bl	8005980 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003256:	2200      	movs	r2, #0
 8003258:	2104      	movs	r1, #4
 800325a:	4809      	ldr	r0, [pc, #36]	; (8003280 <LCD_IO_WriteData+0x40>)
 800325c:	f002 fb90 	bl	8005980 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff10 	bl	8003088 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003268:	2201      	movs	r2, #1
 800326a:	2104      	movs	r1, #4
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <LCD_IO_WriteData+0x40>)
 800326e:	f002 fb87 	bl	8005980 <HAL_GPIO_WritePin>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40020800 	.word	0x40020800

08003284 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003294:	480a      	ldr	r0, [pc, #40]	; (80032c0 <LCD_IO_WriteReg+0x3c>)
 8003296:	f002 fb73 	bl	8005980 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800329a:	2200      	movs	r2, #0
 800329c:	2104      	movs	r1, #4
 800329e:	4809      	ldr	r0, [pc, #36]	; (80032c4 <LCD_IO_WriteReg+0x40>)
 80032a0:	f002 fb6e 	bl	8005980 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff feed 	bl	8003088 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80032ae:	2201      	movs	r2, #1
 80032b0:	2104      	movs	r1, #4
 80032b2:	4804      	ldr	r0, [pc, #16]	; (80032c4 <LCD_IO_WriteReg+0x40>)
 80032b4:	f002 fb64 	bl	8005980 <HAL_GPIO_WritePin>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40020800 	.word	0x40020800

080032c8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	460a      	mov	r2, r1
 80032d2:	80fb      	strh	r3, [r7, #6]
 80032d4:	4613      	mov	r3, r2
 80032d6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80032dc:	2200      	movs	r2, #0
 80032de:	2104      	movs	r1, #4
 80032e0:	4810      	ldr	r0, [pc, #64]	; (8003324 <LCD_IO_ReadData+0x5c>)
 80032e2:	f002 fb4d 	bl	8005980 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80032e6:	2200      	movs	r2, #0
 80032e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ec:	480e      	ldr	r0, [pc, #56]	; (8003328 <LCD_IO_ReadData+0x60>)
 80032ee:	f002 fb47 	bl	8005980 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fec7 	bl	8003088 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80032fa:	797b      	ldrb	r3, [r7, #5]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fea3 	bl	8003048 <SPIx_Read>
 8003302:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800330a:	4807      	ldr	r0, [pc, #28]	; (8003328 <LCD_IO_ReadData+0x60>)
 800330c:	f002 fb38 	bl	8005980 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003310:	2201      	movs	r2, #1
 8003312:	2104      	movs	r1, #4
 8003314:	4803      	ldr	r0, [pc, #12]	; (8003324 <LCD_IO_ReadData+0x5c>)
 8003316:	f002 fb33 	bl	8005980 <HAL_GPIO_WritePin>
  
  return readvalue;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00

0800332c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 f809 	bl	800434c <HAL_Delay>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003342:	b580      	push	{r7, lr}
 8003344:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003346:	f7ff fd53 	bl	8002df0 <I2Cx_Init>
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}

0800334e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003352:	f7ff fd7f 	bl	8002e54 <I2Cx_ITConfig>
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}

0800335a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	460b      	mov	r3, r1
 8003366:	71bb      	strb	r3, [r7, #6]
 8003368:	4613      	mov	r3, r2
 800336a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800336c:	797a      	ldrb	r2, [r7, #5]
 800336e:	79b9      	ldrb	r1, [r7, #6]
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd9e 	bl	8002eb4 <I2Cx_WriteData>
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	460a      	mov	r2, r1
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	4613      	mov	r3, r2
 800338e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003390:	79ba      	ldrb	r2, [r7, #6]
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fdb6 	bl	8002f08 <I2Cx_ReadData>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	603a      	str	r2, [r7, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	460b      	mov	r3, r1
 80033b6:	71bb      	strb	r3, [r7, #6]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80033bc:	88bb      	ldrh	r3, [r7, #4]
 80033be:	79b9      	ldrb	r1, [r7, #6]
 80033c0:	79f8      	ldrb	r0, [r7, #7]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	f7ff fdcc 	bl	8002f60 <I2Cx_ReadBuffer>
 80033c8:	4603      	mov	r3, r0
 80033ca:	b29b      	uxth	r3, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 ffb5 	bl	800434c <HAL_Delay>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <BSP_LCD_Init+0xbc>)
 80033f2:	4a2e      	ldr	r2, [pc, #184]	; (80034ac <BSP_LCD_Init+0xc0>)
 80033f4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <BSP_LCD_Init+0xbc>)
 80033f8:	2209      	movs	r2, #9
 80033fa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80033fc:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <BSP_LCD_Init+0xbc>)
 80033fe:	2201      	movs	r2, #1
 8003400:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003404:	221d      	movs	r2, #29
 8003406:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <BSP_LCD_Init+0xbc>)
 800340a:	2203      	movs	r2, #3
 800340c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003410:	f240 120d 	movw	r2, #269	; 0x10d
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003418:	f240 1243 	movw	r2, #323	; 0x143
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003420:	f240 1217 	movw	r2, #279	; 0x117
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003428:	f240 1247 	movw	r2, #327	; 0x147
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <BSP_LCD_Init+0xc4>)
 8003448:	2208      	movs	r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <BSP_LCD_Init+0xc4>)
 800344e:	22c0      	movs	r2, #192	; 0xc0
 8003450:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <BSP_LCD_Init+0xc4>)
 8003454:	2204      	movs	r2, #4
 8003456:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <BSP_LCD_Init+0xc4>)
 800345a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003460:	4813      	ldr	r0, [pc, #76]	; (80034b0 <BSP_LCD_Init+0xc4>)
 8003462:	f005 fd19 	bl	8008e98 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <BSP_LCD_Init+0xbc>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <BSP_LCD_Init+0xbc>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800347e:	f000 fa7f 	bl	8003980 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003482:	4809      	ldr	r0, [pc, #36]	; (80034a8 <BSP_LCD_Init+0xbc>)
 8003484:	f004 fcf0 	bl	8007e68 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <BSP_LCD_Init+0xc8>)
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <BSP_LCD_Init+0xcc>)
 800348c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <BSP_LCD_Init+0xc8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003496:	f000 fc61 	bl	8003d5c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800349a:	4808      	ldr	r0, [pc, #32]	; (80034bc <BSP_LCD_Init+0xd0>)
 800349c:	f000 f8ee 	bl	800367c <BSP_LCD_SetFont>

  return LCD_OK;
 80034a0:	2300      	movs	r3, #0
}  
 80034a2:	4618      	mov	r0, r3
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000818 	.word	0x20000818
 80034ac:	40016800 	.word	0x40016800
 80034b0:	20000900 	.word	0x20000900
 80034b4:	2000094c 	.word	0x2000094c
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	2000007c 	.word	0x2000007c

080034c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <BSP_LCD_GetXSize+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	4798      	blx	r3
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2000094c 	.word	0x2000094c

080034d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <BSP_LCD_GetYSize+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4798      	blx	r3
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000094c 	.word	0x2000094c

080034f0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b090      	sub	sp, #64	; 0x40
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003500:	f7ff ffde 	bl	80034c0 <BSP_LCD_GetXSize>
 8003504:	4603      	mov	r3, r0
 8003506:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800350c:	f7ff ffe4 	bl	80034d8 <BSP_LCD_GetYSize>
 8003510:	4603      	mov	r3, r0
 8003512:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800351c:	23ff      	movs	r3, #255	; 0xff
 800351e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003536:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800353c:	2307      	movs	r3, #7
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003540:	f7ff ffbe 	bl	80034c0 <BSP_LCD_GetXSize>
 8003544:	4603      	mov	r3, r0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003548:	f7ff ffc6 	bl	80034d8 <BSP_LCD_GetYSize>
 800354c:	4603      	mov	r3, r0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003550:	88fa      	ldrh	r2, [r7, #6]
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	4619      	mov	r1, r3
 8003558:	4814      	ldr	r0, [pc, #80]	; (80035ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800355a:	f004 fd55 	bl	8008008 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	4913      	ldr	r1, [pc, #76]	; (80035b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3304      	adds	r3, #4
 800356e:	f04f 32ff 	mov.w	r2, #4294967295
 8003572:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	490e      	ldr	r1, [pc, #56]	; (80035b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3308      	adds	r3, #8
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003586:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003588:	88fa      	ldrh	r2, [r7, #6]
 800358a:	4909      	ldr	r1, [pc, #36]	; (80035b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800359a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800359e:	f004 fdef 	bl	8008180 <HAL_LTDC_EnableDither>
}
 80035a2:	bf00      	nop
 80035a4:	3740      	adds	r7, #64	; 0x40
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000818 	.word	0x20000818
 80035b0:	20000934 	.word	0x20000934
 80035b4:	2000007c 	.word	0x2000007c

080035b8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <BSP_LCD_SelectLayer+0x1c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000930 	.word	0x20000930

080035d8 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d112      	bne.n	8003610 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	01db      	lsls	r3, r3, #7
 80035f4:	4413      	add	r3, r2
 80035f6:	3384      	adds	r3, #132	; 0x84
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4611      	mov	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	01d2      	lsls	r2, r2, #7
 8003604:	440a      	add	r2, r1
 8003606:	3284      	adds	r2, #132	; 0x84
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e011      	b.n	8003634 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	01db      	lsls	r3, r3, #7
 800361a:	4413      	add	r3, r2
 800361c:	3384      	adds	r3, #132	; 0x84
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4611      	mov	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	01d2      	lsls	r2, r2, #7
 800362a:	440a      	add	r2, r1
 800362c:	3284      	adds	r2, #132	; 0x84
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <BSP_LCD_SetLayerVisible+0x78>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000818 	.word	0x20000818

08003654 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <BSP_LCD_SetColorKeying+0x24>)
 8003664:	f004 fd0e 	bl	8008084 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4803      	ldr	r0, [pc, #12]	; (8003678 <BSP_LCD_SetColorKeying+0x24>)
 800366c:	f004 fd4e 	bl	800810c <HAL_LTDC_EnableColorKeying>
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000818 	.word	0x20000818

0800367c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <BSP_LCD_SetFont+0x2c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4908      	ldr	r1, [pc, #32]	; (80036ac <BSP_LCD_SetFont+0x30>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000930 	.word	0x20000930
 80036ac:	20000934 	.word	0x20000934

080036b0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <BSP_LCD_GetFont+0x24>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <BSP_LCD_GetFont+0x28>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3308      	adds	r3, #8
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000930 	.word	0x20000930
 80036d8:	20000934 	.word	0x20000934

080036dc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <BSP_LCD_Clear+0x48>)
 80036e6:	681c      	ldr	r4, [r3, #0]
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <BSP_LCD_Clear+0x48>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <BSP_LCD_Clear+0x4c>)
 80036ee:	2134      	movs	r1, #52	; 0x34
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461e      	mov	r6, r3
 80036fc:	f7ff fee0 	bl	80034c0 <BSP_LCD_GetXSize>
 8003700:	4605      	mov	r5, r0
 8003702:	f7ff fee9 	bl	80034d8 <BSP_LCD_GetYSize>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	462a      	mov	r2, r5
 8003714:	4631      	mov	r1, r6
 8003716:	4620      	mov	r0, r4
 8003718:	f000 fae8 	bl	8003cec <FillBuffer>
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003724:	20000930 	.word	0x20000930
 8003728:	20000818 	.word	0x20000818

0800372c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
 8003736:	460b      	mov	r3, r1
 8003738:	80bb      	strh	r3, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <BSP_LCD_DisplayChar+0x80>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	491b      	ldr	r1, [pc, #108]	; (80037b0 <BSP_LCD_DisplayChar+0x84>)
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3308      	adds	r3, #8
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <BSP_LCD_DisplayChar+0x80>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4c14      	ldr	r4, [pc, #80]	; (80037b0 <BSP_LCD_DisplayChar+0x84>)
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4423      	add	r3, r4
 800376a:	3308      	adds	r3, #8
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003770:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <BSP_LCD_DisplayChar+0x80>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <BSP_LCD_DisplayChar+0x84>)
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4423      	add	r3, r4
 8003784:	3308      	adds	r3, #8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	889b      	ldrh	r3, [r3, #4]
 800378a:	3307      	adds	r3, #7
 800378c:	2b00      	cmp	r3, #0
 800378e:	da00      	bge.n	8003792 <BSP_LCD_DisplayChar+0x66>
 8003790:	3307      	adds	r3, #7
 8003792:	10db      	asrs	r3, r3, #3
 8003794:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003798:	18ca      	adds	r2, r1, r3
 800379a:	88b9      	ldrh	r1, [r7, #4]
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f9ea 	bl	8003b78 <DrawChar>
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	20000930 	.word	0x20000930
 80037b0:	20000934 	.word	0x20000934

080037b4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60ba      	str	r2, [r7, #8]
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	81fb      	strh	r3, [r7, #14]
 80037c2:	460b      	mov	r3, r1
 80037c4:	81bb      	strh	r3, [r7, #12]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80037ca:	2301      	movs	r3, #1
 80037cc:	83fb      	strh	r3, [r7, #30]
 80037ce:	2300      	movs	r3, #0
 80037d0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037de:	e002      	b.n	80037e6 <BSP_LCD_DisplayStringAt+0x32>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	617a      	str	r2, [r7, #20]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f6      	bne.n	80037e0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037f2:	f7ff fe65 	bl	80034c0 <BSP_LCD_GetXSize>
 80037f6:	4601      	mov	r1, r0
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	484b      	ldr	r0, [pc, #300]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4403      	add	r3, r0
 8003808:	3308      	adds	r3, #8
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	889b      	ldrh	r3, [r3, #4]
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d01c      	beq.n	8003854 <BSP_LCD_DisplayStringAt+0xa0>
 800381a:	2b03      	cmp	r3, #3
 800381c:	dc33      	bgt.n	8003886 <BSP_LCD_DisplayStringAt+0xd2>
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <BSP_LCD_DisplayStringAt+0x74>
 8003822:	2b02      	cmp	r3, #2
 8003824:	d019      	beq.n	800385a <BSP_LCD_DisplayStringAt+0xa6>
 8003826:	e02e      	b.n	8003886 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad1      	subs	r1, r2, r3
 800382e:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	483e      	ldr	r0, [pc, #248]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4403      	add	r3, r0
 800383e:	3308      	adds	r3, #8
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	889b      	ldrh	r3, [r3, #4]
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	4413      	add	r3, r2
 8003850:	83fb      	strh	r3, [r7, #30]
      break;
 8003852:	e01b      	b.n	800388c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	83fb      	strh	r3, [r7, #30]
      break;
 8003858:	e018      	b.n	800388c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	b299      	uxth	r1, r3
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4831      	ldr	r0, [pc, #196]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4403      	add	r3, r0
 8003872:	3308      	adds	r3, #8
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	889b      	ldrh	r3, [r3, #4]
 8003878:	fb11 f303 	smulbb	r3, r1, r3
 800387c:	b29a      	uxth	r2, r3
 800387e:	89fb      	ldrh	r3, [r7, #14]
 8003880:	4413      	add	r3, r2
 8003882:	83fb      	strh	r3, [r7, #30]
      break;
 8003884:	e002      	b.n	800388c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	83fb      	strh	r3, [r7, #30]
      break;
 800388a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800388c:	e01a      	b.n	80038c4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	89b9      	ldrh	r1, [r7, #12]
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff48 	bl	800372c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800389c:	4b22      	ldr	r3, [pc, #136]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4922      	ldr	r1, [pc, #136]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3308      	adds	r3, #8
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	889a      	ldrh	r2, [r3, #4]
 80038b2:	8bfb      	ldrh	r3, [r7, #30]
 80038b4:	4413      	add	r3, r2
 80038b6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
    i++;
 80038be:	8bbb      	ldrh	r3, [r7, #28]
 80038c0:	3301      	adds	r3, #1
 80038c2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2dc      	uxtb	r4, r3
 80038d2:	f7ff fdf5 	bl	80034c0 <BSP_LCD_GetXSize>
 80038d6:	8bb9      	ldrh	r1, [r7, #28]
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4d13      	ldr	r5, [pc, #76]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	442b      	add	r3, r5
 80038e8:	3308      	adds	r3, #8
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	889b      	ldrh	r3, [r3, #4]
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	1ac3      	subs	r3, r0, r3
 80038f4:	b299      	uxth	r1, r3
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <BSP_LCD_DisplayStringAt+0x174>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	480c      	ldr	r0, [pc, #48]	; (800392c <BSP_LCD_DisplayStringAt+0x178>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4403      	add	r3, r0
 8003906:	3308      	adds	r3, #8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	889b      	ldrh	r3, [r3, #4]
 800390c:	4299      	cmp	r1, r3
 800390e:	bf2c      	ite	cs
 8003910:	2301      	movcs	r3, #1
 8003912:	2300      	movcc	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4023      	ands	r3, r4
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1b7      	bne.n	800388e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}
 8003928:	20000930 	.word	0x20000930
 800392c:	20000934 	.word	0x20000934

08003930 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800393c:	f7ff feb8 	bl	80036b0 <BSP_LCD_GetFont>
 8003940:	4603      	mov	r3, r0
 8003942:	88db      	ldrh	r3, [r3, #6]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	fb12 f303 	smulbb	r3, r2, r3
 800394a:	b299      	uxth	r1, r3
 800394c:	2303      	movs	r3, #3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	2000      	movs	r0, #0
 8003952:	f7ff ff2f 	bl	80037b4 <BSP_LCD_DisplayStringAt>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <BSP_LCD_DisplayOn+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800396e:	4b03      	ldr	r3, [pc, #12]	; (800397c <BSP_LCD_DisplayOn+0x1c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4798      	blx	r3
  }
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000094c 	.word	0x2000094c

08003980 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	; 0x38
 8003984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a60      	ldr	r2, [pc, #384]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	4b5a      	ldr	r3, [pc, #360]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a59      	ldr	r2, [pc, #356]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b57      	ldr	r3, [pc, #348]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a52      	ldr	r2, [pc, #328]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a36      	ldr	r2, [pc, #216]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a2f      	ldr	r2, [pc, #188]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <BSP_LCD_MspInit+0x190>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003a66:	f641 0358 	movw	r3, #6232	; 0x1858
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a74:	2302      	movs	r3, #2
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003a78:	230e      	movs	r3, #14
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a80:	4619      	mov	r1, r3
 8003a82:	4824      	ldr	r0, [pc, #144]	; (8003b14 <BSP_LCD_MspInit+0x194>)
 8003a84:	f001 fcc4 	bl	8005410 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003a88:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a92:	4619      	mov	r1, r3
 8003a94:	4820      	ldr	r0, [pc, #128]	; (8003b18 <BSP_LCD_MspInit+0x198>)
 8003a96:	f001 fcbb 	bl	8005410 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003a9a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	481d      	ldr	r0, [pc, #116]	; (8003b1c <BSP_LCD_MspInit+0x19c>)
 8003aa8:	f001 fcb2 	bl	8005410 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003aac:	2348      	movs	r3, #72	; 0x48
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	481a      	ldr	r0, [pc, #104]	; (8003b20 <BSP_LCD_MspInit+0x1a0>)
 8003ab8:	f001 fcaa 	bl	8005410 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4816      	ldr	r0, [pc, #88]	; (8003b24 <BSP_LCD_MspInit+0x1a4>)
 8003aca:	f001 fca1 	bl	8005410 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003ace:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4813      	ldr	r0, [pc, #76]	; (8003b28 <BSP_LCD_MspInit+0x1a8>)
 8003adc:	f001 fc98 	bl	8005410 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003ae4:	2309      	movs	r3, #9
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aec:	4619      	mov	r1, r3
 8003aee:	480a      	ldr	r0, [pc, #40]	; (8003b18 <BSP_LCD_MspInit+0x198>)
 8003af0:	f001 fc8e 	bl	8005410 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003af4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	4809      	ldr	r0, [pc, #36]	; (8003b28 <BSP_LCD_MspInit+0x1a8>)
 8003b02:	f001 fc85 	bl	8005410 <HAL_GPIO_Init>
}
 8003b06:	bf00      	nop
 8003b08:	3738      	adds	r7, #56	; 0x38
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020c00 	.word	0x40020c00
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40021800 	.word	0x40021800

08003b2c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	603a      	str	r2, [r7, #0]
 8003b36:	80fb      	strh	r3, [r7, #6]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <BSP_LCD_DrawPixel+0x44>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <BSP_LCD_DrawPixel+0x48>)
 8003b42:	2134      	movs	r1, #52	; 0x34
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	335c      	adds	r3, #92	; 0x5c
 8003b4c:	681c      	ldr	r4, [r3, #0]
 8003b4e:	88bd      	ldrh	r5, [r7, #4]
 8003b50:	f7ff fcb6 	bl	80034c0 <BSP_LCD_GetXSize>
 8003b54:	4603      	mov	r3, r0
 8003b56:	fb03 f205 	mul.w	r2, r3, r5
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4423      	add	r3, r4
 8003b62:	461a      	mov	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b70:	20000930 	.word	0x20000930
 8003b74:	20000818 	.word	0x20000818

08003b78 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	603a      	str	r2, [r7, #0]
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	460b      	mov	r3, r1
 8003b86:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <DrawChar+0x16c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4953      	ldr	r1, [pc, #332]	; (8003ce8 <DrawChar+0x170>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	88db      	ldrh	r3, [r3, #6]
 8003baa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003bac:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <DrawChar+0x16c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <DrawChar+0x170>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	889b      	ldrh	r3, [r3, #4]
 8003bc2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003bc4:	8a3b      	ldrh	r3, [r7, #16]
 8003bc6:	3307      	adds	r3, #7
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da00      	bge.n	8003bce <DrawChar+0x56>
 8003bcc:	3307      	adds	r3, #7
 8003bce:	10db      	asrs	r3, r3, #3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	8a3b      	ldrh	r3, [r7, #16]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e076      	b.n	8003cd2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003be4:	8a3b      	ldrh	r3, [r7, #16]
 8003be6:	3307      	adds	r3, #7
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da00      	bge.n	8003bee <DrawChar+0x76>
 8003bec:	3307      	adds	r3, #7
 8003bee:	10db      	asrs	r3, r3, #3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003bfe:	8a3b      	ldrh	r3, [r7, #16]
 8003c00:	3307      	adds	r3, #7
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da00      	bge.n	8003c08 <DrawChar+0x90>
 8003c06:	3307      	adds	r3, #7
 8003c08:	10db      	asrs	r3, r3, #3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d002      	beq.n	8003c14 <DrawChar+0x9c>
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d004      	beq.n	8003c1c <DrawChar+0xa4>
 8003c12:	e00c      	b.n	8003c2e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	617b      	str	r3, [r7, #20]
      break;
 8003c1a:	e016      	b.n	8003c4a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	3201      	adds	r2, #1
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
      break;
 8003c2c:	e00d      	b.n	8003c4a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	041a      	lsls	r2, r3, #16
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3301      	adds	r3, #1
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	3202      	adds	r2, #2
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
      break;
 8003c48:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e036      	b.n	8003cbe <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003c50:	8a3a      	ldrh	r2, [r7, #16]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	4413      	add	r3, r2
 8003c74:	b298      	uxth	r0, r3
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <DrawChar+0x16c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	491b      	ldr	r1, [pc, #108]	; (8003ce8 <DrawChar+0x170>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	88bb      	ldrh	r3, [r7, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7ff ff4e 	bl	8003b2c <BSP_LCD_DrawPixel>
 8003c90:	e012      	b.n	8003cb8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4413      	add	r3, r2
 8003c9a:	b298      	uxth	r0, r3
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <DrawChar+0x16c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4911      	ldr	r1, [pc, #68]	; (8003ce8 <DrawChar+0x170>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3304      	adds	r3, #4
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	88bb      	ldrh	r3, [r7, #4]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f7ff ff3a 	bl	8003b2c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	8a3b      	ldrh	r3, [r7, #16]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3c4      	bcc.n	8003c50 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003cc6:	88bb      	ldrh	r3, [r7, #4]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	8a7b      	ldrh	r3, [r7, #18]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d384      	bcc.n	8003be4 <DrawChar+0x6c>
  }
}
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000930 	.word	0x20000930
 8003ce8:	20000934 	.word	0x20000934

08003cec <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <FillBuffer+0x68>)
 8003cfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d00:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <FillBuffer+0x68>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003d08:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <FillBuffer+0x68>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <FillBuffer+0x68>)
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <FillBuffer+0x6c>)
 8003d12:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003d14:	480f      	ldr	r0, [pc, #60]	; (8003d54 <FillBuffer+0x68>)
 8003d16:	f000 fdf9 	bl	800490c <HAL_DMA2D_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d115      	bne.n	8003d4c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	480c      	ldr	r0, [pc, #48]	; (8003d54 <FillBuffer+0x68>)
 8003d24:	f000 ff50 	bl	8004bc8 <HAL_DMA2D_ConfigLayer>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69f9      	ldr	r1, [r7, #28]
 8003d38:	4806      	ldr	r0, [pc, #24]	; (8003d54 <FillBuffer+0x68>)
 8003d3a:	f000 fe30 	bl	800499e <HAL_DMA2D_Start>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d103      	bne.n	8003d4c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003d44:	210a      	movs	r1, #10
 8003d46:	4803      	ldr	r0, [pc, #12]	; (8003d54 <FillBuffer+0x68>)
 8003d48:	f000 fe54 	bl	80049f4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200008c0 	.word	0x200008c0
 8003d58:	4002b000 	.word	0x4002b000

08003d5c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003d62:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <BSP_SDRAM_Init+0xb0>)
 8003d64:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d6e:	2207      	movs	r2, #7
 8003d70:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d74:	2204      	movs	r2, #4
 8003d76:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d80:	2202      	movs	r2, #2
 8003d82:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d86:	2202      	movs	r2, #2
 8003d88:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003d9e:	2204      	movs	r2, #4
 8003da0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003da4:	2210      	movs	r2, #16
 8003da6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003dae:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003db0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003db4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003dc4:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003dd6:	f000 f87f 	bl	8003ed8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003dda:	490d      	ldr	r1, [pc, #52]	; (8003e10 <BSP_SDRAM_Init+0xb4>)
 8003ddc:	480a      	ldr	r0, [pc, #40]	; (8003e08 <BSP_SDRAM_Init+0xac>)
 8003dde:	f005 fa1b 	bl	8009218 <HAL_SDRAM_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <BSP_SDRAM_Init+0xb8>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e002      	b.n	8003df6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <BSP_SDRAM_Init+0xb8>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003df6:	f240 506a 	movw	r0, #1386	; 0x56a
 8003dfa:	f000 f80d 	bl	8003e18 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <BSP_SDRAM_Init+0xb8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000950 	.word	0x20000950
 8003e0c:	a0000140 	.word	0xa0000140
 8003e10:	20000984 	.word	0x20000984
 8003e14:	20000084 	.word	0x20000084

08003e18 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e40:	4923      	ldr	r1, [pc, #140]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e42:	4824      	ldr	r0, [pc, #144]	; (8003ed4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e44:	f005 fa1c 	bl	8009280 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f000 fa7f 	bl	800434c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e50:	2202      	movs	r2, #2
 8003e52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e56:	2208      	movs	r2, #8
 8003e58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e6a:	4919      	ldr	r1, [pc, #100]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e6c:	4819      	ldr	r0, [pc, #100]	; (8003ed4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e6e:	f005 fa07 	bl	8009280 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e72:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e74:	2203      	movs	r2, #3
 8003e76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e80:	2204      	movs	r2, #4
 8003e82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	4910      	ldr	r1, [pc, #64]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e90:	4810      	ldr	r0, [pc, #64]	; (8003ed4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e92:	f005 f9f5 	bl	8009280 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003e96:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003e9a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb8:	4905      	ldr	r1, [pc, #20]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eba:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ebc:	f005 f9e0 	bl	8009280 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4804      	ldr	r0, [pc, #16]	; (8003ed4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ec4:	f005 fa11 	bl	80092ea <HAL_SDRAM_ProgramRefreshRate>
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200009a0 	.word	0x200009a0
 8003ed4:	20000950 	.word	0x20000950

08003ed8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b090      	sub	sp, #64	; 0x40
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80ec 	beq.w	80040c2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eee:	4b77      	ldr	r3, [pc, #476]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4a76      	ldr	r2, [pc, #472]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6393      	str	r3, [r2, #56]	; 0x38
 8003efa:	4b74      	ldr	r3, [pc, #464]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	4b70      	ldr	r3, [pc, #448]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a6f      	ldr	r2, [pc, #444]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	4b69      	ldr	r3, [pc, #420]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4a68      	ldr	r2, [pc, #416]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	6313      	str	r3, [r2, #48]	; 0x30
 8003f32:	4b66      	ldr	r3, [pc, #408]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	4b62      	ldr	r3, [pc, #392]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a61      	ldr	r2, [pc, #388]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a5a      	ldr	r2, [pc, #360]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f64:	f043 0308 	orr.w	r3, r3, #8
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b58      	ldr	r3, [pc, #352]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	4b54      	ldr	r3, [pc, #336]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a53      	ldr	r2, [pc, #332]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f80:	f043 0310 	orr.w	r3, r3, #16
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b51      	ldr	r3, [pc, #324]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a4c      	ldr	r2, [pc, #304]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003f9c:	f043 0320 	orr.w	r3, r3, #32
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b46      	ldr	r3, [pc, #280]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	4a45      	ldr	r2, [pc, #276]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <BSP_SDRAM_MspInit+0x1f4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003fda:	2360      	movs	r3, #96	; 0x60
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	483a      	ldr	r0, [pc, #232]	; (80040d0 <BSP_SDRAM_MspInit+0x1f8>)
 8003fe6:	f001 fa13 	bl	8005410 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003fea:	2301      	movs	r3, #1
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4837      	ldr	r0, [pc, #220]	; (80040d4 <BSP_SDRAM_MspInit+0x1fc>)
 8003ff6:	f001 fa0b 	bl	8005410 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003ffa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004004:	4619      	mov	r1, r3
 8004006:	4834      	ldr	r0, [pc, #208]	; (80040d8 <BSP_SDRAM_MspInit+0x200>)
 8004008:	f001 fa02 	bl	8005410 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800400c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	4830      	ldr	r0, [pc, #192]	; (80040dc <BSP_SDRAM_MspInit+0x204>)
 800401a:	f001 f9f9 	bl	8005410 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800401e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004028:	4619      	mov	r1, r3
 800402a:	482d      	ldr	r0, [pc, #180]	; (80040e0 <BSP_SDRAM_MspInit+0x208>)
 800402c:	f001 f9f0 	bl	8005410 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004030:	f248 1333 	movw	r3, #33075	; 0x8133
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403a:	4619      	mov	r1, r3
 800403c:	4829      	ldr	r0, [pc, #164]	; (80040e4 <BSP_SDRAM_MspInit+0x20c>)
 800403e:	f001 f9e7 	bl	8005410 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004054:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800405c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004064:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800406c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004070:	2200      	movs	r2, #0
 8004072:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800407a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 800407e:	2200      	movs	r2, #0
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004084:	2203      	movs	r2, #3
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 800408a:	2200      	movs	r2, #0
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <BSP_SDRAM_MspInit+0x214>)
 8004098:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	4a11      	ldr	r2, [pc, #68]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80040a6:	4810      	ldr	r0, [pc, #64]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 80040a8:	f000 fb20 	bl	80046ec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80040ac:	480e      	ldr	r0, [pc, #56]	; (80040e8 <BSP_SDRAM_MspInit+0x210>)
 80040ae:	f000 fa6f 	bl	8004590 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80040b2:	2200      	movs	r2, #0
 80040b4:	210f      	movs	r1, #15
 80040b6:	2038      	movs	r0, #56	; 0x38
 80040b8:	f000 fa24 	bl	8004504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80040bc:	2038      	movs	r0, #56	; 0x38
 80040be:	f000 fa3d 	bl	800453c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80040c2:	bf00      	nop
 80040c4:	3740      	adds	r7, #64	; 0x40
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40021800 	.word	0x40021800
 80040e8:	200009b0 	.word	0x200009b0
 80040ec:	40026410 	.word	0x40026410

080040f0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	460a      	mov	r2, r1
 80040fa:	80fb      	strh	r3, [r7, #6]
 80040fc:	4613      	mov	r3, r2
 80040fe:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004104:	4a13      	ldr	r2, [pc, #76]	; (8004154 <BSP_TS_Init+0x64>)
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <BSP_TS_Init+0x68>)
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <BSP_TS_Init+0x6c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2082      	movs	r0, #130	; 0x82
 8004116:	4798      	blx	r3
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	f640 0311 	movw	r3, #2065	; 0x811
 8004120:	429a      	cmp	r2, r3
 8004122:	d104      	bne.n	800412e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <BSP_TS_Init+0x70>)
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <BSP_TS_Init+0x6c>)
 8004128:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <BSP_TS_Init+0x70>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2082      	movs	r0, #130	; 0x82
 800413c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <BSP_TS_Init+0x70>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2082      	movs	r0, #130	; 0x82
 8004146:	4798      	blx	r3
  }

  return ret;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000a14 	.word	0x20000a14
 8004158:	20000a16 	.word	0x20000a16
 800415c:	20000044 	.word	0x20000044
 8004160:	20000a10 	.word	0x20000a10

08004164 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <BSP_TS_GetState+0x148>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2082      	movs	r0, #130	; 0x82
 8004174:	4798      	blx	r3
 8004176:	4603      	mov	r3, r0
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808d 	beq.w	80042a2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004188:	4b48      	ldr	r3, [pc, #288]	; (80042ac <BSP_TS_GetState+0x148>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f107 020c 	add.w	r2, r7, #12
 8004192:	f107 010e 	add.w	r1, r7, #14
 8004196:	2082      	movs	r0, #130	; 0x82
 8004198:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800419a:	89bb      	ldrh	r3, [r7, #12]
 800419c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80041a4:	89bb      	ldrh	r3, [r7, #12]
 80041a6:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <BSP_TS_GetState+0x14c>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80041b0:	8abb      	ldrh	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	82bb      	strh	r3, [r7, #20]
 80041ba:	e008      	b.n	80041ce <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <BSP_TS_GetState+0x150>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	8aba      	ldrh	r2, [r7, #20]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d903      	bls.n	80041ce <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <BSP_TS_GetState+0x150>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80041ce:	8abb      	ldrh	r3, [r7, #20]
 80041d0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80041d2:	89fb      	ldrh	r3, [r7, #14]
 80041d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80041d8:	4293      	cmp	r3, r2
 80041da:	d806      	bhi.n	80041ea <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80041e2:	330e      	adds	r3, #14
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	81fb      	strh	r3, [r7, #14]
 80041e8:	e005      	b.n	80041f6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80041f0:	3308      	adds	r3, #8
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <BSP_TS_GetState+0x154>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	08db      	lsrs	r3, r3, #3
 8004200:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	82fb      	strh	r3, [r7, #22]
 800420c:	e008      	b.n	8004220 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <BSP_TS_GetState+0x158>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	8afa      	ldrh	r2, [r7, #22]
 8004214:	429a      	cmp	r2, r3
 8004216:	d903      	bls.n	8004220 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004218:	4b28      	ldr	r3, [pc, #160]	; (80042bc <BSP_TS_GetState+0x158>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004220:	8afb      	ldrh	r3, [r7, #22]
 8004222:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004224:	89fb      	ldrh	r3, [r7, #14]
 8004226:	461a      	mov	r2, r3
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <BSP_TS_GetState+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d906      	bls.n	800423e <BSP_TS_GetState+0xda>
 8004230:	89fa      	ldrh	r2, [r7, #14]
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <BSP_TS_GetState+0x15c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	b29b      	uxth	r3, r3
 800423c:	e005      	b.n	800424a <BSP_TS_GetState+0xe6>
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <BSP_TS_GetState+0x15c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	b29a      	uxth	r2, r3
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29b      	uxth	r3, r3
 800424a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800424c:	89bb      	ldrh	r3, [r7, #12]
 800424e:	461a      	mov	r2, r3
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <BSP_TS_GetState+0x160>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d906      	bls.n	8004266 <BSP_TS_GetState+0x102>
 8004258:	89ba      	ldrh	r2, [r7, #12]
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <BSP_TS_GetState+0x160>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	e005      	b.n	8004272 <BSP_TS_GetState+0x10e>
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <BSP_TS_GetState+0x160>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	b29a      	uxth	r2, r3
 800426c:	89bb      	ldrh	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b29b      	uxth	r3, r3
 8004272:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004274:	8a7a      	ldrh	r2, [r7, #18]
 8004276:	8a3b      	ldrh	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	2b05      	cmp	r3, #5
 800427c:	dd07      	ble.n	800428e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	461a      	mov	r2, r3
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <BSP_TS_GetState+0x15c>)
 8004284:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004286:	89bb      	ldrh	r3, [r7, #12]
 8004288:	461a      	mov	r2, r3
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <BSP_TS_GetState+0x160>)
 800428c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <BSP_TS_GetState+0x15c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <BSP_TS_GetState+0x160>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	809a      	strh	r2, [r3, #4]
  }
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000a10 	.word	0x20000a10
 80042b0:	ba2e8ba3 	.word	0xba2e8ba3
 80042b4:	20000a16 	.word	0x20000a16
 80042b8:	88888889 	.word	0x88888889
 80042bc:	20000a14 	.word	0x20000a14
 80042c0:	20000a18 	.word	0x20000a18
 80042c4:	20000a1c 	.word	0x20000a1c

080042c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_Init+0x40>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <HAL_Init+0x40>)
 80042d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_Init+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_Init+0x40>)
 80042de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <HAL_Init+0x40>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f0:	2003      	movs	r0, #3
 80042f2:	f000 f8fc 	bl	80044ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042f6:	200f      	movs	r0, #15
 80042f8:	f7fd fd76 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042fc:	f7fd fd4c 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00

0800430c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_IncTick+0x20>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_IncTick+0x24>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_IncTick+0x24>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000008c 	.word	0x2000008c
 8004330:	20000a20 	.word	0x20000a20

08004334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_GetTick+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000a20 	.word	0x20000a20

0800434c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7ff ffee 	bl	8004334 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d005      	beq.n	8004372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_Delay+0x44>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004372:	bf00      	nop
 8004374:	f7ff ffde 	bl	8004334 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d8f7      	bhi.n	8004374 <HAL_Delay+0x28>
  {
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000008c 	.word	0x2000008c

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <__NVIC_EnableIRQ+0x38>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db0a      	blt.n	800445e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	490c      	ldr	r1, [pc, #48]	; (8004480 <__NVIC_SetPriority+0x4c>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	0112      	lsls	r2, r2, #4
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	440b      	add	r3, r1
 8004458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800445c:	e00a      	b.n	8004474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <__NVIC_SetPriority+0x50>)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	3b04      	subs	r3, #4
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	440b      	add	r3, r1
 8004472:	761a      	strb	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000e100 	.word	0xe000e100
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f1c3 0307 	rsb	r3, r3, #7
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf28      	it	cs
 80044a6:	2304      	movcs	r3, #4
 80044a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d902      	bls.n	80044b8 <NVIC_EncodePriority+0x30>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b03      	subs	r3, #3
 80044b6:	e000      	b.n	80044ba <NVIC_EncodePriority+0x32>
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	401a      	ands	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d0:	f04f 31ff 	mov.w	r1, #4294967295
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43d9      	mvns	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	4313      	orrs	r3, r2
         );
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ff4c 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004516:	f7ff ff61 	bl	80043dc <__NVIC_GetPriorityGrouping>
 800451a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	6978      	ldr	r0, [r7, #20]
 8004522:	f7ff ffb1 	bl	8004488 <NVIC_EncodePriority>
 8004526:	4602      	mov	r2, r0
 8004528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff80 	bl	8004434 <__NVIC_SetPriority>
}
 8004534:	bf00      	nop
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff54 	bl	80043f8 <__NVIC_EnableIRQ>
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00e      	b.n	8004588 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	795b      	ldrb	r3, [r3, #5]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc f826 	bl	80005cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff feca 	bl	8004334 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e099      	b.n	80046e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045cc:	e00f      	b.n	80045ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ce:	f7ff feb1 	bl	8004334 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d908      	bls.n	80045ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e078      	b.n	80046e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e8      	bne.n	80045ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_DMA_Init+0x158>)
 8004608:	4013      	ands	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2b04      	cmp	r3, #4
 8004646:	d107      	bne.n	8004658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	4313      	orrs	r3, r2
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b04      	cmp	r3, #4
 8004680:	d117      	bne.n	80046b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8bd 	bl	8004814 <DMA_CheckFifoParam>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ae:	2301      	movs	r3, #1
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f874 	bl	80047a8 <DMA_CalcBaseAndBitshift>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	223f      	movs	r2, #63	; 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f010803f 	.word	0xf010803f

080046ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e050      	b.n	80047a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d101      	bne.n	800470e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	e048      	b.n	80047a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2221      	movs	r2, #33	; 0x21
 800474c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f82a 	bl	80047a8 <DMA_CalcBaseAndBitshift>
 8004754:	4603      	mov	r3, r0
 8004756:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	223f      	movs	r2, #63	; 0x3f
 8004782:	409a      	lsls	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3b10      	subs	r3, #16
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <DMA_CalcBaseAndBitshift+0x64>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <DMA_CalcBaseAndBitshift+0x68>)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d909      	bls.n	80047ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58
 80047e8:	e007      	b.n	80047fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	aaaaaaab 	.word	0xaaaaaaab
 8004810:	0800deb4 	.word	0x0800deb4

08004814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11f      	bne.n	800486e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d856      	bhi.n	80048e2 <DMA_CheckFifoParam+0xce>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <DMA_CheckFifoParam+0x28>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800485f 	.word	0x0800485f
 8004844:	0800484d 	.word	0x0800484d
 8004848:	080048e3 	.word	0x080048e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d046      	beq.n	80048e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485c:	e043      	b.n	80048e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004866:	d140      	bne.n	80048ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486c:	e03d      	b.n	80048ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004876:	d121      	bne.n	80048bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d837      	bhi.n	80048ee <DMA_CheckFifoParam+0xda>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <DMA_CheckFifoParam+0x70>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004895 	.word	0x08004895
 8004888:	0800489b 	.word	0x0800489b
 800488c:	08004895 	.word	0x08004895
 8004890:	080048ad 	.word	0x080048ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      break;
 8004898:	e030      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d025      	beq.n	80048f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048aa:	e022      	b.n	80048f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048b4:	d11f      	bne.n	80048f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ba:	e01c      	b.n	80048f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d903      	bls.n	80048ca <DMA_CheckFifoParam+0xb6>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d003      	beq.n	80048d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048c8:	e018      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      break;
 80048ce:	e015      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e00b      	b.n	80048fa <DMA_CheckFifoParam+0xe6>
      break;
 80048e2:	bf00      	nop
 80048e4:	e00a      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
 80048e8:	e008      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048ea:	bf00      	nop
 80048ec:	e006      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;   
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048fa:	bf00      	nop
    }
  } 
  
  return status; 
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e03b      	b.n	8004996 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fb fe9e 	bl	8000674 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	f023 0107 	bic.w	r1, r3, #7
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004976:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68d1      	ldr	r1, [r2, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	430b      	orrs	r3, r1
 8004984:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af02      	add	r7, sp, #8
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_DMA2D_Start+0x1c>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e018      	b.n	80049ec <HAL_DMA2D_Start+0x4e>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f989 	bl	8004cec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d056      	beq.n	8004abe <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a10:	f7ff fc90 	bl	8004334 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a16:	e04b      	b.n	8004ab0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d023      	beq.n	8004a72 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2221      	movs	r2, #33	; 0x21
 8004a5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2204      	movs	r2, #4
 8004a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0a5      	b.n	8004bbe <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d01a      	beq.n	8004ab0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7ff fc5b 	bl	8004334 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <HAL_DMA2D_PollForTransfer+0x9c>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e086      	b.n	8004bbe <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ac      	beq.n	8004a18 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d061      	beq.n	8004ba4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ae0:	f7ff fc28 	bl	8004334 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ae6:	e056      	b.n	8004b96 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02e      	beq.n	8004b58 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f043 0204 	orr.w	r2, r3, #4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f043 0202 	orr.w	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2229      	movs	r2, #41	; 0x29
 8004b42:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e032      	b.n	8004bbe <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d01a      	beq.n	8004b96 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7ff fbe8 	bl	8004334 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <HAL_DMA2D_PollForTransfer+0x182>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2203      	movs	r2, #3
 8004b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e013      	b.n	8004bbe <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0a1      	beq.n	8004ae8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2212      	movs	r2, #18
 8004baa:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_DMA2D_ConfigLayer+0x20>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e079      	b.n	8004cdc <HAL_DMA2D_ConfigLayer+0x114>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3318      	adds	r3, #24
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004c12:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004c14:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b0a      	cmp	r3, #10
 8004c1c:	d003      	beq.n	8004c26 <HAL_DMA2D_ConfigLayer+0x5e>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b09      	cmp	r3, #9
 8004c24:	d107      	bne.n	8004c36 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e005      	b.n	8004c42 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d120      	bne.n	8004c8a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	ea02 0103 	and.w	r1, r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b0a      	cmp	r3, #10
 8004c70:	d003      	beq.n	8004c7a <HAL_DMA2D_ConfigLayer+0xb2>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	d127      	bne.n	8004cca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
 8004c88:	e01f      	b.n	8004cca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	ea02 0103 	and.w	r1, r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b0a      	cmp	r3, #10
 8004cb2:	d003      	beq.n	8004cbc <HAL_DMA2D_ConfigLayer+0xf4>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	d106      	bne.n	8004cca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cc8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	ff03000f 	.word	0xff03000f

08004cec <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	041a      	lsls	r2, r3, #16
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d24:	d174      	bne.n	8004e10 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d34:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d3c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d108      	bne.n	8004d5e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5c:	e053      	b.n	8004e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d106      	bne.n	8004d74 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
 8004d72:	e048      	b.n	8004e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d111      	bne.n	8004da0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	0cdb      	lsrs	r3, r3, #19
 8004d80:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	0a9b      	lsrs	r3, r3, #10
 8004d86:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	02db      	lsls	r3, r3, #11
 8004d96:	4313      	orrs	r3, r2
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	e032      	b.n	8004e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d117      	bne.n	8004dd8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	0fdb      	lsrs	r3, r3, #31
 8004dac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	0cdb      	lsrs	r3, r3, #19
 8004db2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	0adb      	lsrs	r3, r3, #11
 8004db8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	03db      	lsls	r3, r3, #15
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e016      	b.n	8004e06 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	0f1b      	lsrs	r3, r3, #28
 8004ddc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	0d1b      	lsrs	r3, r3, #20
 8004de2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	0b1b      	lsrs	r3, r3, #12
 8004de8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	011a      	lsls	r2, r3, #4
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004e0e:	e003      	b.n	8004e18 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	60da      	str	r2, [r3, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	372c      	adds	r7, #44	; 0x2c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <HAL_FLASH_Program+0xa0>)
 8004e38:	7e1b      	ldrb	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_FLASH_Program+0x1e>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e03b      	b.n	8004eba <HAL_FLASH_Program+0x96>
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_FLASH_Program+0xa0>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e4c:	f000 f860 	bl	8004f10 <FLASH_WaitForLastOperation>
 8004e50:	4603      	mov	r3, r0
 8004e52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12b      	bne.n	8004eb2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004e60:	783b      	ldrb	r3, [r7, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	68b8      	ldr	r0, [r7, #8]
 8004e66:	f000 f90b 	bl	8005080 <FLASH_Program_Byte>
 8004e6a:	e016      	b.n	8004e9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004e72:	883b      	ldrh	r3, [r7, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	f000 f8de 	bl	8005038 <FLASH_Program_HalfWord>
 8004e7c:	e00d      	b.n	8004e9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d105      	bne.n	8004e90 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	68b8      	ldr	r0, [r7, #8]
 8004e8a:	f000 f8b3 	bl	8004ff4 <FLASH_Program_Word>
 8004e8e:	e004      	b.n	8004e9a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e94:	68b8      	ldr	r0, [r7, #8]
 8004e96:	f000 f87b 	bl	8004f90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e9e:	f000 f837 	bl	8004f10 <FLASH_WaitForLastOperation>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <HAL_FLASH_Program+0xa4>)
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_FLASH_Program+0xa4>)
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_FLASH_Program+0xa0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000a24 	.word	0x20000a24
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_FLASH_Unlock+0x38>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da0b      	bge.n	8004ef6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_FLASH_Unlock+0x38>)
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_FLASH_Unlock+0x3c>)
 8004ee2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_FLASH_Unlock+0x38>)
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <HAL_FLASH_Unlock+0x40>)
 8004ee8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_FLASH_Unlock+0x38>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da01      	bge.n	8004ef6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40023c00 	.word	0x40023c00
 8004f08:	45670123 	.word	0x45670123
 8004f0c:	cdef89ab 	.word	0xcdef89ab

08004f10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <FLASH_WaitForLastOperation+0x78>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f22:	f7ff fa07 	bl	8004334 <HAL_GetTick>
 8004f26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f28:	e010      	b.n	8004f4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d00c      	beq.n	8004f4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <FLASH_WaitForLastOperation+0x38>
 8004f38:	f7ff f9fc 	bl	8004334 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d201      	bcs.n	8004f4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e019      	b.n	8004f80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <FLASH_WaitForLastOperation+0x7c>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e8      	bne.n	8004f2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <FLASH_WaitForLastOperation+0x7c>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f64:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <FLASH_WaitForLastOperation+0x7c>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <FLASH_WaitForLastOperation+0x7c>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004f76:	f000 f8a5 	bl	80050c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
  
}  
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000a24 	.word	0x20000a24
 8004f8c:	40023c00 	.word	0x40023c00

08004f90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004fae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <FLASH_Program_DoubleWord+0x60>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004fc6:	f3bf 8f6f 	isb	sy
}
 8004fca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	000a      	movs	r2, r1
 8004fda:	2300      	movs	r3, #0
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	3104      	adds	r1, #4
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40023c00 	.word	0x40023c00

08004ff4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <FLASH_Program_Word+0x40>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <FLASH_Program_Word+0x40>)
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <FLASH_Program_Word+0x40>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <FLASH_Program_Word+0x40>)
 8005010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005014:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <FLASH_Program_Word+0x40>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	4a06      	ldr	r2, [pc, #24]	; (8005034 <FLASH_Program_Word+0x40>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40023c00 	.word	0x40023c00

08005038 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005044:	4b0d      	ldr	r3, [pc, #52]	; (800507c <FLASH_Program_HalfWord+0x44>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	4a0c      	ldr	r2, [pc, #48]	; (800507c <FLASH_Program_HalfWord+0x44>)
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <FLASH_Program_HalfWord+0x44>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <FLASH_Program_HalfWord+0x44>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <FLASH_Program_HalfWord+0x44>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	4a06      	ldr	r2, [pc, #24]	; (800507c <FLASH_Program_HalfWord+0x44>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	801a      	strh	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00

08005080 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <FLASH_Program_Byte+0x40>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <FLASH_Program_Byte+0x40>)
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <FLASH_Program_Byte+0x40>)
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <FLASH_Program_Byte+0x40>)
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <FLASH_Program_Byte+0x40>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	4a06      	ldr	r2, [pc, #24]	; (80050c0 <FLASH_Program_Byte+0x40>)
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	701a      	strb	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40023c00 	.word	0x40023c00

080050c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80050d4:	4b2d      	ldr	r3, [pc, #180]	; (800518c <FLASH_SetErrorCode+0xc8>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f043 0310 	orr.w	r3, r3, #16
 80050dc:	4a2b      	ldr	r2, [pc, #172]	; (800518c <FLASH_SetErrorCode+0xc8>)
 80050de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 80050e2:	2210      	movs	r2, #16
 80050e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <FLASH_SetErrorCode+0xc8>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f043 0308 	orr.w	r3, r3, #8
 80050fa:	4a24      	ldr	r2, [pc, #144]	; (800518c <FLASH_SetErrorCode+0xc8>)
 80050fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 8005100:	2220      	movs	r2, #32
 8005102:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <FLASH_SetErrorCode+0xc8>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	4a1c      	ldr	r2, [pc, #112]	; (800518c <FLASH_SetErrorCode+0xc8>)
 800511a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005122:	4b19      	ldr	r3, [pc, #100]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <FLASH_SetErrorCode+0xc8>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <FLASH_SetErrorCode+0xc8>)
 8005138:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800513a:	4b13      	ldr	r3, [pc, #76]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 800513c:	2280      	movs	r2, #128	; 0x80
 800513e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <FLASH_SetErrorCode+0xc8>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <FLASH_SetErrorCode+0xc8>)
 8005156:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 800515a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800515e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <FLASH_SetErrorCode+0xc8>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f043 0320 	orr.w	r3, r3, #32
 8005174:	4a05      	ldr	r2, [pc, #20]	; (800518c <FLASH_SetErrorCode+0xc8>)
 8005176:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <FLASH_SetErrorCode+0xc4>)
 800517a:	2202      	movs	r2, #2
 800517c:	60da      	str	r2, [r3, #12]
  }
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40023c00 	.word	0x40023c00
 800518c:	20000a24 	.word	0x20000a24

08005190 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051a2:	4b32      	ldr	r3, [pc, #200]	; (800526c <HAL_FLASHEx_Erase+0xdc>)
 80051a4:	7e1b      	ldrb	r3, [r3, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_FLASHEx_Erase+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e05a      	b.n	8005264 <HAL_FLASHEx_Erase+0xd4>
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <HAL_FLASHEx_Erase+0xdc>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051b8:	f7ff feaa 	bl	8004f10 <FLASH_WaitForLastOperation>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d14a      	bne.n	800525c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d117      	bne.n	8005206 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 f846 	bl	8005274 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051ec:	f7ff fe90 	bl	8004f10 <FLASH_WaitForLastOperation>
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <HAL_FLASHEx_Erase+0xe0>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <HAL_FLASHEx_Erase+0xe0>)
 80051fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051fe:	f023 0304 	bic.w	r3, r3, #4
 8005202:	6113      	str	r3, [r2, #16]
 8005204:	e028      	b.n	8005258 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	e01c      	b.n	8005248 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4619      	mov	r1, r3
 8005216:	68b8      	ldr	r0, [r7, #8]
 8005218:	f000 f866 	bl	80052e8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800521c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005220:	f7ff fe76 	bl	8004f10 <FLASH_WaitForLastOperation>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <HAL_FLASHEx_Erase+0xe0>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	4a10      	ldr	r2, [pc, #64]	; (8005270 <HAL_FLASHEx_Erase+0xe0>)
 800522e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005232:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	601a      	str	r2, [r3, #0]
          break;
 8005240:	e00a      	b.n	8005258 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3301      	adds	r3, #1
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4413      	add	r3, r2
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	429a      	cmp	r2, r3
 8005256:	d3da      	bcc.n	800520e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005258:	f000 f894 	bl	8005384 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_FLASHEx_Erase+0xdc>)
 800525e:	2200      	movs	r2, #0
 8005260:	761a      	strb	r2, [r3, #24]

  return status;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000a24 	.word	0x20000a24
 8005270:	40023c00 	.word	0x40023c00

08005274 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <FLASH_MassErase+0x70>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <FLASH_MassErase+0x70>)
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d108      	bne.n	80052a4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <FLASH_MassErase+0x70>)
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <FLASH_MassErase+0x70>)
 8005298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6113      	str	r3, [r2, #16]
 80052a2:	e00f      	b.n	80052c4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d106      	bne.n	80052b8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <FLASH_MassErase+0x70>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <FLASH_MassErase+0x70>)
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	6113      	str	r3, [r2, #16]
 80052b6:	e005      	b.n	80052c4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <FLASH_MassErase+0x70>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <FLASH_MassErase+0x70>)
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <FLASH_MassErase+0x70>)
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	4313      	orrs	r3, r2
 80052ce:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <FLASH_MassErase+0x70>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6113      	str	r3, [r2, #16]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00

080052e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e010      	b.n	8005326 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d103      	bne.n	8005312 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800530a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e009      	b.n	8005326 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d103      	bne.n	8005320 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e002      	b.n	8005326 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005324:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b0b      	cmp	r3, #11
 800532a:	d902      	bls.n	8005332 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	490f      	ldr	r1, [pc, #60]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <FLASH_Erase_Sector+0x98>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005350:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4313      	orrs	r3, r2
 8005360:	4a07      	ldr	r2, [pc, #28]	; (8005380 <FLASH_Erase_Sector+0x98>)
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <FLASH_Erase_Sector+0x98>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <FLASH_Erase_Sector+0x98>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	6113      	str	r3, [r2, #16]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40023c00 	.word	0x40023c00

08005384 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <FLASH_FlushCaches+0x88>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005394:	4b1d      	ldr	r3, [pc, #116]	; (800540c <FLASH_FlushCaches+0x88>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1c      	ldr	r2, [pc, #112]	; (800540c <FLASH_FlushCaches+0x88>)
 800539a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800539e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80053a0:	4b1a      	ldr	r3, [pc, #104]	; (800540c <FLASH_FlushCaches+0x88>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <FLASH_FlushCaches+0x88>)
 80053a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b17      	ldr	r3, [pc, #92]	; (800540c <FLASH_FlushCaches+0x88>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a16      	ldr	r2, [pc, #88]	; (800540c <FLASH_FlushCaches+0x88>)
 80053b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <FLASH_FlushCaches+0x88>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <FLASH_FlushCaches+0x88>)
 80053be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80053c4:	4b11      	ldr	r3, [pc, #68]	; (800540c <FLASH_FlushCaches+0x88>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <FLASH_FlushCaches+0x88>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <FLASH_FlushCaches+0x88>)
 80053d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <FLASH_FlushCaches+0x88>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <FLASH_FlushCaches+0x88>)
 80053e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b08      	ldr	r3, [pc, #32]	; (800540c <FLASH_FlushCaches+0x88>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a07      	ldr	r2, [pc, #28]	; (800540c <FLASH_FlushCaches+0x88>)
 80053ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <FLASH_FlushCaches+0x88>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <FLASH_FlushCaches+0x88>)
 80053fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053fe:	6013      	str	r3, [r2, #0]
  }
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023c00 	.word	0x40023c00

08005410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e177      	b.n	800571c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800542c:	2201      	movs	r2, #1
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	429a      	cmp	r2, r3
 8005446:	f040 8166 	bne.w	8005716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d005      	beq.n	8005462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800545e:	2b02      	cmp	r3, #2
 8005460:	d130      	bne.n	80054c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2203      	movs	r2, #3
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005498:	2201      	movs	r2, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4013      	ands	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 0201 	and.w	r2, r3, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d017      	beq.n	8005500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2203      	movs	r2, #3
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d123      	bne.n	8005554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	08da      	lsrs	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3208      	adds	r2, #8
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	220f      	movs	r2, #15
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	08da      	lsrs	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3208      	adds	r2, #8
 800554e:	69b9      	ldr	r1, [r7, #24]
 8005550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	2203      	movs	r2, #3
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0203 	and.w	r2, r3, #3
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80c0 	beq.w	8005716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_GPIO_Init+0x324>)
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_GPIO_Init+0x324>)
 80055a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a4:	6453      	str	r3, [r2, #68]	; 0x44
 80055a6:	4b63      	ldr	r3, [pc, #396]	; (8005734 <HAL_GPIO_Init+0x324>)
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055b2:	4a61      	ldr	r2, [pc, #388]	; (8005738 <HAL_GPIO_Init+0x328>)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	3302      	adds	r3, #2
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	220f      	movs	r2, #15
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a58      	ldr	r2, [pc, #352]	; (800573c <HAL_GPIO_Init+0x32c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d037      	beq.n	800564e <HAL_GPIO_Init+0x23e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a57      	ldr	r2, [pc, #348]	; (8005740 <HAL_GPIO_Init+0x330>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_GPIO_Init+0x23a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a56      	ldr	r2, [pc, #344]	; (8005744 <HAL_GPIO_Init+0x334>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d02b      	beq.n	8005646 <HAL_GPIO_Init+0x236>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a55      	ldr	r2, [pc, #340]	; (8005748 <HAL_GPIO_Init+0x338>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d025      	beq.n	8005642 <HAL_GPIO_Init+0x232>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a54      	ldr	r2, [pc, #336]	; (800574c <HAL_GPIO_Init+0x33c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01f      	beq.n	800563e <HAL_GPIO_Init+0x22e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a53      	ldr	r2, [pc, #332]	; (8005750 <HAL_GPIO_Init+0x340>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d019      	beq.n	800563a <HAL_GPIO_Init+0x22a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a52      	ldr	r2, [pc, #328]	; (8005754 <HAL_GPIO_Init+0x344>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_GPIO_Init+0x226>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a51      	ldr	r2, [pc, #324]	; (8005758 <HAL_GPIO_Init+0x348>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00d      	beq.n	8005632 <HAL_GPIO_Init+0x222>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a50      	ldr	r2, [pc, #320]	; (800575c <HAL_GPIO_Init+0x34c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <HAL_GPIO_Init+0x21e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4f      	ldr	r2, [pc, #316]	; (8005760 <HAL_GPIO_Init+0x350>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_GPIO_Init+0x21a>
 8005626:	2309      	movs	r3, #9
 8005628:	e012      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800562a:	230a      	movs	r3, #10
 800562c:	e010      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800562e:	2308      	movs	r3, #8
 8005630:	e00e      	b.n	8005650 <HAL_GPIO_Init+0x240>
 8005632:	2307      	movs	r3, #7
 8005634:	e00c      	b.n	8005650 <HAL_GPIO_Init+0x240>
 8005636:	2306      	movs	r3, #6
 8005638:	e00a      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800563a:	2305      	movs	r3, #5
 800563c:	e008      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800563e:	2304      	movs	r3, #4
 8005640:	e006      	b.n	8005650 <HAL_GPIO_Init+0x240>
 8005642:	2303      	movs	r3, #3
 8005644:	e004      	b.n	8005650 <HAL_GPIO_Init+0x240>
 8005646:	2302      	movs	r3, #2
 8005648:	e002      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_GPIO_Init+0x240>
 800564e:	2300      	movs	r3, #0
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f002 0203 	and.w	r2, r2, #3
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	4093      	lsls	r3, r2
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005660:	4935      	ldr	r1, [pc, #212]	; (8005738 <HAL_GPIO_Init+0x328>)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	3302      	adds	r3, #2
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <HAL_GPIO_Init+0x354>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005692:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_GPIO_Init+0x354>)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005698:	4b32      	ldr	r3, [pc, #200]	; (8005764 <HAL_GPIO_Init+0x354>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056bc:	4a29      	ldr	r2, [pc, #164]	; (8005764 <HAL_GPIO_Init+0x354>)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056c2:	4b28      	ldr	r3, [pc, #160]	; (8005764 <HAL_GPIO_Init+0x354>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056e6:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <HAL_GPIO_Init+0x354>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ec:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <HAL_GPIO_Init+0x354>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <HAL_GPIO_Init+0x354>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3301      	adds	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	f67f ae84 	bls.w	800542c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800
 8005738:	40013800 	.word	0x40013800
 800573c:	40020000 	.word	0x40020000
 8005740:	40020400 	.word	0x40020400
 8005744:	40020800 	.word	0x40020800
 8005748:	40020c00 	.word	0x40020c00
 800574c:	40021000 	.word	0x40021000
 8005750:	40021400 	.word	0x40021400
 8005754:	40021800 	.word	0x40021800
 8005758:	40021c00 	.word	0x40021c00
 800575c:	40022000 	.word	0x40022000
 8005760:	40022400 	.word	0x40022400
 8005764:	40013c00 	.word	0x40013c00

08005768 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e0d9      	b.n	8005938 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005784:	2201      	movs	r2, #1
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4013      	ands	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	f040 80c9 	bne.w	8005932 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80057a0:	4a6b      	ldr	r2, [pc, #428]	; (8005950 <HAL_GPIO_DeInit+0x1e8>)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	220f      	movs	r2, #15
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a63      	ldr	r2, [pc, #396]	; (8005954 <HAL_GPIO_DeInit+0x1ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d037      	beq.n	800583a <HAL_GPIO_DeInit+0xd2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a62      	ldr	r2, [pc, #392]	; (8005958 <HAL_GPIO_DeInit+0x1f0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_GPIO_DeInit+0xce>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a61      	ldr	r2, [pc, #388]	; (800595c <HAL_GPIO_DeInit+0x1f4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02b      	beq.n	8005832 <HAL_GPIO_DeInit+0xca>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a60      	ldr	r2, [pc, #384]	; (8005960 <HAL_GPIO_DeInit+0x1f8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d025      	beq.n	800582e <HAL_GPIO_DeInit+0xc6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a5f      	ldr	r2, [pc, #380]	; (8005964 <HAL_GPIO_DeInit+0x1fc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <HAL_GPIO_DeInit+0xc2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a5e      	ldr	r2, [pc, #376]	; (8005968 <HAL_GPIO_DeInit+0x200>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d019      	beq.n	8005826 <HAL_GPIO_DeInit+0xbe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_GPIO_DeInit+0x204>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_GPIO_DeInit+0xba>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_GPIO_DeInit+0x208>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00d      	beq.n	800581e <HAL_GPIO_DeInit+0xb6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_GPIO_DeInit+0x20c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <HAL_GPIO_DeInit+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a5a      	ldr	r2, [pc, #360]	; (8005978 <HAL_GPIO_DeInit+0x210>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <HAL_GPIO_DeInit+0xae>
 8005812:	2309      	movs	r3, #9
 8005814:	e012      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 8005816:	230a      	movs	r3, #10
 8005818:	e010      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 800581a:	2308      	movs	r3, #8
 800581c:	e00e      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 800581e:	2307      	movs	r3, #7
 8005820:	e00c      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 8005822:	2306      	movs	r3, #6
 8005824:	e00a      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 8005826:	2305      	movs	r3, #5
 8005828:	e008      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 800582a:	2304      	movs	r3, #4
 800582c:	e006      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 800582e:	2303      	movs	r3, #3
 8005830:	e004      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 8005832:	2302      	movs	r3, #2
 8005834:	e002      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_GPIO_DeInit+0xd4>
 800583a:	2300      	movs	r3, #0
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	f002 0203 	and.w	r2, r2, #3
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	4093      	lsls	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d132      	bne.n	80058b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800584c:	4b4b      	ldr	r3, [pc, #300]	; (800597c <HAL_GPIO_DeInit+0x214>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	43db      	mvns	r3, r3
 8005854:	4949      	ldr	r1, [pc, #292]	; (800597c <HAL_GPIO_DeInit+0x214>)
 8005856:	4013      	ands	r3, r2
 8005858:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800585a:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_GPIO_DeInit+0x214>)
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	43db      	mvns	r3, r3
 8005862:	4946      	ldr	r1, [pc, #280]	; (800597c <HAL_GPIO_DeInit+0x214>)
 8005864:	4013      	ands	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005868:	4b44      	ldr	r3, [pc, #272]	; (800597c <HAL_GPIO_DeInit+0x214>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	4942      	ldr	r1, [pc, #264]	; (800597c <HAL_GPIO_DeInit+0x214>)
 8005872:	4013      	ands	r3, r2
 8005874:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005876:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_GPIO_DeInit+0x214>)
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	43db      	mvns	r3, r3
 800587e:	493f      	ldr	r1, [pc, #252]	; (800597c <HAL_GPIO_DeInit+0x214>)
 8005880:	4013      	ands	r3, r2
 8005882:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	220f      	movs	r2, #15
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005894:	4a2e      	ldr	r2, [pc, #184]	; (8005950 <HAL_GPIO_DeInit+0x1e8>)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	3302      	adds	r3, #2
 800589c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	43da      	mvns	r2, r3
 80058a4:	482a      	ldr	r0, [pc, #168]	; (8005950 <HAL_GPIO_DeInit+0x1e8>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	400a      	ands	r2, r1
 80058ac:	3302      	adds	r3, #2
 80058ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	2103      	movs	r1, #3
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	08da      	lsrs	r2, r3, #3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3208      	adds	r2, #8
 80058d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	220f      	movs	r2, #15
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	08d2      	lsrs	r2, r2, #3
 80058e8:	4019      	ands	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3208      	adds	r2, #8
 80058ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	2103      	movs	r1, #3
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	2101      	movs	r1, #1
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	2103      	movs	r1, #3
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	401a      	ands	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3301      	adds	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	f67f af22 	bls.w	8005784 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40013800 	.word	0x40013800
 8005954:	40020000 	.word	0x40020000
 8005958:	40020400 	.word	0x40020400
 800595c:	40020800 	.word	0x40020800
 8005960:	40020c00 	.word	0x40020c00
 8005964:	40021000 	.word	0x40021000
 8005968:	40021400 	.word	0x40021400
 800596c:	40021800 	.word	0x40021800
 8005970:	40021c00 	.word	0x40021c00
 8005974:	40022000 	.word	0x40022000
 8005978:	40022400 	.word	0x40022400
 800597c:	40013c00 	.word	0x40013c00

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	400b      	ands	r3, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fb ff7a 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40013c00 	.word	0x40013c00

08005a18 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	b08f      	sub	sp, #60	; 0x3c
 8005a1c:	af0a      	add	r7, sp, #40	; 0x28
 8005a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e054      	b.n	8005ad4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fc fc95 	bl	8002374 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 fc04 	bl	800b276 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	687e      	ldr	r6, [r7, #4]
 8005a76:	466d      	mov	r5, sp
 8005a78:	f106 0410 	add.w	r4, r6, #16
 8005a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a88:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a8c:	1d33      	adds	r3, r6, #4
 8005a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f005 fb8f 	bl	800b1b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f005 fbfb 	bl	800b298 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	687e      	ldr	r6, [r7, #4]
 8005aaa:	466d      	mov	r5, sp
 8005aac:	f106 0410 	add.w	r4, r6, #16
 8005ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ab8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005abc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ac0:	1d33      	adds	r3, r6, #4
 8005ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ac4:	6838      	ldr	r0, [r7, #0]
 8005ac6:	f005 fd45 	bl	800b554 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005adc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f005 fceb 	bl	800b4ce <USB_GetMode>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f040 80f6 	bne.w	8005cec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f005 fccf 	bl	800b4a8 <USB_ReadInterrupts>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80ec 	beq.w	8005cea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 fcc6 	bl	800b4a8 <USB_ReadInterrupts>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b26:	d104      	bne.n	8005b32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f005 fcb6 	bl	800b4a8 <USB_ReadInterrupts>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b46:	d104      	bne.n	8005b52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f005 fca6 	bl	800b4a8 <USB_ReadInterrupts>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b66:	d104      	bne.n	8005b72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f005 fc96 	bl	800b4a8 <USB_ReadInterrupts>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d103      	bne.n	8005b8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fc88 	bl	800b4a8 <USB_ReadInterrupts>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba2:	d11c      	bne.n	8005bde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	6938      	ldr	r0, [r7, #16]
 8005bc2:	f005 fbb5 	bl	800b330 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005bc6:	6938      	ldr	r0, [r7, #16]
 8005bc8:	f005 fbe6 	bl	800b398 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f005 fd7e 	bl	800b6d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f89e 	bl	8005d1a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f005 fc60 	bl	800b4a8 <USB_ReadInterrupts>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf2:	d102      	bne.n	8005bfa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f84c 	bl	8006c92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f005 fc52 	bl	800b4a8 <USB_ReadInterrupts>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d106      	bne.n	8005c1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f86f 	bl	8005cf2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f005 fc41 	bl	800b4a8 <USB_ReadInterrupts>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d101      	bne.n	8005c34 <HAL_HCD_IRQHandler+0x158>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <HAL_HCD_IRQHandler+0x15a>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0210 	bic.w	r2, r2, #16
 8005c48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 ff4f 	bl	8006aee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0210 	orr.w	r2, r2, #16
 8005c5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f005 fc1f 	bl	800b4a8 <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c74:	d13a      	bne.n	8005cec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f005 fd64 	bl	800b748 <USB_HC_ReadInterrupt>
 8005c80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e025      	b.n	8005cd4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d018      	beq.n	8005cce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f859 	bl	8005d72 <HCD_HC_IN_IRQHandler>
 8005cc0:	e005      	b.n	8005cce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fba7 	bl	800641c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3d4      	bcc.n	8005c88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ce6:	615a      	str	r2, [r3, #20]
 8005ce8:	e000      	b.n	8005cec <HAL_HCD_IRQHandler+0x210>
      return;
 8005cea:	bf00      	nop
    }
  }
}
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
 8005d62:	4613      	mov	r3, r2
 8005d64:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d11a      	bne.n	8005dd8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	461a      	mov	r2, r3
 8005db0:	2304      	movs	r3, #4
 8005db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3361      	adds	r3, #97	; 0x61
 8005dc2:	2206      	movs	r2, #6
 8005dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f005 fcca 	bl	800b76a <USB_HC_Halt>
 8005dd6:	e0af      	b.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	d11b      	bne.n	8005e28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	212c      	movs	r1, #44	; 0x2c
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	3361      	adds	r3, #97	; 0x61
 8005e12:	2207      	movs	r2, #7
 8005e14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f005 fca2 	bl	800b76a <USB_HC_Halt>
 8005e26:	e087      	b.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d109      	bne.n	8005e52 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	6093      	str	r3, [r2, #8]
 8005e50:	e072      	b.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d11a      	bne.n	8005e9e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	461a      	mov	r2, r3
 8005e76:	2308      	movs	r3, #8
 8005e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	212c      	movs	r1, #44	; 0x2c
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	3361      	adds	r3, #97	; 0x61
 8005e88:	2205      	movs	r2, #5
 8005e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f005 fc67 	bl	800b76a <USB_HC_Halt>
 8005e9c:	e04c      	b.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb4:	d11b      	bne.n	8005eee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	212c      	movs	r1, #44	; 0x2c
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3361      	adds	r3, #97	; 0x61
 8005ed8:	2208      	movs	r2, #8
 8005eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f005 fc3f 	bl	800b76a <USB_HC_Halt>
 8005eec:	e024      	b.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d119      	bne.n	8005f38 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f10:	461a      	mov	r2, r3
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	212c      	movs	r1, #44	; 0x2c
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	3361      	adds	r3, #97	; 0x61
 8005f24:	2206      	movs	r2, #6
 8005f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f005 fc19 	bl	800b76a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4e:	d112      	bne.n	8005f76 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f005 fc05 	bl	800b76a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f74:	e24e      	b.n	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	f040 80df 	bne.w	800614c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d019      	beq.n	8005fca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	212c      	movs	r1, #44	; 0x2c
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3348      	adds	r3, #72	; 0x48
 8005fa4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	0159      	lsls	r1, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	440b      	add	r3, r1
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fb8:	1ad2      	subs	r2, r2, r3
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	202c      	movs	r0, #44	; 0x2c
 8005fc0:	fb00 f303 	mul.w	r3, r0, r3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3350      	adds	r3, #80	; 0x50
 8005fc8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	212c      	movs	r1, #44	; 0x2c
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3361      	adds	r3, #97	; 0x61
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	212c      	movs	r1, #44	; 0x2c
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	335c      	adds	r3, #92	; 0x5c
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	212c      	movs	r1, #44	; 0x2c
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	4413      	add	r3, r2
 800600c:	333f      	adds	r3, #63	; 0x3f
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	212c      	movs	r1, #44	; 0x2c
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	333f      	adds	r3, #63	; 0x3f
 8006022:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006024:	2b02      	cmp	r3, #2
 8006026:	d111      	bne.n	800604c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f005 fb99 	bl	800b76a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	461a      	mov	r2, r3
 8006046:	2310      	movs	r3, #16
 8006048:	6093      	str	r3, [r2, #8]
 800604a:	e03a      	b.n	80060c2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	212c      	movs	r1, #44	; 0x2c
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	333f      	adds	r3, #63	; 0x3f
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d009      	beq.n	8006074 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	212c      	movs	r1, #44	; 0x2c
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	4413      	add	r3, r2
 800606c:	333f      	adds	r3, #63	; 0x3f
 800606e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006070:	2b01      	cmp	r3, #1
 8006072:	d126      	bne.n	80060c2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	440a      	add	r2, r1
 800608a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006092:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	212c      	movs	r1, #44	; 0x2c
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	3360      	adds	r3, #96	; 0x60
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	b2d9      	uxtb	r1, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	202c      	movs	r0, #44	; 0x2c
 80060b0:	fb00 f303 	mul.w	r3, r0, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	3360      	adds	r3, #96	; 0x60
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fe4a 	bl	8005d56 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d12b      	bne.n	8006122 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	212c      	movs	r1, #44	; 0x2c
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	3348      	adds	r3, #72	; 0x48
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	202c      	movs	r0, #44	; 0x2c
 80060e0:	fb00 f202 	mul.w	r2, r0, r2
 80060e4:	440a      	add	r2, r1
 80060e6:	3240      	adds	r2, #64	; 0x40
 80060e8:	8812      	ldrh	r2, [r2, #0]
 80060ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 818e 	beq.w	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	212c      	movs	r1, #44	; 0x2c
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	3354      	adds	r3, #84	; 0x54
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f083 0301 	eor.w	r3, r3, #1
 800610c:	b2d8      	uxtb	r0, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	212c      	movs	r1, #44	; 0x2c
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	3354      	adds	r3, #84	; 0x54
 800611c:	4602      	mov	r2, r0
 800611e:	701a      	strb	r2, [r3, #0]
}
 8006120:	e178      	b.n	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	212c      	movs	r1, #44	; 0x2c
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	3354      	adds	r3, #84	; 0x54
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f083 0301 	eor.w	r3, r3, #1
 8006136:	b2d8      	uxtb	r0, r3
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	212c      	movs	r1, #44	; 0x2c
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	4413      	add	r3, r2
 8006144:	3354      	adds	r3, #84	; 0x54
 8006146:	4602      	mov	r2, r0
 8006148:	701a      	strb	r2, [r3, #0]
}
 800614a:	e163      	b.n	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	f040 80f6 	bne.w	8006350 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	212c      	movs	r1, #44	; 0x2c
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	3361      	adds	r3, #97	; 0x61
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d109      	bne.n	800618c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	212c      	movs	r1, #44	; 0x2c
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3360      	adds	r3, #96	; 0x60
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e0c9      	b.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	212c      	movs	r1, #44	; 0x2c
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	3361      	adds	r3, #97	; 0x61
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b05      	cmp	r3, #5
 800619e:	d109      	bne.n	80061b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	212c      	movs	r1, #44	; 0x2c
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	3360      	adds	r3, #96	; 0x60
 80061ae:	2205      	movs	r2, #5
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e0b5      	b.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	3361      	adds	r3, #97	; 0x61
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d009      	beq.n	80061dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	212c      	movs	r1, #44	; 0x2c
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	4413      	add	r3, r2
 80061d4:	3361      	adds	r3, #97	; 0x61
 80061d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d150      	bne.n	800627e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	212c      	movs	r1, #44	; 0x2c
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	335c      	adds	r3, #92	; 0x5c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	202c      	movs	r0, #44	; 0x2c
 80061f4:	fb00 f303 	mul.w	r3, r0, r3
 80061f8:	440b      	add	r3, r1
 80061fa:	335c      	adds	r3, #92	; 0x5c
 80061fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	212c      	movs	r1, #44	; 0x2c
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	4413      	add	r3, r2
 800620a:	335c      	adds	r3, #92	; 0x5c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d912      	bls.n	8006238 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	212c      	movs	r1, #44	; 0x2c
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	335c      	adds	r3, #92	; 0x5c
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	212c      	movs	r1, #44	; 0x2c
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	4413      	add	r3, r2
 8006230:	3360      	adds	r3, #96	; 0x60
 8006232:	2204      	movs	r2, #4
 8006234:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006236:	e073      	b.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	212c      	movs	r1, #44	; 0x2c
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	3360      	adds	r3, #96	; 0x60
 8006246:	2202      	movs	r2, #2
 8006248:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006260:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006268:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	461a      	mov	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800627c:	e050      	b.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3361      	adds	r3, #97	; 0x61
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b03      	cmp	r3, #3
 8006290:	d122      	bne.n	80062d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	212c      	movs	r1, #44	; 0x2c
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	3360      	adds	r3, #96	; 0x60
 80062a0:	2202      	movs	r2, #2
 80062a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e023      	b.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	212c      	movs	r1, #44	; 0x2c
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	3361      	adds	r3, #97	; 0x61
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	d119      	bne.n	8006320 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	212c      	movs	r1, #44	; 0x2c
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	335c      	adds	r3, #92	; 0x5c
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	202c      	movs	r0, #44	; 0x2c
 8006304:	fb00 f303 	mul.w	r3, r0, r3
 8006308:	440b      	add	r3, r1
 800630a:	335c      	adds	r3, #92	; 0x5c
 800630c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	212c      	movs	r1, #44	; 0x2c
 8006314:	fb01 f303 	mul.w	r3, r1, r3
 8006318:	4413      	add	r3, r2
 800631a:	3360      	adds	r3, #96	; 0x60
 800631c:	2204      	movs	r2, #4
 800631e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	2302      	movs	r3, #2
 8006330:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	b2d9      	uxtb	r1, r3
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	202c      	movs	r0, #44	; 0x2c
 800633c:	fb00 f303 	mul.w	r3, r0, r3
 8006340:	4413      	add	r3, r2
 8006342:	3360      	adds	r3, #96	; 0x60
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fd04 	bl	8005d56 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800634e:	e061      	b.n	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d156      	bne.n	8006414 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	212c      	movs	r1, #44	; 0x2c
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	333f      	adds	r3, #63	; 0x3f
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d111      	bne.n	800639e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	212c      	movs	r1, #44	; 0x2c
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	4413      	add	r3, r2
 8006386:	335c      	adds	r3, #92	; 0x5c
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f005 f9e7 	bl	800b76a <USB_HC_Halt>
 800639c:	e031      	b.n	8006402 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	212c      	movs	r1, #44	; 0x2c
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	333f      	adds	r3, #63	; 0x3f
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	212c      	movs	r1, #44	; 0x2c
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	333f      	adds	r3, #63	; 0x3f
 80063c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d11d      	bne.n	8006402 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	212c      	movs	r1, #44	; 0x2c
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	335c      	adds	r3, #92	; 0x5c
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	212c      	movs	r1, #44	; 0x2c
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	3361      	adds	r3, #97	; 0x61
 80063ee:	2203      	movs	r2, #3
 80063f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f005 f9b4 	bl	800b76a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	2310      	movs	r3, #16
 8006412:	6093      	str	r3, [r2, #8]
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d11a      	bne.n	8006482 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	2304      	movs	r3, #4
 800645c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	212c      	movs	r1, #44	; 0x2c
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	4413      	add	r3, r2
 800646a:	3361      	adds	r3, #97	; 0x61
 800646c:	2206      	movs	r2, #6
 800646e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f005 f975 	bl	800b76a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006480:	e331      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b20      	cmp	r3, #32
 8006496:	d12e      	bne.n	80064f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	461a      	mov	r2, r3
 80064a6:	2320      	movs	r3, #32
 80064a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	212c      	movs	r1, #44	; 0x2c
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	4413      	add	r3, r2
 80064b6:	333d      	adds	r3, #61	; 0x3d
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	f040 8313 	bne.w	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	333d      	adds	r3, #61	; 0x3d
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	212c      	movs	r1, #44	; 0x2c
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	3360      	adds	r3, #96	; 0x60
 80064e0:	2202      	movs	r2, #2
 80064e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f005 f93b 	bl	800b76a <USB_HC_Halt>
}
 80064f4:	e2f7      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d112      	bne.n	8006534 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	461a      	mov	r2, r3
 800651c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006520:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f005 f91c 	bl	800b76a <USB_HC_Halt>
}
 8006532:	e2d8      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d140      	bne.n	80065cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	212c      	movs	r1, #44	; 0x2c
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	335c      	adds	r3, #92	; 0x5c
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d111      	bne.n	8006596 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	212c      	movs	r1, #44	; 0x2c
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	333d      	adds	r3, #61	; 0x3d
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	461a      	mov	r2, r3
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	461a      	mov	r2, r3
 80065a4:	2301      	movs	r3, #1
 80065a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	212c      	movs	r1, #44	; 0x2c
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	3361      	adds	r3, #97	; 0x61
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	4611      	mov	r1, r2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f005 f8d0 	bl	800b76a <USB_HC_Halt>
}
 80065ca:	e28c      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d12c      	bne.n	800663c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	3361      	adds	r3, #97	; 0x61
 80065f0:	2204      	movs	r2, #4
 80065f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	212c      	movs	r1, #44	; 0x2c
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	333d      	adds	r3, #61	; 0x3d
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	212c      	movs	r1, #44	; 0x2c
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	4413      	add	r3, r2
 8006612:	335c      	adds	r3, #92	; 0x5c
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f005 f8a1 	bl	800b76a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	461a      	mov	r2, r3
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	6093      	str	r3, [r2, #8]
}
 800663a:	e254      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d11a      	bne.n	8006688 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	461a      	mov	r2, r3
 8006660:	2308      	movs	r3, #8
 8006662:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	212c      	movs	r1, #44	; 0x2c
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	3361      	adds	r3, #97	; 0x61
 8006672:	2205      	movs	r2, #5
 8006674:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f005 f872 	bl	800b76a <USB_HC_Halt>
}
 8006686:	e22e      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	4413      	add	r3, r2
 8006690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b10      	cmp	r3, #16
 800669c:	d140      	bne.n	8006720 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	212c      	movs	r1, #44	; 0x2c
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	335c      	adds	r3, #92	; 0x5c
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	212c      	movs	r1, #44	; 0x2c
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	4413      	add	r3, r2
 80066bc:	3361      	adds	r3, #97	; 0x61
 80066be:	2203      	movs	r2, #3
 80066c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	212c      	movs	r1, #44	; 0x2c
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	333d      	adds	r3, #61	; 0x3d
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d112      	bne.n	80066fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	212c      	movs	r1, #44	; 0x2c
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	333c      	adds	r3, #60	; 0x3c
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	212c      	movs	r1, #44	; 0x2c
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	333d      	adds	r3, #61	; 0x3d
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f005 f82f 	bl	800b76a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	461a      	mov	r2, r3
 800671a:	2310      	movs	r3, #16
 800671c:	6093      	str	r3, [r2, #8]
}
 800671e:	e1e2      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d164      	bne.n	8006800 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d111      	bne.n	8006762 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	212c      	movs	r1, #44	; 0x2c
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	3361      	adds	r3, #97	; 0x61
 800674c:	2206      	movs	r2, #6
 800674e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f005 f805 	bl	800b76a <USB_HC_Halt>
 8006760:	e044      	b.n	80067ec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	212c      	movs	r1, #44	; 0x2c
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	335c      	adds	r3, #92	; 0x5c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	202c      	movs	r0, #44	; 0x2c
 800677a:	fb00 f303 	mul.w	r3, r0, r3
 800677e:	440b      	add	r3, r1
 8006780:	335c      	adds	r3, #92	; 0x5c
 8006782:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	212c      	movs	r1, #44	; 0x2c
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	4413      	add	r3, r2
 8006790:	335c      	adds	r3, #92	; 0x5c
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d920      	bls.n	80067da <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	212c      	movs	r1, #44	; 0x2c
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	335c      	adds	r3, #92	; 0x5c
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	212c      	movs	r1, #44	; 0x2c
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	3360      	adds	r3, #96	; 0x60
 80067b8:	2204      	movs	r2, #4
 80067ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	b2d9      	uxtb	r1, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	202c      	movs	r0, #44	; 0x2c
 80067c6:	fb00 f303 	mul.w	r3, r0, r3
 80067ca:	4413      	add	r3, r2
 80067cc:	3360      	adds	r3, #96	; 0x60
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fabf 	bl	8005d56 <HAL_HCD_HC_NotifyURBChange_Callback>
 80067d8:	e008      	b.n	80067ec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	212c      	movs	r1, #44	; 0x2c
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	3360      	adds	r3, #96	; 0x60
 80067e8:	2202      	movs	r2, #2
 80067ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	461a      	mov	r2, r3
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	6093      	str	r3, [r2, #8]
}
 80067fe:	e172      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d11b      	bne.n	8006850 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	212c      	movs	r1, #44	; 0x2c
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	3361      	adds	r3, #97	; 0x61
 8006826:	2208      	movs	r2, #8
 8006828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	4611      	mov	r1, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f004 ff98 	bl	800b76a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	461a      	mov	r2, r3
 8006848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684c:	6093      	str	r3, [r2, #8]
}
 800684e:	e14a      	b.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b02      	cmp	r3, #2
 8006864:	f040 813f 	bne.w	8006ae6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	212c      	movs	r1, #44	; 0x2c
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	3361      	adds	r3, #97	; 0x61
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d17d      	bne.n	8006978 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	212c      	movs	r1, #44	; 0x2c
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	3360      	adds	r3, #96	; 0x60
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	212c      	movs	r1, #44	; 0x2c
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	333f      	adds	r3, #63	; 0x3f
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d00a      	beq.n	80068b8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	212c      	movs	r1, #44	; 0x2c
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	333f      	adds	r3, #63	; 0x3f
 80068b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	f040 8100 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d113      	bne.n	80068e8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	212c      	movs	r1, #44	; 0x2c
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	3355      	adds	r3, #85	; 0x55
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f083 0301 	eor.w	r3, r3, #1
 80068d4:	b2d8      	uxtb	r0, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	212c      	movs	r1, #44	; 0x2c
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	3355      	adds	r3, #85	; 0x55
 80068e4:	4602      	mov	r2, r0
 80068e6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 80e3 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	212c      	movs	r1, #44	; 0x2c
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	334c      	adds	r3, #76	; 0x4c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80d8 	beq.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	212c      	movs	r1, #44	; 0x2c
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	4413      	add	r3, r2
 8006914:	334c      	adds	r3, #76	; 0x4c
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	202c      	movs	r0, #44	; 0x2c
 800691e:	fb00 f202 	mul.w	r2, r0, r2
 8006922:	440a      	add	r2, r1
 8006924:	3240      	adds	r2, #64	; 0x40
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	4413      	add	r3, r2
 800692a:	3b01      	subs	r3, #1
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	202c      	movs	r0, #44	; 0x2c
 8006932:	fb00 f202 	mul.w	r2, r0, r2
 8006936:	440a      	add	r2, r1
 8006938:	3240      	adds	r2, #64	; 0x40
 800693a:	8812      	ldrh	r2, [r2, #0]
 800693c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80b5 	beq.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	212c      	movs	r1, #44	; 0x2c
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	4413      	add	r3, r2
 800695a:	3355      	adds	r3, #85	; 0x55
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f083 0301 	eor.w	r3, r3, #1
 8006962:	b2d8      	uxtb	r0, r3
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	3355      	adds	r3, #85	; 0x55
 8006972:	4602      	mov	r2, r0
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	e09f      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	212c      	movs	r1, #44	; 0x2c
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	4413      	add	r3, r2
 8006984:	3361      	adds	r3, #97	; 0x61
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d109      	bne.n	80069a0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	212c      	movs	r1, #44	; 0x2c
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	3360      	adds	r3, #96	; 0x60
 800699a:	2202      	movs	r2, #2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e08b      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	212c      	movs	r1, #44	; 0x2c
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	3361      	adds	r3, #97	; 0x61
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d109      	bne.n	80069c8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	212c      	movs	r1, #44	; 0x2c
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	3360      	adds	r3, #96	; 0x60
 80069c2:	2202      	movs	r2, #2
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e077      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	212c      	movs	r1, #44	; 0x2c
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	3361      	adds	r3, #97	; 0x61
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b05      	cmp	r3, #5
 80069da:	d109      	bne.n	80069f0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	212c      	movs	r1, #44	; 0x2c
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3360      	adds	r3, #96	; 0x60
 80069ea:	2205      	movs	r2, #5
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e063      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	212c      	movs	r1, #44	; 0x2c
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	3361      	adds	r3, #97	; 0x61
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b06      	cmp	r3, #6
 8006a02:	d009      	beq.n	8006a18 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	212c      	movs	r1, #44	; 0x2c
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	3361      	adds	r3, #97	; 0x61
 8006a12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d14f      	bne.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	212c      	movs	r1, #44	; 0x2c
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	4413      	add	r3, r2
 8006a24:	335c      	adds	r3, #92	; 0x5c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	202c      	movs	r0, #44	; 0x2c
 8006a30:	fb00 f303 	mul.w	r3, r0, r3
 8006a34:	440b      	add	r3, r1
 8006a36:	335c      	adds	r3, #92	; 0x5c
 8006a38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	212c      	movs	r1, #44	; 0x2c
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	4413      	add	r3, r2
 8006a46:	335c      	adds	r3, #92	; 0x5c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d912      	bls.n	8006a74 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	212c      	movs	r1, #44	; 0x2c
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	4413      	add	r3, r2
 8006a5a:	335c      	adds	r3, #92	; 0x5c
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	212c      	movs	r1, #44	; 0x2c
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3360      	adds	r3, #96	; 0x60
 8006a6e:	2204      	movs	r2, #4
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e021      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	212c      	movs	r1, #44	; 0x2c
 8006a7a:	fb01 f303 	mul.w	r3, r1, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	3360      	adds	r3, #96	; 0x60
 8006a82:	2202      	movs	r2, #2
 8006a84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a9c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	b2d9      	uxtb	r1, r3
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	202c      	movs	r0, #44	; 0x2c
 8006ad4:	fb00 f303 	mul.w	r3, r0, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	3360      	adds	r3, #96	; 0x60
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff f938 	bl	8005d56 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006ae6:	bf00      	nop
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b08a      	sub	sp, #40	; 0x28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	0c5b      	lsrs	r3, r3, #17
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d004      	beq.n	8006b34 <HCD_RXQLVL_IRQHandler+0x46>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	f000 80a9 	beq.w	8006c84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b32:	e0aa      	b.n	8006c8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80a6 	beq.w	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	212c      	movs	r1, #44	; 0x2c
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	3344      	adds	r3, #68	; 0x44
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 809b 	beq.w	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	212c      	movs	r1, #44	; 0x2c
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3350      	adds	r3, #80	; 0x50
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	441a      	add	r2, r3
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	202c      	movs	r0, #44	; 0x2c
 8006b6c:	fb00 f303 	mul.w	r3, r0, r3
 8006b70:	440b      	add	r3, r1
 8006b72:	334c      	adds	r3, #76	; 0x4c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d87a      	bhi.n	8006c70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	212c      	movs	r1, #44	; 0x2c
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	3344      	adds	r3, #68	; 0x44
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	b292      	uxth	r2, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	f004 fc30 	bl	800b3f8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	212c      	movs	r1, #44	; 0x2c
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3344      	adds	r3, #68	; 0x44
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	441a      	add	r2, r3
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	202c      	movs	r0, #44	; 0x2c
 8006bb2:	fb00 f303 	mul.w	r3, r0, r3
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3344      	adds	r3, #68	; 0x44
 8006bba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	212c      	movs	r1, #44	; 0x2c
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3350      	adds	r3, #80	; 0x50
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	441a      	add	r2, r3
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	202c      	movs	r0, #44	; 0x2c
 8006bd6:	fb00 f303 	mul.w	r3, r0, r3
 8006bda:	440b      	add	r3, r1
 8006bdc:	3350      	adds	r3, #80	; 0x50
 8006bde:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	0cdb      	lsrs	r3, r3, #19
 8006bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	212c      	movs	r1, #44	; 0x2c
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	3340      	adds	r3, #64	; 0x40
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d13c      	bne.n	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d039      	beq.n	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	461a      	mov	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	212c      	movs	r1, #44	; 0x2c
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	4413      	add	r3, r2
 8006c52:	3354      	adds	r3, #84	; 0x54
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f083 0301 	eor.w	r3, r3, #1
 8006c5a:	b2d8      	uxtb	r0, r3
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	212c      	movs	r1, #44	; 0x2c
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	3354      	adds	r3, #84	; 0x54
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	701a      	strb	r2, [r3, #0]
      break;
 8006c6e:	e00b      	b.n	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	212c      	movs	r1, #44	; 0x2c
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3360      	adds	r3, #96	; 0x60
 8006c7e:	2204      	movs	r2, #4
 8006c80:	701a      	strb	r2, [r3, #0]
      break;
 8006c82:	e001      	b.n	8006c88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006c88:	bf00      	nop
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cbe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d10b      	bne.n	8006ce2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d102      	bne.n	8006cda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff f816 	bl	8005d06 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f043 0302 	orr.w	r3, r3, #2
 8006ce0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d132      	bne.n	8006d52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f043 0308 	orr.w	r3, r3, #8
 8006cf2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d126      	bne.n	8006d4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d113      	bne.n	8006d2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d10:	d106      	bne.n	8006d20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f004 fcdb 	bl	800b6d4 <USB_InitFSLSPClkSel>
 8006d1e:	e011      	b.n	8006d44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	4618      	mov	r0, r3
 8006d28:	f004 fcd4 	bl	800b6d4 <USB_InitFSLSPClkSel>
 8006d2c:	e00a      	b.n	8006d44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d106      	bne.n	8006d44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fe fff2 	bl	8005d2e <HAL_HCD_PortEnabled_Callback>
 8006d4a:	e002      	b.n	8006d52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fe fff8 	bl	8005d42 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d103      	bne.n	8006d64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e12b      	b.n	8006fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa fb02 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ddc:	f002 f802 	bl	8008de4 <HAL_RCC_GetPCLK1Freq>
 8006de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4a81      	ldr	r2, [pc, #516]	; (8006fec <HAL_I2C_Init+0x274>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d807      	bhi.n	8006dfc <HAL_I2C_Init+0x84>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a80      	ldr	r2, [pc, #512]	; (8006ff0 <HAL_I2C_Init+0x278>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	bf94      	ite	ls
 8006df4:	2301      	movls	r3, #1
 8006df6:	2300      	movhi	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e006      	b.n	8006e0a <HAL_I2C_Init+0x92>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a7d      	ldr	r2, [pc, #500]	; (8006ff4 <HAL_I2C_Init+0x27c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bf94      	ite	ls
 8006e04:	2301      	movls	r3, #1
 8006e06:	2300      	movhi	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0e7      	b.n	8006fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a78      	ldr	r2, [pc, #480]	; (8006ff8 <HAL_I2C_Init+0x280>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	0c9b      	lsrs	r3, r3, #18
 8006e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a6a      	ldr	r2, [pc, #424]	; (8006fec <HAL_I2C_Init+0x274>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d802      	bhi.n	8006e4c <HAL_I2C_Init+0xd4>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	e009      	b.n	8006e60 <HAL_I2C_Init+0xe8>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	4a69      	ldr	r2, [pc, #420]	; (8006ffc <HAL_I2C_Init+0x284>)
 8006e58:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5c:	099b      	lsrs	r3, r3, #6
 8006e5e:	3301      	adds	r3, #1
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	495c      	ldr	r1, [pc, #368]	; (8006fec <HAL_I2C_Init+0x274>)
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	d819      	bhi.n	8006eb4 <HAL_I2C_Init+0x13c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	1e59      	subs	r1, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e94:	400b      	ands	r3, r1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_I2C_Init+0x138>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1e59      	subs	r1, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eae:	e051      	b.n	8006f54 <HAL_I2C_Init+0x1dc>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	e04f      	b.n	8006f54 <HAL_I2C_Init+0x1dc>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d111      	bne.n	8006ee0 <HAL_I2C_Init+0x168>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1e58      	subs	r0, r3, #1
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6859      	ldr	r1, [r3, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	440b      	add	r3, r1
 8006eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	e012      	b.n	8006f06 <HAL_I2C_Init+0x18e>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1e58      	subs	r0, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6859      	ldr	r1, [r3, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	0099      	lsls	r1, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf0c      	ite	eq
 8006f00:	2301      	moveq	r3, #1
 8006f02:	2300      	movne	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_I2C_Init+0x196>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e022      	b.n	8006f54 <HAL_I2C_Init+0x1dc>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10e      	bne.n	8006f34 <HAL_I2C_Init+0x1bc>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1e58      	subs	r0, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	440b      	add	r3, r1
 8006f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	e00f      	b.n	8006f54 <HAL_I2C_Init+0x1dc>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1e58      	subs	r0, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6859      	ldr	r1, [r3, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	0099      	lsls	r1, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	6809      	ldr	r1, [r1, #0]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6911      	ldr	r1, [r2, #16]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68d2      	ldr	r2, [r2, #12]
 8006f8e:	4311      	orrs	r1, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	000186a0 	.word	0x000186a0
 8006ff0:	001e847f 	.word	0x001e847f
 8006ff4:	003d08ff 	.word	0x003d08ff
 8006ff8:	431bde83 	.word	0x431bde83
 8006ffc:	10624dd3 	.word	0x10624dd3

08007000 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e021      	b.n	8007056 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2224      	movs	r2, #36	; 0x24
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa fa26 	bl	800147c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4603      	mov	r3, r0
 8007070:	817b      	strh	r3, [r7, #10]
 8007072:	460b      	mov	r3, r1
 8007074:	813b      	strh	r3, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800707a:	f7fd f95b 	bl	8004334 <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b20      	cmp	r3, #32
 800708a:	f040 80d9 	bne.w	8007240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2319      	movs	r3, #25
 8007094:	2201      	movs	r2, #1
 8007096:	496d      	ldr	r1, [pc, #436]	; (800724c <HAL_I2C_Mem_Write+0x1ec>)
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fc8d 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80070a4:	2302      	movs	r3, #2
 80070a6:	e0cc      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_I2C_Mem_Write+0x56>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0c5      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d007      	beq.n	80070dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2221      	movs	r2, #33	; 0x21
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2240      	movs	r2, #64	; 0x40
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a3a      	ldr	r2, [r7, #32]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800710c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a4d      	ldr	r2, [pc, #308]	; (8007250 <HAL_I2C_Mem_Write+0x1f0>)
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800711e:	88f8      	ldrh	r0, [r7, #6]
 8007120:	893a      	ldrh	r2, [r7, #8]
 8007122:	8979      	ldrh	r1, [r7, #10]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	4603      	mov	r3, r0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fac4 	bl	80076bc <I2C_RequestMemoryWrite>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d052      	beq.n	80071e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e081      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fd0e 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00d      	beq.n	800716a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	2b04      	cmp	r3, #4
 8007154:	d107      	bne.n	8007166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e06b      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	781a      	ldrb	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d11b      	bne.n	80071e0 <HAL_I2C_Mem_Write+0x180>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d017      	beq.n	80071e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1aa      	bne.n	800713e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fcfa 	bl	8007be6 <I2C_WaitOnBTFFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00d      	beq.n	8007214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d107      	bne.n	8007210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e016      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	00100002 	.word	0x00100002
 8007250:	ffff0000 	.word	0xffff0000

08007254 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08c      	sub	sp, #48	; 0x30
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	461a      	mov	r2, r3
 8007262:	4603      	mov	r3, r0
 8007264:	817b      	strh	r3, [r7, #10]
 8007266:	460b      	mov	r3, r1
 8007268:	813b      	strh	r3, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800726e:	f7fd f861 	bl	8004334 <HAL_GetTick>
 8007272:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b20      	cmp	r3, #32
 800727e:	f040 8208 	bne.w	8007692 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2319      	movs	r3, #25
 8007288:	2201      	movs	r2, #1
 800728a:	497b      	ldr	r1, [pc, #492]	; (8007478 <HAL_I2C_Mem_Read+0x224>)
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fb93 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
 800729a:	e1fb      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_I2C_Mem_Read+0x56>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e1f4      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d007      	beq.n	80072d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2222      	movs	r2, #34	; 0x22
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2240      	movs	r2, #64	; 0x40
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a5b      	ldr	r2, [pc, #364]	; (800747c <HAL_I2C_Mem_Read+0x228>)
 8007310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007312:	88f8      	ldrh	r0, [r7, #6]
 8007314:	893a      	ldrh	r2, [r7, #8]
 8007316:	8979      	ldrh	r1, [r7, #10]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	4603      	mov	r3, r0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fa60 	bl	80077e8 <I2C_RequestMemoryRead>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e1b0      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	d113      	bne.n	8007362 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733a:	2300      	movs	r3, #0
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e184      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007366:	2b01      	cmp	r3, #1
 8007368:	d11b      	bne.n	80073a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737a:	2300      	movs	r3, #0
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e164      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d11b      	bne.n	80073e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	e144      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073f8:	e138      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f200 80f1 	bhi.w	80075e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	2b01      	cmp	r3, #1
 800740a:	d123      	bne.n	8007454 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800740c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fc29 	bl	8007c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e139      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007452:	e10b      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007458:	2b02      	cmp	r3, #2
 800745a:	d14e      	bne.n	80074fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	2200      	movs	r2, #0
 8007464:	4906      	ldr	r1, [pc, #24]	; (8007480 <HAL_I2C_Mem_Read+0x22c>)
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 faa6 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e10e      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
 8007476:	bf00      	nop
 8007478:	00100002 	.word	0x00100002
 800747c:	ffff0000 	.word	0xffff0000
 8007480:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074f8:	e0b8      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	2200      	movs	r2, #0
 8007502:	4966      	ldr	r1, [pc, #408]	; (800769c <HAL_I2C_Mem_Read+0x448>)
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fa57 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0bf      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2200      	movs	r2, #0
 800755e:	494f      	ldr	r1, [pc, #316]	; (800769c <HAL_I2C_Mem_Read+0x448>)
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fa29 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e091      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800757e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075e4:	e042      	b.n	800766c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fb3c 	bl	8007c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e04c      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d118      	bne.n	800766c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007670:	2b00      	cmp	r3, #0
 8007672:	f47f aec2 	bne.w	80073fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e000      	b.n	8007694 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
  }
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	00010004 	.word	0x00010004

080076a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ae:	b2db      	uxtb	r3, r3
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	817b      	strh	r3, [r7, #10]
 80076ce:	460b      	mov	r3, r1
 80076d0:	813b      	strh	r3, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f960 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d103      	bne.n	8007716 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e05f      	b.n	80077da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	492d      	ldr	r1, [pc, #180]	; (80077e4 <I2C_RequestMemoryWrite+0x128>)
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f998 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e04c      	b.n	80077da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007758:	6a39      	ldr	r1, [r7, #32]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa02 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b04      	cmp	r3, #4
 800776c:	d107      	bne.n	800777e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e02b      	b.n	80077da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d105      	bne.n	8007794 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007788:	893b      	ldrh	r3, [r7, #8]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	611a      	str	r2, [r3, #16]
 8007792:	e021      	b.n	80077d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007794:	893b      	ldrh	r3, [r7, #8]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	6a39      	ldr	r1, [r7, #32]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f9dc 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d107      	bne.n	80077ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e005      	b.n	80077da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077ce:	893b      	ldrh	r3, [r7, #8]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	00010002 	.word	0x00010002

080077e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	461a      	mov	r2, r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	817b      	strh	r3, [r7, #10]
 80077fa:	460b      	mov	r3, r1
 80077fc:	813b      	strh	r3, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007810:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	2200      	movs	r2, #0
 800782a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f8c2 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007848:	d103      	bne.n	8007852 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e0aa      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007856:	897b      	ldrh	r3, [r7, #10]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	4952      	ldr	r1, [pc, #328]	; (80079b4 <I2C_RequestMemoryRead+0x1cc>)
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f8fa 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e097      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007894:	6a39      	ldr	r1, [r7, #32]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f964 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d107      	bne.n	80078ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e076      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d105      	bne.n	80078d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	611a      	str	r2, [r3, #16]
 80078ce:	e021      	b.n	8007914 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078d0:	893b      	ldrh	r3, [r7, #8]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e0:	6a39      	ldr	r1, [r7, #32]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f93e 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d107      	bne.n	8007906 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e050      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800790a:	893b      	ldrh	r3, [r7, #8]
 800790c:	b2da      	uxtb	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007916:	6a39      	ldr	r1, [r7, #32]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f923 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	2b04      	cmp	r3, #4
 800792a:	d107      	bne.n	800793c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e035      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	2200      	movs	r2, #0
 8007958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f82b 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007976:	d103      	bne.n	8007980 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800797e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e013      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	4906      	ldr	r1, [pc, #24]	; (80079b4 <I2C_RequestMemoryRead+0x1cc>)
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f863 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	00010002 	.word	0x00010002

080079b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c8:	e025      	b.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d021      	beq.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fc fcaf 	bl	8004334 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e023      	b.n	8007a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10d      	bne.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	e00c      	b.n	8007a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	43da      	mvns	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4013      	ands	r3, r2
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d0b6      	beq.n	80079ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a74:	e051      	b.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a84:	d123      	bne.n	8007ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f043 0204 	orr.w	r2, r3, #4
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e046      	b.n	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d021      	beq.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7fc fc2d 	bl	8004334 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d116      	bne.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e020      	b.n	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d10c      	bne.n	8007b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	43da      	mvns	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	e00b      	b.n	8007b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	43da      	mvns	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf14      	ite	ne
 8007b50:	2301      	movne	r3, #1
 8007b52:	2300      	moveq	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d18d      	bne.n	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b70:	e02d      	b.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f8ce 	bl	8007d14 <I2C_IsAcknowledgeFailed>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e02d      	b.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d021      	beq.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fc fbd3 	bl	8004334 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e007      	b.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d1ca      	bne.n	8007b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bf2:	e02d      	b.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f88d 	bl	8007d14 <I2C_IsAcknowledgeFailed>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e02d      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d021      	beq.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0c:	f7fc fb92 	bl	8004334 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d302      	bcc.n	8007c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d116      	bne.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e007      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d1ca      	bne.n	8007bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c74:	e042      	b.n	8007cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d119      	bne.n	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0210 	mvn.w	r2, #16
 8007c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e029      	b.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb8:	f7fc fb3c 	bl	8004334 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d116      	bne.n	8007cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce8:	f043 0220 	orr.w	r2, r3, #32
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e007      	b.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d1b5      	bne.n	8007c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d2a:	d11b      	bne.n	8007d64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	f043 0204 	orr.w	r2, r3, #4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d129      	bne.n	8007ddc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2224      	movs	r2, #36	; 0x24
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0210 	bic.w	r2, r2, #16
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e000      	b.n	8007dde <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007ddc:	2302      	movs	r3, #2
  }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d12a      	bne.n	8007e5a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2224      	movs	r2, #36	; 0x24
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0201 	bic.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007e24:	89fb      	ldrh	r3, [r7, #14]
 8007e26:	f023 030f 	bic.w	r3, r3, #15
 8007e2a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	89fa      	ldrh	r2, [r7, #14]
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e0bf      	b.n	8007ffa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7f9 fbca 	bl	8001628 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007eaa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6999      	ldr	r1, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ec0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6899      	ldr	r1, [r3, #8]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <HAL_LTDC_Init+0x19c>)
 8007edc:	400b      	ands	r3, r1
 8007ede:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68d9      	ldr	r1, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b3e      	ldr	r3, [pc, #248]	; (8008004 <HAL_LTDC_Init+0x19c>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68d9      	ldr	r1, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6919      	ldr	r1, [r3, #16]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b33      	ldr	r3, [pc, #204]	; (8008004 <HAL_LTDC_Init+0x19c>)
 8007f38:	400b      	ands	r3, r1
 8007f3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6919      	ldr	r1, [r3, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	431a      	orrs	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6959      	ldr	r1, [r3, #20]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <HAL_LTDC_Init+0x19c>)
 8007f66:	400b      	ands	r3, r1
 8007f68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6959      	ldr	r1, [r3, #20]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0206 	orr.w	r2, r2, #6
 8007fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	f000f800 	.word	0xf000f800

08008008 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008008:	b5b0      	push	{r4, r5, r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_LTDC_ConfigLayer+0x1a>
 800801e:	2302      	movs	r3, #2
 8008020:	e02c      	b.n	800807c <HAL_LTDC_ConfigLayer+0x74>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2134      	movs	r1, #52	; 0x34
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4614      	mov	r4, r2
 8008046:	461d      	mov	r5, r3
 8008048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800804a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800804e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f8b9 	bl	80081d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bdb0      	pop	{r4, r5, r7, pc}

08008084 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_LTDC_ConfigColorKeying+0x1a>
 800809a:	2302      	movs	r3, #2
 800809c:	e030      	b.n	8008100 <HAL_LTDC_ConfigColorKeying+0x7c>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	01db      	lsls	r3, r3, #7
 80080b8:	4413      	add	r3, r2
 80080ba:	3384      	adds	r3, #132	; 0x84
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	4611      	mov	r1, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	01d2      	lsls	r2, r2, #7
 80080c8:	440a      	add	r2, r1
 80080ca:	3284      	adds	r2, #132	; 0x84
 80080cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080d0:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	01db      	lsls	r3, r3, #7
 80080dc:	4413      	add	r3, r2
 80080de:	3384      	adds	r3, #132	; 0x84
 80080e0:	461a      	mov	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2201      	movs	r2, #1
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_LTDC_EnableColorKeying+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e026      	b.n	8008172 <HAL_LTDC_EnableColorKeying+0x66>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	01db      	lsls	r3, r3, #7
 800813e:	4413      	add	r3, r2
 8008140:	3384      	adds	r3, #132	; 0x84
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	4611      	mov	r1, r2
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	01d2      	lsls	r2, r2, #7
 800814e:	440a      	add	r2, r1
 8008150:	3284      	adds	r2, #132	; 0x84
 8008152:	f043 0302 	orr.w	r3, r3, #2
 8008156:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2201      	movs	r2, #1
 800815e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_LTDC_EnableDither+0x16>
 8008192:	2302      	movs	r3, #2
 8008194:	e016      	b.n	80081c4 <HAL_LTDC_EnableDither+0x44>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <HAL_LTDC_EnableDither+0x50>)
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <HAL_LTDC_EnableDither+0x50>)
 80081ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40016800 	.word	0x40016800

080081d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f0:	4413      	add	r3, r2
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	01db      	lsls	r3, r3, #7
 8008200:	4413      	add	r3, r2
 8008202:	3384      	adds	r3, #132	; 0x84
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	4611      	mov	r1, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	01d2      	lsls	r2, r2, #7
 8008210:	440a      	add	r2, r1
 8008212:	3284      	adds	r2, #132	; 0x84
 8008214:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008218:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	0c1b      	lsrs	r3, r3, #16
 8008226:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800822a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800822c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4619      	mov	r1, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	01db      	lsls	r3, r3, #7
 8008238:	440b      	add	r3, r1
 800823a:	3384      	adds	r3, #132	; 0x84
 800823c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008242:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008252:	4413      	add	r3, r2
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	01db      	lsls	r3, r3, #7
 8008262:	4413      	add	r3, r2
 8008264:	3384      	adds	r3, #132	; 0x84
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	4611      	mov	r1, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	01d2      	lsls	r2, r2, #7
 8008272:	440a      	add	r2, r1
 8008274:	3284      	adds	r2, #132	; 0x84
 8008276:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800827a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800828a:	4413      	add	r3, r2
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4619      	mov	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	01db      	lsls	r3, r3, #7
 8008298:	440b      	add	r3, r1
 800829a:	3384      	adds	r3, #132	; 0x84
 800829c:	4619      	mov	r1, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	01db      	lsls	r3, r3, #7
 80082ae:	4413      	add	r3, r2
 80082b0:	3384      	adds	r3, #132	; 0x84
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	4611      	mov	r1, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	01d2      	lsls	r2, r2, #7
 80082be:	440a      	add	r2, r1
 80082c0:	3284      	adds	r2, #132	; 0x84
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	01db      	lsls	r3, r3, #7
 80082d2:	4413      	add	r3, r2
 80082d4:	3384      	adds	r3, #132	; 0x84
 80082d6:	461a      	mov	r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	061b      	lsls	r3, r3, #24
 80082f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	01db      	lsls	r3, r3, #7
 8008304:	4413      	add	r3, r2
 8008306:	3384      	adds	r3, #132	; 0x84
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	01db      	lsls	r3, r3, #7
 8008314:	4413      	add	r3, r2
 8008316:	3384      	adds	r3, #132	; 0x84
 8008318:	461a      	mov	r2, r3
 800831a:	2300      	movs	r3, #0
 800831c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008324:	461a      	mov	r2, r3
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	431a      	orrs	r2, r3
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	431a      	orrs	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	440b      	add	r3, r1
 800833a:	3384      	adds	r3, #132	; 0x84
 800833c:	4619      	mov	r1, r3
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	01db      	lsls	r3, r3, #7
 800834e:	4413      	add	r3, r2
 8008350:	3384      	adds	r3, #132	; 0x84
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	4611      	mov	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	01d2      	lsls	r2, r2, #7
 800835e:	440a      	add	r2, r1
 8008360:	3284      	adds	r2, #132	; 0x84
 8008362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008366:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	01db      	lsls	r3, r3, #7
 8008372:	4413      	add	r3, r2
 8008374:	3384      	adds	r3, #132	; 0x84
 8008376:	461a      	mov	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	01db      	lsls	r3, r3, #7
 8008388:	4413      	add	r3, r2
 800838a:	3384      	adds	r3, #132	; 0x84
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	4611      	mov	r1, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	01d2      	lsls	r2, r2, #7
 8008398:	440a      	add	r2, r1
 800839a:	3284      	adds	r2, #132	; 0x84
 800839c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80083a0:	f023 0307 	bic.w	r3, r3, #7
 80083a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	6809      	ldr	r1, [r1, #0]
 80083b2:	4608      	mov	r0, r1
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	01c9      	lsls	r1, r1, #7
 80083b8:	4401      	add	r1, r0
 80083ba:	3184      	adds	r1, #132	; 0x84
 80083bc:	4313      	orrs	r3, r2
 80083be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	01db      	lsls	r3, r3, #7
 80083ca:	4413      	add	r3, r2
 80083cc:	3384      	adds	r3, #132	; 0x84
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	01db      	lsls	r3, r3, #7
 80083da:	4413      	add	r3, r2
 80083dc:	3384      	adds	r3, #132	; 0x84
 80083de:	461a      	mov	r2, r3
 80083e0:	2300      	movs	r3, #0
 80083e2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	01db      	lsls	r3, r3, #7
 80083ee:	4413      	add	r3, r2
 80083f0:	3384      	adds	r3, #132	; 0x84
 80083f2:	461a      	mov	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008402:	2304      	movs	r3, #4
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e01b      	b.n	8008440 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d102      	bne.n	8008416 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008410:	2303      	movs	r3, #3
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	e014      	b.n	8008440 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d00b      	beq.n	8008436 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008422:	2b02      	cmp	r3, #2
 8008424:	d007      	beq.n	8008436 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800842a:	2b03      	cmp	r3, #3
 800842c:	d003      	beq.n	8008436 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008432:	2b07      	cmp	r3, #7
 8008434:	d102      	bne.n	800843c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008436:	2302      	movs	r3, #2
 8008438:	61fb      	str	r3, [r7, #28]
 800843a:	e001      	b.n	8008440 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800843c:	2301      	movs	r3, #1
 800843e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	01db      	lsls	r3, r3, #7
 800844a:	4413      	add	r3, r2
 800844c:	3384      	adds	r3, #132	; 0x84
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	6812      	ldr	r2, [r2, #0]
 8008454:	4611      	mov	r1, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	01d2      	lsls	r2, r2, #7
 800845a:	440a      	add	r2, r1
 800845c:	3284      	adds	r2, #132	; 0x84
 800845e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008462:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6859      	ldr	r1, [r3, #4]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	1acb      	subs	r3, r1, r3
 800847a:	69f9      	ldr	r1, [r7, #28]
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	6809      	ldr	r1, [r1, #0]
 8008486:	4608      	mov	r0, r1
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	01c9      	lsls	r1, r1, #7
 800848c:	4401      	add	r1, r0
 800848e:	3184      	adds	r1, #132	; 0x84
 8008490:	4313      	orrs	r3, r2
 8008492:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	01db      	lsls	r3, r3, #7
 800849e:	4413      	add	r3, r2
 80084a0:	3384      	adds	r3, #132	; 0x84
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	4611      	mov	r1, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	01d2      	lsls	r2, r2, #7
 80084ae:	440a      	add	r2, r1
 80084b0:	3284      	adds	r2, #132	; 0x84
 80084b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	01db      	lsls	r3, r3, #7
 80084c6:	4413      	add	r3, r2
 80084c8:	3384      	adds	r3, #132	; 0x84
 80084ca:	461a      	mov	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	4413      	add	r3, r2
 80084de:	3384      	adds	r3, #132	; 0x84
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	4611      	mov	r1, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	01d2      	lsls	r2, r2, #7
 80084ec:	440a      	add	r2, r1
 80084ee:	3284      	adds	r2, #132	; 0x84
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	6013      	str	r3, [r2, #0]
}
 80084f6:	bf00      	nop
 80084f8:	3724      	adds	r7, #36	; 0x24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e267      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d075      	beq.n	800860e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008522:	4b88      	ldr	r3, [pc, #544]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 030c 	and.w	r3, r3, #12
 800852a:	2b04      	cmp	r3, #4
 800852c:	d00c      	beq.n	8008548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800852e:	4b85      	ldr	r3, [pc, #532]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008536:	2b08      	cmp	r3, #8
 8008538:	d112      	bne.n	8008560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800853a:	4b82      	ldr	r3, [pc, #520]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008546:	d10b      	bne.n	8008560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008548:	4b7e      	ldr	r3, [pc, #504]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05b      	beq.n	800860c <HAL_RCC_OscConfig+0x108>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d157      	bne.n	800860c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e242      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008568:	d106      	bne.n	8008578 <HAL_RCC_OscConfig+0x74>
 800856a:	4b76      	ldr	r3, [pc, #472]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a75      	ldr	r2, [pc, #468]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e01d      	b.n	80085b4 <HAL_RCC_OscConfig+0xb0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008580:	d10c      	bne.n	800859c <HAL_RCC_OscConfig+0x98>
 8008582:	4b70      	ldr	r3, [pc, #448]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a6f      	ldr	r2, [pc, #444]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	4b6d      	ldr	r3, [pc, #436]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a6c      	ldr	r2, [pc, #432]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	e00b      	b.n	80085b4 <HAL_RCC_OscConfig+0xb0>
 800859c:	4b69      	ldr	r3, [pc, #420]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a68      	ldr	r2, [pc, #416]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80085a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4b66      	ldr	r3, [pc, #408]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a65      	ldr	r2, [pc, #404]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80085ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d013      	beq.n	80085e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085bc:	f7fb feba 	bl	8004334 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085c4:	f7fb feb6 	bl	8004334 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b64      	cmp	r3, #100	; 0x64
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e207      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085d6:	4b5b      	ldr	r3, [pc, #364]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0f0      	beq.n	80085c4 <HAL_RCC_OscConfig+0xc0>
 80085e2:	e014      	b.n	800860e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e4:	f7fb fea6 	bl	8004334 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085ec:	f7fb fea2 	bl	8004334 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b64      	cmp	r3, #100	; 0x64
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e1f3      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085fe:	4b51      	ldr	r3, [pc, #324]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <HAL_RCC_OscConfig+0xe8>
 800860a:	e000      	b.n	800860e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800860c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d063      	beq.n	80086e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800861a:	4b4a      	ldr	r3, [pc, #296]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 030c 	and.w	r3, r3, #12
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008626:	4b47      	ldr	r3, [pc, #284]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800862e:	2b08      	cmp	r3, #8
 8008630:	d11c      	bne.n	800866c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008632:	4b44      	ldr	r3, [pc, #272]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d116      	bne.n	800866c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800863e:	4b41      	ldr	r3, [pc, #260]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_RCC_OscConfig+0x152>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d001      	beq.n	8008656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e1c7      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008656:	4b3b      	ldr	r3, [pc, #236]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4937      	ldr	r1, [pc, #220]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008666:	4313      	orrs	r3, r2
 8008668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800866a:	e03a      	b.n	80086e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d020      	beq.n	80086b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008674:	4b34      	ldr	r3, [pc, #208]	; (8008748 <HAL_RCC_OscConfig+0x244>)
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867a:	f7fb fe5b 	bl	8004334 <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008682:	f7fb fe57 	bl	8004334 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e1a8      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008694:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a0:	4b28      	ldr	r3, [pc, #160]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	4925      	ldr	r1, [pc, #148]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	600b      	str	r3, [r1, #0]
 80086b4:	e015      	b.n	80086e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <HAL_RCC_OscConfig+0x244>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fb fe3a 	bl	8004334 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086c4:	f7fb fe36 	bl	8004334 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e187      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1f0      	bne.n	80086c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0308 	and.w	r3, r3, #8
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d036      	beq.n	800875c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d016      	beq.n	8008724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086f6:	4b15      	ldr	r3, [pc, #84]	; (800874c <HAL_RCC_OscConfig+0x248>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fc:	f7fb fe1a 	bl	8004334 <HAL_GetTick>
 8008700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008704:	f7fb fe16 	bl	8004334 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e167      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008716:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_RCC_OscConfig+0x240>)
 8008718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f0      	beq.n	8008704 <HAL_RCC_OscConfig+0x200>
 8008722:	e01b      	b.n	800875c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008724:	4b09      	ldr	r3, [pc, #36]	; (800874c <HAL_RCC_OscConfig+0x248>)
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800872a:	f7fb fe03 	bl	8004334 <HAL_GetTick>
 800872e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008730:	e00e      	b.n	8008750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008732:	f7fb fdff 	bl	8004334 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d907      	bls.n	8008750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e150      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
 8008744:	40023800 	.word	0x40023800
 8008748:	42470000 	.word	0x42470000
 800874c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008750:	4b88      	ldr	r3, [pc, #544]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1ea      	bne.n	8008732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8097 	beq.w	8008898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800876e:	4b81      	ldr	r3, [pc, #516]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10f      	bne.n	800879a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	4b7d      	ldr	r3, [pc, #500]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	4a7c      	ldr	r2, [pc, #496]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008788:	6413      	str	r3, [r2, #64]	; 0x40
 800878a:	4b7a      	ldr	r3, [pc, #488]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008792:	60bb      	str	r3, [r7, #8]
 8008794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008796:	2301      	movs	r3, #1
 8008798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800879a:	4b77      	ldr	r3, [pc, #476]	; (8008978 <HAL_RCC_OscConfig+0x474>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d118      	bne.n	80087d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <HAL_RCC_OscConfig+0x474>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a73      	ldr	r2, [pc, #460]	; (8008978 <HAL_RCC_OscConfig+0x474>)
 80087ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087b2:	f7fb fdbf 	bl	8004334 <HAL_GetTick>
 80087b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ba:	f7fb fdbb 	bl	8004334 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e10c      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087cc:	4b6a      	ldr	r3, [pc, #424]	; (8008978 <HAL_RCC_OscConfig+0x474>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f0      	beq.n	80087ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d106      	bne.n	80087ee <HAL_RCC_OscConfig+0x2ea>
 80087e0:	4b64      	ldr	r3, [pc, #400]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	4a63      	ldr	r2, [pc, #396]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6713      	str	r3, [r2, #112]	; 0x70
 80087ec:	e01c      	b.n	8008828 <HAL_RCC_OscConfig+0x324>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d10c      	bne.n	8008810 <HAL_RCC_OscConfig+0x30c>
 80087f6:	4b5f      	ldr	r3, [pc, #380]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	4a5e      	ldr	r2, [pc, #376]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80087fc:	f043 0304 	orr.w	r3, r3, #4
 8008800:	6713      	str	r3, [r2, #112]	; 0x70
 8008802:	4b5c      	ldr	r3, [pc, #368]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	4a5b      	ldr	r2, [pc, #364]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008808:	f043 0301 	orr.w	r3, r3, #1
 800880c:	6713      	str	r3, [r2, #112]	; 0x70
 800880e:	e00b      	b.n	8008828 <HAL_RCC_OscConfig+0x324>
 8008810:	4b58      	ldr	r3, [pc, #352]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	4a57      	ldr	r2, [pc, #348]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008816:	f023 0301 	bic.w	r3, r3, #1
 800881a:	6713      	str	r3, [r2, #112]	; 0x70
 800881c:	4b55      	ldr	r3, [pc, #340]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800881e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008820:	4a54      	ldr	r2, [pc, #336]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008822:	f023 0304 	bic.w	r3, r3, #4
 8008826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d015      	beq.n	800885c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008830:	f7fb fd80 	bl	8004334 <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008836:	e00a      	b.n	800884e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008838:	f7fb fd7c 	bl	8004334 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	f241 3288 	movw	r2, #5000	; 0x1388
 8008846:	4293      	cmp	r3, r2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e0cb      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800884e:	4b49      	ldr	r3, [pc, #292]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0ee      	beq.n	8008838 <HAL_RCC_OscConfig+0x334>
 800885a:	e014      	b.n	8008886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800885c:	f7fb fd6a 	bl	8004334 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008862:	e00a      	b.n	800887a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008864:	f7fb fd66 	bl	8004334 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008872:	4293      	cmp	r3, r2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e0b5      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800887a:	4b3e      	ldr	r3, [pc, #248]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1ee      	bne.n	8008864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d105      	bne.n	8008898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800888c:	4b39      	ldr	r3, [pc, #228]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	4a38      	ldr	r2, [pc, #224]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80a1 	beq.w	80089e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088a2:	4b34      	ldr	r3, [pc, #208]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 030c 	and.w	r3, r3, #12
 80088aa:	2b08      	cmp	r3, #8
 80088ac:	d05c      	beq.n	8008968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d141      	bne.n	800893a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b6:	4b31      	ldr	r3, [pc, #196]	; (800897c <HAL_RCC_OscConfig+0x478>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088bc:	f7fb fd3a 	bl	8004334 <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c2:	e008      	b.n	80088d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088c4:	f7fb fd36 	bl	8004334 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e087      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088d6:	4b27      	ldr	r3, [pc, #156]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f0      	bne.n	80088c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69da      	ldr	r2, [r3, #28]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	019b      	lsls	r3, r3, #6
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	3b01      	subs	r3, #1
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	491b      	ldr	r1, [pc, #108]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 8008908:	4313      	orrs	r3, r2
 800890a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800890c:	4b1b      	ldr	r3, [pc, #108]	; (800897c <HAL_RCC_OscConfig+0x478>)
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008912:	f7fb fd0f 	bl	8004334 <HAL_GetTick>
 8008916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008918:	e008      	b.n	800892c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800891a:	f7fb fd0b 	bl	8004334 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e05c      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800892c:	4b11      	ldr	r3, [pc, #68]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <HAL_RCC_OscConfig+0x416>
 8008938:	e054      	b.n	80089e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <HAL_RCC_OscConfig+0x478>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008940:	f7fb fcf8 	bl	8004334 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008948:	f7fb fcf4 	bl	8004334 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e045      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_RCC_OscConfig+0x470>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f0      	bne.n	8008948 <HAL_RCC_OscConfig+0x444>
 8008966:	e03d      	b.n	80089e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d107      	bne.n	8008980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e038      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
 8008974:	40023800 	.word	0x40023800
 8008978:	40007000 	.word	0x40007000
 800897c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008980:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <HAL_RCC_OscConfig+0x4ec>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d028      	beq.n	80089e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008998:	429a      	cmp	r2, r3
 800899a:	d121      	bne.n	80089e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d11a      	bne.n	80089e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089b0:	4013      	ands	r3, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d111      	bne.n	80089e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	3b01      	subs	r3, #1
 80089ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d107      	bne.n	80089e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089dc:	429a      	cmp	r2, r3
 80089de:	d001      	beq.n	80089e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40023800 	.word	0x40023800

080089f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0cc      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a08:	4b68      	ldr	r3, [pc, #416]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d90c      	bls.n	8008a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a16:	4b65      	ldr	r3, [pc, #404]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1e:	4b63      	ldr	r3, [pc, #396]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d001      	beq.n	8008a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0b8      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d020      	beq.n	8008a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a48:	4b59      	ldr	r3, [pc, #356]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	4a58      	ldr	r2, [pc, #352]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a60:	4b53      	ldr	r3, [pc, #332]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4a52      	ldr	r2, [pc, #328]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a6c:	4b50      	ldr	r3, [pc, #320]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	494d      	ldr	r1, [pc, #308]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d044      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d107      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a92:	4b47      	ldr	r3, [pc, #284]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d119      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e07f      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d003      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d107      	bne.n	8008ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ab2:	4b3f      	ldr	r3, [pc, #252]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e06f      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ac2:	4b3b      	ldr	r3, [pc, #236]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e067      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ad2:	4b37      	ldr	r3, [pc, #220]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f023 0203 	bic.w	r2, r3, #3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	4934      	ldr	r1, [pc, #208]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ae4:	f7fb fc26 	bl	8004334 <HAL_GetTick>
 8008ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aea:	e00a      	b.n	8008b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aec:	f7fb fc22 	bl	8004334 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e04f      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b02:	4b2b      	ldr	r3, [pc, #172]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 020c 	and.w	r2, r3, #12
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d1eb      	bne.n	8008aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d20c      	bcs.n	8008b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b2a:	4b20      	ldr	r3, [pc, #128]	; (8008bac <HAL_RCC_ClockConfig+0x1b8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d001      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e032      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4916      	ldr	r1, [pc, #88]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b66:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b7a:	f000 f821 	bl	8008bc0 <HAL_RCC_GetSysClockFreq>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	490a      	ldr	r1, [pc, #40]	; (8008bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8008b8c:	5ccb      	ldrb	r3, [r1, r3]
 8008b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b92:	4a09      	ldr	r2, [pc, #36]	; (8008bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8008b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <HAL_RCC_ClockConfig+0x1c8>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f9 f924 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40023c00 	.word	0x40023c00
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	0800c3e0 	.word	0x0800c3e0
 8008bb8:	20000008 	.word	0x20000008
 8008bbc:	20000088 	.word	0x20000088

08008bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc4:	b094      	sub	sp, #80	; 0x50
 8008bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44
 8008bcc:	2300      	movs	r3, #0
 8008bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bd8:	4b79      	ldr	r3, [pc, #484]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f003 030c 	and.w	r3, r3, #12
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d00d      	beq.n	8008c00 <HAL_RCC_GetSysClockFreq+0x40>
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	f200 80e1 	bhi.w	8008dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8008bf2:	e0db      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bf4:	4b73      	ldr	r3, [pc, #460]	; (8008dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bf8:	e0db      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bfa:	4b73      	ldr	r3, [pc, #460]	; (8008dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bfe:	e0d8      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c00:	4b6f      	ldr	r3, [pc, #444]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c0a:	4b6d      	ldr	r3, [pc, #436]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d063      	beq.n	8008cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c16:	4b6a      	ldr	r3, [pc, #424]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	099b      	lsrs	r3, r3, #6
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c32:	4622      	mov	r2, r4
 8008c34:	462b      	mov	r3, r5
 8008c36:	f04f 0000 	mov.w	r0, #0
 8008c3a:	f04f 0100 	mov.w	r1, #0
 8008c3e:	0159      	lsls	r1, r3, #5
 8008c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c44:	0150      	lsls	r0, r2, #5
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	1a51      	subs	r1, r2, r1
 8008c4e:	6139      	str	r1, [r7, #16]
 8008c50:	4629      	mov	r1, r5
 8008c52:	eb63 0301 	sbc.w	r3, r3, r1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c64:	4659      	mov	r1, fp
 8008c66:	018b      	lsls	r3, r1, #6
 8008c68:	4651      	mov	r1, sl
 8008c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c6e:	4651      	mov	r1, sl
 8008c70:	018a      	lsls	r2, r1, #6
 8008c72:	4651      	mov	r1, sl
 8008c74:	ebb2 0801 	subs.w	r8, r2, r1
 8008c78:	4659      	mov	r1, fp
 8008c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c92:	4690      	mov	r8, r2
 8008c94:	4699      	mov	r9, r3
 8008c96:	4623      	mov	r3, r4
 8008c98:	eb18 0303 	adds.w	r3, r8, r3
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	eb49 0303 	adc.w	r3, r9, r3
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	024b      	lsls	r3, r1, #9
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	024a      	lsls	r2, r1, #9
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cd0:	f7f7 fae6 	bl	80002a0 <__aeabi_uldivmod>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4613      	mov	r3, r2
 8008cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cdc:	e058      	b.n	8008d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cde:	4b38      	ldr	r3, [pc, #224]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	099b      	lsrs	r3, r3, #6
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	4611      	mov	r1, r2
 8008cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cee:	623b      	str	r3, [r7, #32]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	f04f 0000 	mov.w	r0, #0
 8008d00:	f04f 0100 	mov.w	r1, #0
 8008d04:	0159      	lsls	r1, r3, #5
 8008d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d0a:	0150      	lsls	r0, r2, #5
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4641      	mov	r1, r8
 8008d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d16:	4649      	mov	r1, r9
 8008d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d30:	ebb2 040a 	subs.w	r4, r2, sl
 8008d34:	eb63 050b 	sbc.w	r5, r3, fp
 8008d38:	f04f 0200 	mov.w	r2, #0
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	00eb      	lsls	r3, r5, #3
 8008d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d46:	00e2      	lsls	r2, r4, #3
 8008d48:	4614      	mov	r4, r2
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	4643      	mov	r3, r8
 8008d4e:	18e3      	adds	r3, r4, r3
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	464b      	mov	r3, r9
 8008d54:	eb45 0303 	adc.w	r3, r5, r3
 8008d58:	607b      	str	r3, [r7, #4]
 8008d5a:	f04f 0200 	mov.w	r2, #0
 8008d5e:	f04f 0300 	mov.w	r3, #0
 8008d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d66:	4629      	mov	r1, r5
 8008d68:	028b      	lsls	r3, r1, #10
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d70:	4621      	mov	r1, r4
 8008d72:	028a      	lsls	r2, r1, #10
 8008d74:	4610      	mov	r0, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	61fa      	str	r2, [r7, #28]
 8008d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d84:	f7f7 fa8c 	bl	80002a0 <__aeabi_uldivmod>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008daa:	e002      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3750      	adds	r7, #80	; 0x50
 8008db8:	46bd      	mov	sp, r7
 8008dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	00f42400 	.word	0x00f42400
 8008dc8:	007a1200 	.word	0x007a1200

08008dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000008 	.word	0x20000008

08008de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008de8:	f7ff fff0 	bl	8008dcc <HAL_RCC_GetHCLKFreq>
 8008dec:	4602      	mov	r2, r0
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	0a9b      	lsrs	r3, r3, #10
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	4903      	ldr	r1, [pc, #12]	; (8008e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dfa:	5ccb      	ldrb	r3, [r1, r3]
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	40023800 	.word	0x40023800
 8008e08:	0800c3f0 	.word	0x0800c3f0

08008e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e10:	f7ff ffdc 	bl	8008dcc <HAL_RCC_GetHCLKFreq>
 8008e14:	4602      	mov	r2, r0
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	0b5b      	lsrs	r3, r3, #13
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	4903      	ldr	r1, [pc, #12]	; (8008e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e22:	5ccb      	ldrb	r3, [r1, r3]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	0800c3f0 	.word	0x0800c3f0

08008e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	220f      	movs	r2, #15
 8008e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <HAL_RCC_GetClockConfig+0x5c>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 0203 	and.w	r2, r3, #3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e50:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <HAL_RCC_GetClockConfig+0x5c>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e5c:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <HAL_RCC_GetClockConfig+0x5c>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e68:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <HAL_RCC_GetClockConfig+0x5c>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <HAL_RCC_GetClockConfig+0x60>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 020f 	and.w	r2, r3, #15
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40023800 	.word	0x40023800
 8008e94:	40023c00 	.word	0x40023c00

08008e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10b      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d075      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ecc:	4b91      	ldr	r3, [pc, #580]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ed2:	f7fb fa2f 	bl	8004334 <HAL_GetTick>
 8008ed6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ed8:	e008      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008eda:	f7fb fa2b 	bl	8004334 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e189      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008eec:	4b8a      	ldr	r3, [pc, #552]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f0      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d009      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	019a      	lsls	r2, r3, #6
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	4981      	ldr	r1, [pc, #516]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01f      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f24:	4b7c      	ldr	r3, [pc, #496]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f2a:	0f1b      	lsrs	r3, r3, #28
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	019a      	lsls	r2, r3, #6
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	061b      	lsls	r3, r3, #24
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	071b      	lsls	r3, r3, #28
 8008f44:	4974      	ldr	r1, [pc, #464]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f4c:	4b72      	ldr	r3, [pc, #456]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f52:	f023 021f 	bic.w	r2, r3, #31
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	496e      	ldr	r1, [pc, #440]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00d      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	019a      	lsls	r2, r3, #6
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	061b      	lsls	r3, r3, #24
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	071b      	lsls	r3, r3, #28
 8008f84:	4964      	ldr	r1, [pc, #400]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f8c:	4b61      	ldr	r3, [pc, #388]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f92:	f7fb f9cf 	bl	8004334 <HAL_GetTick>
 8008f96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f98:	e008      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f9a:	f7fb f9cb 	bl	8004334 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e129      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fac:	4b5a      	ldr	r3, [pc, #360]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0f0      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d079      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008fd0:	4b52      	ldr	r3, [pc, #328]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fd6:	f7fb f9ad 	bl	8004334 <HAL_GetTick>
 8008fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fdc:	e008      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008fde:	f7fb f9a9 	bl	8004334 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d901      	bls.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e107      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ff0:	4b49      	ldr	r3, [pc, #292]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffc:	d0ef      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0304 	and.w	r3, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	d020      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800900a:	4b43      	ldr	r3, [pc, #268]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009010:	0f1b      	lsrs	r3, r3, #28
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	019a      	lsls	r2, r3, #6
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	061b      	lsls	r3, r3, #24
 8009024:	431a      	orrs	r2, r3
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	071b      	lsls	r3, r3, #28
 800902a:	493b      	ldr	r1, [pc, #236]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800902c:	4313      	orrs	r3, r2
 800902e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009032:	4b39      	ldr	r3, [pc, #228]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009038:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	3b01      	subs	r3, #1
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	4934      	ldr	r1, [pc, #208]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01e      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009058:	4b2f      	ldr	r3, [pc, #188]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	0e1b      	lsrs	r3, r3, #24
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	019a      	lsls	r2, r3, #6
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	071b      	lsls	r3, r3, #28
 8009078:	4927      	ldr	r1, [pc, #156]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800907a:	4313      	orrs	r3, r2
 800907c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009080:	4b25      	ldr	r3, [pc, #148]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009086:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	4922      	ldr	r1, [pc, #136]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009090:	4313      	orrs	r3, r2
 8009092:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009096:	4b21      	ldr	r3, [pc, #132]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800909c:	f7fb f94a 	bl	8004334 <HAL_GetTick>
 80090a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090a2:	e008      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80090a4:	f7fb f946 	bl	8004334 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e0a4      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090b6:	4b18      	ldr	r3, [pc, #96]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c2:	d1ef      	bne.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 808b 	beq.w	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	4b10      	ldr	r3, [pc, #64]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	4a0f      	ldr	r2, [pc, #60]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e0:	6413      	str	r3, [r2, #64]	; 0x40
 80090e2:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090ee:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a0b      	ldr	r2, [pc, #44]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80090f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090fa:	f7fb f91b 	bl	8004334 <HAL_GetTick>
 80090fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009100:	e010      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009102:	f7fb f917 	bl	8004334 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d909      	bls.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e075      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009114:	42470068 	.word	0x42470068
 8009118:	40023800 	.word	0x40023800
 800911c:	42470070 	.word	0x42470070
 8009120:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009124:	4b38      	ldr	r3, [pc, #224]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0e8      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009130:	4b36      	ldr	r3, [pc, #216]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009138:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02f      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	429a      	cmp	r2, r3
 800914c:	d028      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800914e:	4b2f      	ldr	r3, [pc, #188]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009156:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009158:	4b2d      	ldr	r3, [pc, #180]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800915a:	2201      	movs	r2, #1
 800915c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800915e:	4b2c      	ldr	r3, [pc, #176]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009164:	4a29      	ldr	r2, [pc, #164]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800916a:	4b28      	ldr	r3, [pc, #160]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b01      	cmp	r3, #1
 8009174:	d114      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009176:	f7fb f8dd 	bl	8004334 <HAL_GetTick>
 800917a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800917c:	e00a      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800917e:	f7fb f8d9 	bl	8004334 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4293      	cmp	r3, r2
 800918e:	d901      	bls.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e035      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009194:	4b1d      	ldr	r3, [pc, #116]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0ee      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ac:	d10d      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80091ae:	4b17      	ldr	r3, [pc, #92]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c2:	4912      	ldr	r1, [pc, #72]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	608b      	str	r3, [r1, #8]
 80091c8:	e005      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	4a0f      	ldr	r2, [pc, #60]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091d4:	6093      	str	r3, [r2, #8]
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e2:	490a      	ldr	r1, [pc, #40]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0310 	and.w	r3, r3, #16
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d004      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80091fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40007000 	.word	0x40007000
 800920c:	40023800 	.word	0x40023800
 8009210:	42470e40 	.word	0x42470e40
 8009214:	424711e0 	.word	0x424711e0

08009218 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e025      	b.n	8009278 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7f7 ff43 	bl	80010cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f001 fe91 	bl	800af80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	461a      	mov	r2, r3
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	f001 fee6 	bl	800b03a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009292:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d101      	bne.n	800929e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
 800929c:	e021      	b.n	80092e2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d002      	beq.n	80092aa <HAL_SDRAM_SendCommand+0x2a>
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	d118      	bne.n	80092dc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 ff26 	bl	800b10c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d104      	bne.n	80092d2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2205      	movs	r2, #5
 80092cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092d0:	e006      	b.n	80092e0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092da:	e001      	b.n	80092e0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d101      	bne.n	8009304 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009300:	2302      	movs	r3, #2
 8009302:	e016      	b.n	8009332 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b01      	cmp	r3, #1
 800930e:	d10f      	bne.n	8009330 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f001 ff31 	bl	800b186 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	e000      	b.n	8009332 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e07b      	b.n	8009444 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935c:	d009      	beq.n	8009372 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	61da      	str	r2, [r3, #28]
 8009364:	e005      	b.n	8009372 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7f8 fc9d 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ec:	431a      	orrs	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	ea42 0103 	orr.w	r1, r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	0c1b      	lsrs	r3, r3, #16
 8009410:	f003 0104 	and.w	r1, r3, #4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	f003 0210 	and.w	r2, r3, #16
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69da      	ldr	r2, [r3, #28]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009432:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e01a      	b.n	8009494 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2202      	movs	r2, #2
 8009462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009474:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f8 fc70 	bl	8001d5c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_SPI_Transmit+0x22>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e126      	b.n	800970c <HAL_SPI_Transmit+0x270>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094c6:	f7fa ff35 	bl	8004334 <HAL_GetTick>
 80094ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d002      	beq.n	80094e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094dc:	2302      	movs	r3, #2
 80094de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094e0:	e10b      	b.n	80096fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <HAL_SPI_Transmit+0x52>
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094f2:	e102      	b.n	80096fa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2203      	movs	r2, #3
 80094f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	88fa      	ldrh	r2, [r7, #6]
 8009512:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800953a:	d10f      	bne.n	800955c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800954a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800955a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d007      	beq.n	800957a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d14b      	bne.n	800961c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_SPI_Transmit+0xf6>
 800958c:	8afb      	ldrh	r3, [r7, #22]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d13e      	bne.n	8009610 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	881a      	ldrh	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	1c9a      	adds	r2, r3, #2
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095b6:	e02b      	b.n	8009610 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d112      	bne.n	80095ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	881a      	ldrh	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	1c9a      	adds	r2, r3, #2
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80095ea:	e011      	b.n	8009610 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095ec:	f7fa fea2 	bl	8004334 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d803      	bhi.n	8009604 <HAL_SPI_Transmit+0x168>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009602:	d102      	bne.n	800960a <HAL_SPI_Transmit+0x16e>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800960e:	e074      	b.n	80096fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1ce      	bne.n	80095b8 <HAL_SPI_Transmit+0x11c>
 800961a:	e04c      	b.n	80096b6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <HAL_SPI_Transmit+0x18e>
 8009624:	8afb      	ldrh	r3, [r7, #22]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d140      	bne.n	80096ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	330c      	adds	r3, #12
 8009634:	7812      	ldrb	r2, [r2, #0]
 8009636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009650:	e02c      	b.n	80096ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b02      	cmp	r3, #2
 800965e:	d113      	bne.n	8009688 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	86da      	strh	r2, [r3, #54]	; 0x36
 8009686:	e011      	b.n	80096ac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009688:	f7fa fe54 	bl	8004334 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d803      	bhi.n	80096a0 <HAL_SPI_Transmit+0x204>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969e:	d102      	bne.n	80096a6 <HAL_SPI_Transmit+0x20a>
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096aa:	e026      	b.n	80096fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1cd      	bne.n	8009652 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 fbda 	bl	8009e74 <SPI_EndRxTxTransaction>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	77fb      	strb	r3, [r7, #31]
 80096f6:	e000      	b.n	80096fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80096f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800970a:	7ffb      	ldrb	r3, [r7, #31]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009730:	d112      	bne.n	8009758 <HAL_SPI_Receive+0x44>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10e      	bne.n	8009758 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2204      	movs	r2, #4
 800973e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009742:	88fa      	ldrh	r2, [r7, #6]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f8f1 	bl	8009936 <HAL_SPI_TransmitReceive>
 8009754:	4603      	mov	r3, r0
 8009756:	e0ea      	b.n	800992e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_SPI_Receive+0x52>
 8009762:	2302      	movs	r3, #2
 8009764:	e0e3      	b.n	800992e <HAL_SPI_Receive+0x21a>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800976e:	f7fa fde1 	bl	8004334 <HAL_GetTick>
 8009772:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b01      	cmp	r3, #1
 800977e:	d002      	beq.n	8009786 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009780:	2302      	movs	r3, #2
 8009782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009784:	e0ca      	b.n	800991c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <HAL_SPI_Receive+0x7e>
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009796:	e0c1      	b.n	800991c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2204      	movs	r2, #4
 800979c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	88fa      	ldrh	r2, [r7, #6]
 80097b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097de:	d10f      	bne.n	8009800 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d007      	beq.n	800981e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800981c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d162      	bne.n	80098ec <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009826:	e02e      	b.n	8009886 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b01      	cmp	r3, #1
 8009834:	d115      	bne.n	8009862 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f103 020c 	add.w	r2, r3, #12
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009856:	b29b      	uxth	r3, r3
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009860:	e011      	b.n	8009886 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009862:	f7fa fd67 	bl	8004334 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d803      	bhi.n	800987a <HAL_SPI_Receive+0x166>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d102      	bne.n	8009880 <HAL_SPI_Receive+0x16c>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009884:	e04a      	b.n	800991c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1cb      	bne.n	8009828 <HAL_SPI_Receive+0x114>
 8009890:	e031      	b.n	80098f6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d113      	bne.n	80098c8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	b292      	uxth	r2, r2
 80098ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b2:	1c9a      	adds	r2, r3, #2
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3b01      	subs	r3, #1
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098c6:	e011      	b.n	80098ec <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c8:	f7fa fd34 	bl	8004334 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d803      	bhi.n	80098e0 <HAL_SPI_Receive+0x1cc>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098de:	d102      	bne.n	80098e6 <HAL_SPI_Receive+0x1d2>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098ea:	e017      	b.n	800991c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1cd      	bne.n	8009892 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fa54 	bl	8009da8 <SPI_EndRxTransaction>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2220      	movs	r2, #32
 800990a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	75fb      	strb	r3, [r7, #23]
 8009918:	e000      	b.n	800991c <HAL_SPI_Receive+0x208>
  }

error :
 800991a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b08c      	sub	sp, #48	; 0x30
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
 8009942:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009944:	2301      	movs	r3, #1
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_SPI_TransmitReceive+0x26>
 8009958:	2302      	movs	r3, #2
 800995a:	e18a      	b.n	8009c72 <HAL_SPI_TransmitReceive+0x33c>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009964:	f7fa fce6 	bl	8004334 <HAL_GetTick>
 8009968:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800997a:	887b      	ldrh	r3, [r7, #2]
 800997c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800997e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009982:	2b01      	cmp	r3, #1
 8009984:	d00f      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x70>
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800998c:	d107      	bne.n	800999e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <HAL_SPI_TransmitReceive+0x68>
 8009996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800999a:	2b04      	cmp	r3, #4
 800999c:	d003      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800999e:	2302      	movs	r3, #2
 80099a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099a4:	e15b      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_SPI_TransmitReceive+0x82>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <HAL_SPI_TransmitReceive+0x82>
 80099b2:	887b      	ldrh	r3, [r7, #2]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099be:	e14e      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d003      	beq.n	80099d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2205      	movs	r2, #5
 80099d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	887a      	ldrh	r2, [r7, #2]
 80099e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	887a      	ldrh	r2, [r7, #2]
 80099ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	887a      	ldrh	r2, [r7, #2]
 80099f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	887a      	ldrh	r2, [r7, #2]
 80099fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a14:	2b40      	cmp	r3, #64	; 0x40
 8009a16:	d007      	beq.n	8009a28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a30:	d178      	bne.n	8009b24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0x10a>
 8009a3a:	8b7b      	ldrh	r3, [r7, #26]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d166      	bne.n	8009b0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a44:	881a      	ldrh	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	1c9a      	adds	r2, r3, #2
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a64:	e053      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d11b      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x176>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d016      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x176>
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d113      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a88:	881a      	ldrh	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	1c9a      	adds	r2, r3, #2
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d119      	bne.n	8009aee <HAL_SPI_TransmitReceive+0x1b8>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d014      	beq.n	8009aee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	1c9a      	adds	r2, r3, #2
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aea:	2301      	movs	r3, #1
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009aee:	f7fa fc21 	bl	8004334 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d807      	bhi.n	8009b0e <HAL_SPI_TransmitReceive+0x1d8>
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b04:	d003      	beq.n	8009b0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b0c:	e0a7      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1a6      	bne.n	8009a66 <HAL_SPI_TransmitReceive+0x130>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1a1      	bne.n	8009a66 <HAL_SPI_TransmitReceive+0x130>
 8009b22:	e07c      	b.n	8009c1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <HAL_SPI_TransmitReceive+0x1fc>
 8009b2c:	8b7b      	ldrh	r3, [r7, #26]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d16b      	bne.n	8009c0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	330c      	adds	r3, #12
 8009b3c:	7812      	ldrb	r2, [r2, #0]
 8009b3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b58:	e057      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d11c      	bne.n	8009ba2 <HAL_SPI_TransmitReceive+0x26c>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d017      	beq.n	8009ba2 <HAL_SPI_TransmitReceive+0x26c>
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d114      	bne.n	8009ba2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	330c      	adds	r3, #12
 8009b82:	7812      	ldrb	r2, [r2, #0]
 8009b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d119      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x2ae>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d014      	beq.n	8009be4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009be0:	2301      	movs	r3, #1
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009be4:	f7fa fba6 	bl	8004334 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d803      	bhi.n	8009bfc <HAL_SPI_TransmitReceive+0x2c6>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d102      	bne.n	8009c02 <HAL_SPI_TransmitReceive+0x2cc>
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c08:	e029      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1a2      	bne.n	8009b5a <HAL_SPI_TransmitReceive+0x224>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d19d      	bne.n	8009b5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 f926 	bl	8009e74 <SPI_EndRxTxTransaction>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c3a:	e010      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c44:	2300      	movs	r3, #0
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	e000      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3730      	adds	r7, #48	; 0x30
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c88:	b2db      	uxtb	r3, r3
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ca8:	f7fa fb44 	bl	8004334 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	1a9b      	subs	r3, r3, r2
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cb8:	f7fa fb3c 	bl	8004334 <HAL_GetTick>
 8009cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009cbe:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	015b      	lsls	r3, r3, #5
 8009cc4:	0d1b      	lsrs	r3, r3, #20
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cce:	e054      	b.n	8009d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd6:	d050      	beq.n	8009d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cd8:	f7fa fb2c 	bl	8004334 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d902      	bls.n	8009cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d13d      	bne.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d06:	d111      	bne.n	8009d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d10:	d004      	beq.n	8009d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d1a:	d107      	bne.n	8009d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d34:	d10f      	bne.n	8009d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e017      	b.n	8009d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4013      	ands	r3, r2
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	bf0c      	ite	eq
 8009d8a:	2301      	moveq	r3, #1
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d19b      	bne.n	8009cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3720      	adds	r7, #32
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000008 	.word	0x20000008

08009da8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dbc:	d111      	bne.n	8009de2 <SPI_EndRxTransaction+0x3a>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc6:	d004      	beq.n	8009dd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dd0:	d107      	bne.n	8009de2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009de0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dea:	d12a      	bne.n	8009e42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df4:	d012      	beq.n	8009e1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2180      	movs	r1, #128	; 0x80
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7ff ff49 	bl	8009c98 <SPI_WaitFlagStateUntilTimeout>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d02d      	beq.n	8009e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	f043 0220 	orr.w	r2, r3, #32
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e026      	b.n	8009e6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2200      	movs	r2, #0
 8009e24:	2101      	movs	r1, #1
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7ff ff36 	bl	8009c98 <SPI_WaitFlagStateUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01a      	beq.n	8009e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	f043 0220 	orr.w	r2, r3, #32
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e013      	b.n	8009e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff ff23 	bl	8009c98 <SPI_WaitFlagStateUntilTimeout>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d007      	beq.n	8009e68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5c:	f043 0220 	orr.w	r2, r3, #32
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e000      	b.n	8009e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e80:	4b1b      	ldr	r3, [pc, #108]	; (8009ef0 <SPI_EndRxTxTransaction+0x7c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a1b      	ldr	r2, [pc, #108]	; (8009ef4 <SPI_EndRxTxTransaction+0x80>)
 8009e86:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8a:	0d5b      	lsrs	r3, r3, #21
 8009e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e90:	fb02 f303 	mul.w	r3, r2, r3
 8009e94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e9e:	d112      	bne.n	8009ec6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2180      	movs	r1, #128	; 0x80
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fef4 	bl	8009c98 <SPI_WaitFlagStateUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d016      	beq.n	8009ee4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eba:	f043 0220 	orr.w	r2, r3, #32
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e00f      	b.n	8009ee6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009edc:	2b80      	cmp	r3, #128	; 0x80
 8009ede:	d0f2      	beq.n	8009ec6 <SPI_EndRxTxTransaction+0x52>
 8009ee0:	e000      	b.n	8009ee4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009ee2:	bf00      	nop
  }

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000008 	.word	0x20000008
 8009ef4:	165e9f81 	.word	0x165e9f81

08009ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e041      	b.n	8009f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7f8 f8d0 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f000 fa96 	bl	800a468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d001      	beq.n	8009fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e04e      	b.n	800a04e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f042 0201 	orr.w	r2, r2, #1
 8009fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a23      	ldr	r2, [pc, #140]	; (800a05c <HAL_TIM_Base_Start_IT+0xc4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d022      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fda:	d01d      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <HAL_TIM_Base_Start_IT+0xc8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d018      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1e      	ldr	r2, [pc, #120]	; (800a064 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d013      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	; (800a068 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d00e      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1b      	ldr	r2, [pc, #108]	; (800a06c <HAL_TIM_Base_Start_IT+0xd4>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d009      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a19      	ldr	r2, [pc, #100]	; (800a070 <HAL_TIM_Base_Start_IT+0xd8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d004      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x80>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a18      	ldr	r2, [pc, #96]	; (800a074 <HAL_TIM_Base_Start_IT+0xdc>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d111      	bne.n	800a03c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b06      	cmp	r3, #6
 800a028:	d010      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f042 0201 	orr.w	r2, r2, #1
 800a038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03a:	e007      	b.n	800a04c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0201 	orr.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40010000 	.word	0x40010000
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40000c00 	.word	0x40000c00
 800a06c:	40010400 	.word	0x40010400
 800a070:	40014000 	.word	0x40014000
 800a074:	40001800 	.word	0x40001800

0800a078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d122      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d11b      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0202 	mvn.w	r2, #2
 800a0a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f9b5 	bl	800a42a <HAL_TIM_IC_CaptureCallback>
 800a0c0:	e005      	b.n	800a0ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9a7 	bl	800a416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f9b8 	bl	800a43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d122      	bne.n	800a128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d11b      	bne.n	800a128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0204 	mvn.w	r2, #4
 800a0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f98b 	bl	800a42a <HAL_TIM_IC_CaptureCallback>
 800a114:	e005      	b.n	800a122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f97d 	bl	800a416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f98e 	bl	800a43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b08      	cmp	r3, #8
 800a134:	d122      	bne.n	800a17c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b08      	cmp	r3, #8
 800a142:	d11b      	bne.n	800a17c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0208 	mvn.w	r2, #8
 800a14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2204      	movs	r2, #4
 800a152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f961 	bl	800a42a <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f953 	bl	800a416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f964 	bl	800a43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b10      	cmp	r3, #16
 800a188:	d122      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b10      	cmp	r3, #16
 800a196:	d11b      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0210 	mvn.w	r2, #16
 800a1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f937 	bl	800a42a <HAL_TIM_IC_CaptureCallback>
 800a1bc:	e005      	b.n	800a1ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f929 	bl	800a416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f93a 	bl	800a43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d10e      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d107      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0201 	mvn.w	r2, #1
 800a1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f7 fd12 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	d10e      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a214:	2b80      	cmp	r3, #128	; 0x80
 800a216:	d107      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fae0 	bl	800a7e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	d10e      	bne.n	800a254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d107      	bne.n	800a254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8ff 	bl	800a452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b20      	cmp	r3, #32
 800a260:	d10e      	bne.n	800a280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	d107      	bne.n	800a280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0220 	mvn.w	r2, #32
 800a278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 faaa 	bl	800a7d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d101      	bne.n	800a2a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e0b4      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x186>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2dc:	d03e      	beq.n	800a35c <HAL_TIM_ConfigClockSource+0xd4>
 800a2de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e2:	f200 8087 	bhi.w	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ea:	f000 8086 	beq.w	800a3fa <HAL_TIM_ConfigClockSource+0x172>
 800a2ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f2:	d87f      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a2f4:	2b70      	cmp	r3, #112	; 0x70
 800a2f6:	d01a      	beq.n	800a32e <HAL_TIM_ConfigClockSource+0xa6>
 800a2f8:	2b70      	cmp	r3, #112	; 0x70
 800a2fa:	d87b      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a2fc:	2b60      	cmp	r3, #96	; 0x60
 800a2fe:	d050      	beq.n	800a3a2 <HAL_TIM_ConfigClockSource+0x11a>
 800a300:	2b60      	cmp	r3, #96	; 0x60
 800a302:	d877      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a304:	2b50      	cmp	r3, #80	; 0x50
 800a306:	d03c      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0xfa>
 800a308:	2b50      	cmp	r3, #80	; 0x50
 800a30a:	d873      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a30c:	2b40      	cmp	r3, #64	; 0x40
 800a30e:	d058      	beq.n	800a3c2 <HAL_TIM_ConfigClockSource+0x13a>
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d86f      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a314:	2b30      	cmp	r3, #48	; 0x30
 800a316:	d064      	beq.n	800a3e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a318:	2b30      	cmp	r3, #48	; 0x30
 800a31a:	d86b      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d060      	beq.n	800a3e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a320:	2b20      	cmp	r3, #32
 800a322:	d867      	bhi.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d05c      	beq.n	800a3e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a328:	2b10      	cmp	r3, #16
 800a32a:	d05a      	beq.n	800a3e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a32c:	e062      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6899      	ldr	r1, [r3, #8]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f000 f9ad 	bl	800a69c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	609a      	str	r2, [r3, #8]
      break;
 800a35a:	e04f      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	6899      	ldr	r1, [r3, #8]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f000 f996 	bl	800a69c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a37e:	609a      	str	r2, [r3, #8]
      break;
 800a380:	e03c      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6859      	ldr	r1, [r3, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	461a      	mov	r2, r3
 800a390:	f000 f90a 	bl	800a5a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2150      	movs	r1, #80	; 0x50
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f963 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a3a0:	e02c      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	6859      	ldr	r1, [r3, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f000 f929 	bl	800a606 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2160      	movs	r1, #96	; 0x60
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f953 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a3c0:	e01c      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	6859      	ldr	r1, [r3, #4]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f000 f8ea 	bl	800a5a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2140      	movs	r1, #64	; 0x40
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f943 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a3e0:	e00c      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f000 f93a 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a3f2:	e003      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f8:	e000      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a3fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a40      	ldr	r2, [pc, #256]	; (800a57c <TIM_Base_SetConfig+0x114>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d013      	beq.n	800a4a8 <TIM_Base_SetConfig+0x40>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a486:	d00f      	beq.n	800a4a8 <TIM_Base_SetConfig+0x40>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a3d      	ldr	r2, [pc, #244]	; (800a580 <TIM_Base_SetConfig+0x118>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00b      	beq.n	800a4a8 <TIM_Base_SetConfig+0x40>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a3c      	ldr	r2, [pc, #240]	; (800a584 <TIM_Base_SetConfig+0x11c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d007      	beq.n	800a4a8 <TIM_Base_SetConfig+0x40>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a3b      	ldr	r2, [pc, #236]	; (800a588 <TIM_Base_SetConfig+0x120>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d003      	beq.n	800a4a8 <TIM_Base_SetConfig+0x40>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a3a      	ldr	r2, [pc, #232]	; (800a58c <TIM_Base_SetConfig+0x124>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d108      	bne.n	800a4ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a2f      	ldr	r2, [pc, #188]	; (800a57c <TIM_Base_SetConfig+0x114>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d02b      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c8:	d027      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a2c      	ldr	r2, [pc, #176]	; (800a580 <TIM_Base_SetConfig+0x118>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d023      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a2b      	ldr	r2, [pc, #172]	; (800a584 <TIM_Base_SetConfig+0x11c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d01f      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a2a      	ldr	r2, [pc, #168]	; (800a588 <TIM_Base_SetConfig+0x120>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d01b      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a29      	ldr	r2, [pc, #164]	; (800a58c <TIM_Base_SetConfig+0x124>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d017      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a28      	ldr	r2, [pc, #160]	; (800a590 <TIM_Base_SetConfig+0x128>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d013      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a27      	ldr	r2, [pc, #156]	; (800a594 <TIM_Base_SetConfig+0x12c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00f      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a26      	ldr	r2, [pc, #152]	; (800a598 <TIM_Base_SetConfig+0x130>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00b      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a25      	ldr	r2, [pc, #148]	; (800a59c <TIM_Base_SetConfig+0x134>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d007      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a24      	ldr	r2, [pc, #144]	; (800a5a0 <TIM_Base_SetConfig+0x138>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d003      	beq.n	800a51a <TIM_Base_SetConfig+0xb2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <TIM_Base_SetConfig+0x13c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d108      	bne.n	800a52c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <TIM_Base_SetConfig+0x114>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d003      	beq.n	800a560 <TIM_Base_SetConfig+0xf8>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a0c      	ldr	r2, [pc, #48]	; (800a58c <TIM_Base_SetConfig+0x124>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d103      	bne.n	800a568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	615a      	str	r2, [r3, #20]
}
 800a56e:	bf00      	nop
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	40010000 	.word	0x40010000
 800a580:	40000400 	.word	0x40000400
 800a584:	40000800 	.word	0x40000800
 800a588:	40000c00 	.word	0x40000c00
 800a58c:	40010400 	.word	0x40010400
 800a590:	40014000 	.word	0x40014000
 800a594:	40014400 	.word	0x40014400
 800a598:	40014800 	.word	0x40014800
 800a59c:	40001800 	.word	0x40001800
 800a5a0:	40001c00 	.word	0x40001c00
 800a5a4:	40002000 	.word	0x40002000

0800a5a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f023 030a 	bic.w	r3, r3, #10
 800a5e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a606:	b480      	push	{r7}
 800a608:	b087      	sub	sp, #28
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	f023 0210 	bic.w	r2, r3, #16
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	031b      	lsls	r3, r3, #12
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	011b      	lsls	r3, r3, #4
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a67c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4313      	orrs	r3, r2
 800a684:	f043 0307 	orr.w	r3, r3, #7
 800a688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	021a      	lsls	r2, r3, #8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	609a      	str	r2, [r3, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d101      	bne.n	800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e05a      	b.n	800a7aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a71a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a21      	ldr	r2, [pc, #132]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d022      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a740:	d01d      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a1d      	ldr	r2, [pc, #116]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d018      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d013      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a1a      	ldr	r2, [pc, #104]	; (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00e      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a18      	ldr	r2, [pc, #96]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d009      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a17      	ldr	r2, [pc, #92]	; (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d004      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a15      	ldr	r2, [pc, #84]	; (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d10c      	bne.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40014000 	.word	0x40014000
 800a7d0:	40001800 	.word	0x40001800

0800a7d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e03f      	b.n	800a88e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7f7 fcda 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2224      	movs	r2, #36	; 0x24
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a83e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f929 	bl	800aa98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	691a      	ldr	r2, [r3, #16]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695a      	ldr	r2, [r3, #20]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b08a      	sub	sp, #40	; 0x28
 800a89a:	af02      	add	r7, sp, #8
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	603b      	str	r3, [r7, #0]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d17c      	bne.n	800a9b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <HAL_UART_Transmit+0x2c>
 800a8bc:	88fb      	ldrh	r3, [r7, #6]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e075      	b.n	800a9b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_UART_Transmit+0x3e>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e06e      	b.n	800a9b2 <HAL_UART_Transmit+0x11c>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2221      	movs	r2, #33	; 0x21
 800a8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8ea:	f7f9 fd23 	bl	8004334 <HAL_GetTick>
 800a8ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	88fa      	ldrh	r2, [r7, #6]
 800a8f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a904:	d108      	bne.n	800a918 <HAL_UART_Transmit+0x82>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d104      	bne.n	800a918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	e003      	b.n	800a920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a928:	e02a      	b.n	800a980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2200      	movs	r2, #0
 800a932:	2180      	movs	r1, #128	; 0x80
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f840 	bl	800a9ba <UART_WaitOnFlagUntilTimeout>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e036      	b.n	800a9b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	3302      	adds	r3, #2
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e007      	b.n	800a972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	3301      	adds	r3, #1
 800a970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a976:	b29b      	uxth	r3, r3
 800a978:	3b01      	subs	r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1cf      	bne.n	800a92a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2200      	movs	r2, #0
 800a992:	2140      	movs	r1, #64	; 0x40
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f810 	bl	800a9ba <UART_WaitOnFlagUntilTimeout>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e006      	b.n	800a9b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e000      	b.n	800a9b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a9b0:	2302      	movs	r3, #2
  }
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b090      	sub	sp, #64	; 0x40
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	60b9      	str	r1, [r7, #8]
 800a9c4:	603b      	str	r3, [r7, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ca:	e050      	b.n	800aa6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d04c      	beq.n	800aa6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0x30>
 800a9da:	f7f9 fcab 	bl	8004334 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d241      	bcs.n	800aa6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	330c      	adds	r3, #12
 800a9f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	330c      	adds	r3, #12
 800aa08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa0a:	637a      	str	r2, [r7, #52]	; 0x34
 800aa0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e5      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3314      	adds	r3, #20
 800aa24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3314      	adds	r3, #20
 800aa3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa3e:	623a      	str	r2, [r7, #32]
 800aa40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	69f9      	ldr	r1, [r7, #28]
 800aa44:	6a3a      	ldr	r2, [r7, #32]
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e5      	bne.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e00f      	b.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4013      	ands	r3, r2
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	bf0c      	ite	eq
 800aa7e:	2301      	moveq	r3, #1
 800aa80:	2300      	movne	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d09f      	beq.n	800a9cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3740      	adds	r7, #64	; 0x40
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa9c:	b0c0      	sub	sp, #256	; 0x100
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab4:	68d9      	ldr	r1, [r3, #12]
 800aab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	ea40 0301 	orr.w	r3, r0, r1
 800aac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac6:	689a      	ldr	r2, [r3, #8]
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	431a      	orrs	r2, r3
 800aad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	431a      	orrs	r2, r3
 800aad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	4313      	orrs	r3, r2
 800aae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aaf0:	f021 010c 	bic.w	r1, r1, #12
 800aaf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aafe:	430b      	orrs	r3, r1
 800ab00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab12:	6999      	ldr	r1, [r3, #24]
 800ab14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	ea40 0301 	orr.w	r3, r0, r1
 800ab1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4b8f      	ldr	r3, [pc, #572]	; (800ad64 <UART_SetConfig+0x2cc>)
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d005      	beq.n	800ab38 <UART_SetConfig+0xa0>
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4b8d      	ldr	r3, [pc, #564]	; (800ad68 <UART_SetConfig+0x2d0>)
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d104      	bne.n	800ab42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab38:	f7fe f968 	bl	8008e0c <HAL_RCC_GetPCLK2Freq>
 800ab3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab40:	e003      	b.n	800ab4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab42:	f7fe f94f 	bl	8008de4 <HAL_RCC_GetPCLK1Freq>
 800ab46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab54:	f040 810c 	bne.w	800ad70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	1891      	adds	r1, r2, r2
 800ab70:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab72:	415b      	adcs	r3, r3
 800ab74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	eb12 0801 	adds.w	r8, r2, r1
 800ab80:	4629      	mov	r1, r5
 800ab82:	eb43 0901 	adc.w	r9, r3, r1
 800ab86:	f04f 0200 	mov.w	r2, #0
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab9a:	4690      	mov	r8, r2
 800ab9c:	4699      	mov	r9, r3
 800ab9e:	4623      	mov	r3, r4
 800aba0:	eb18 0303 	adds.w	r3, r8, r3
 800aba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba8:	462b      	mov	r3, r5
 800abaa:	eb49 0303 	adc.w	r3, r9, r3
 800abae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800abc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abc6:	460b      	mov	r3, r1
 800abc8:	18db      	adds	r3, r3, r3
 800abca:	653b      	str	r3, [r7, #80]	; 0x50
 800abcc:	4613      	mov	r3, r2
 800abce:	eb42 0303 	adc.w	r3, r2, r3
 800abd2:	657b      	str	r3, [r7, #84]	; 0x54
 800abd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800abd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abdc:	f7f5 fb60 	bl	80002a0 <__aeabi_uldivmod>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4b61      	ldr	r3, [pc, #388]	; (800ad6c <UART_SetConfig+0x2d4>)
 800abe6:	fba3 2302 	umull	r2, r3, r3, r2
 800abea:	095b      	lsrs	r3, r3, #5
 800abec:	011c      	lsls	r4, r3, #4
 800abee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800abfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac00:	4642      	mov	r2, r8
 800ac02:	464b      	mov	r3, r9
 800ac04:	1891      	adds	r1, r2, r2
 800ac06:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac08:	415b      	adcs	r3, r3
 800ac0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac10:	4641      	mov	r1, r8
 800ac12:	eb12 0a01 	adds.w	sl, r2, r1
 800ac16:	4649      	mov	r1, r9
 800ac18:	eb43 0b01 	adc.w	fp, r3, r1
 800ac1c:	f04f 0200 	mov.w	r2, #0
 800ac20:	f04f 0300 	mov.w	r3, #0
 800ac24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac30:	4692      	mov	sl, r2
 800ac32:	469b      	mov	fp, r3
 800ac34:	4643      	mov	r3, r8
 800ac36:	eb1a 0303 	adds.w	r3, sl, r3
 800ac3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	eb4b 0303 	adc.w	r3, fp, r3
 800ac44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	18db      	adds	r3, r3, r3
 800ac60:	643b      	str	r3, [r7, #64]	; 0x40
 800ac62:	4613      	mov	r3, r2
 800ac64:	eb42 0303 	adc.w	r3, r2, r3
 800ac68:	647b      	str	r3, [r7, #68]	; 0x44
 800ac6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac72:	f7f5 fb15 	bl	80002a0 <__aeabi_uldivmod>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <UART_SetConfig+0x2d4>)
 800ac7e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac82:	095b      	lsrs	r3, r3, #5
 800ac84:	2264      	movs	r2, #100	; 0x64
 800ac86:	fb02 f303 	mul.w	r3, r2, r3
 800ac8a:	1acb      	subs	r3, r1, r3
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac92:	4b36      	ldr	r3, [pc, #216]	; (800ad6c <UART_SetConfig+0x2d4>)
 800ac94:	fba3 2302 	umull	r2, r3, r3, r2
 800ac98:	095b      	lsrs	r3, r3, #5
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aca0:	441c      	add	r4, r3
 800aca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800acb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800acb4:	4642      	mov	r2, r8
 800acb6:	464b      	mov	r3, r9
 800acb8:	1891      	adds	r1, r2, r2
 800acba:	63b9      	str	r1, [r7, #56]	; 0x38
 800acbc:	415b      	adcs	r3, r3
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acc4:	4641      	mov	r1, r8
 800acc6:	1851      	adds	r1, r2, r1
 800acc8:	6339      	str	r1, [r7, #48]	; 0x30
 800acca:	4649      	mov	r1, r9
 800accc:	414b      	adcs	r3, r1
 800acce:	637b      	str	r3, [r7, #52]	; 0x34
 800acd0:	f04f 0200 	mov.w	r2, #0
 800acd4:	f04f 0300 	mov.w	r3, #0
 800acd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800acdc:	4659      	mov	r1, fp
 800acde:	00cb      	lsls	r3, r1, #3
 800ace0:	4651      	mov	r1, sl
 800ace2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ace6:	4651      	mov	r1, sl
 800ace8:	00ca      	lsls	r2, r1, #3
 800acea:	4610      	mov	r0, r2
 800acec:	4619      	mov	r1, r3
 800acee:	4603      	mov	r3, r0
 800acf0:	4642      	mov	r2, r8
 800acf2:	189b      	adds	r3, r3, r2
 800acf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acf8:	464b      	mov	r3, r9
 800acfa:	460a      	mov	r2, r1
 800acfc:	eb42 0303 	adc.w	r3, r2, r3
 800ad00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad18:	460b      	mov	r3, r1
 800ad1a:	18db      	adds	r3, r3, r3
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad1e:	4613      	mov	r3, r2
 800ad20:	eb42 0303 	adc.w	r3, r2, r3
 800ad24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad2e:	f7f5 fab7 	bl	80002a0 <__aeabi_uldivmod>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4b0d      	ldr	r3, [pc, #52]	; (800ad6c <UART_SetConfig+0x2d4>)
 800ad38:	fba3 1302 	umull	r1, r3, r3, r2
 800ad3c:	095b      	lsrs	r3, r3, #5
 800ad3e:	2164      	movs	r1, #100	; 0x64
 800ad40:	fb01 f303 	mul.w	r3, r1, r3
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	3332      	adds	r3, #50	; 0x32
 800ad4a:	4a08      	ldr	r2, [pc, #32]	; (800ad6c <UART_SetConfig+0x2d4>)
 800ad4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad50:	095b      	lsrs	r3, r3, #5
 800ad52:	f003 0207 	and.w	r2, r3, #7
 800ad56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4422      	add	r2, r4
 800ad5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad60:	e105      	b.n	800af6e <UART_SetConfig+0x4d6>
 800ad62:	bf00      	nop
 800ad64:	40011000 	.word	0x40011000
 800ad68:	40011400 	.word	0x40011400
 800ad6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad82:	4642      	mov	r2, r8
 800ad84:	464b      	mov	r3, r9
 800ad86:	1891      	adds	r1, r2, r2
 800ad88:	6239      	str	r1, [r7, #32]
 800ad8a:	415b      	adcs	r3, r3
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad92:	4641      	mov	r1, r8
 800ad94:	1854      	adds	r4, r2, r1
 800ad96:	4649      	mov	r1, r9
 800ad98:	eb43 0501 	adc.w	r5, r3, r1
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	f04f 0300 	mov.w	r3, #0
 800ada4:	00eb      	lsls	r3, r5, #3
 800ada6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800adaa:	00e2      	lsls	r2, r4, #3
 800adac:	4614      	mov	r4, r2
 800adae:	461d      	mov	r5, r3
 800adb0:	4643      	mov	r3, r8
 800adb2:	18e3      	adds	r3, r4, r3
 800adb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800adb8:	464b      	mov	r3, r9
 800adba:	eb45 0303 	adc.w	r3, r5, r3
 800adbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800adce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800adde:	4629      	mov	r1, r5
 800ade0:	008b      	lsls	r3, r1, #2
 800ade2:	4621      	mov	r1, r4
 800ade4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ade8:	4621      	mov	r1, r4
 800adea:	008a      	lsls	r2, r1, #2
 800adec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800adf0:	f7f5 fa56 	bl	80002a0 <__aeabi_uldivmod>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4b60      	ldr	r3, [pc, #384]	; (800af7c <UART_SetConfig+0x4e4>)
 800adfa:	fba3 2302 	umull	r2, r3, r3, r2
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	011c      	lsls	r4, r3, #4
 800ae02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae06:	2200      	movs	r2, #0
 800ae08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae14:	4642      	mov	r2, r8
 800ae16:	464b      	mov	r3, r9
 800ae18:	1891      	adds	r1, r2, r2
 800ae1a:	61b9      	str	r1, [r7, #24]
 800ae1c:	415b      	adcs	r3, r3
 800ae1e:	61fb      	str	r3, [r7, #28]
 800ae20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae24:	4641      	mov	r1, r8
 800ae26:	1851      	adds	r1, r2, r1
 800ae28:	6139      	str	r1, [r7, #16]
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	414b      	adcs	r3, r1
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	f04f 0200 	mov.w	r2, #0
 800ae34:	f04f 0300 	mov.w	r3, #0
 800ae38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	00cb      	lsls	r3, r1, #3
 800ae40:	4651      	mov	r1, sl
 800ae42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae46:	4651      	mov	r1, sl
 800ae48:	00ca      	lsls	r2, r1, #3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4642      	mov	r2, r8
 800ae52:	189b      	adds	r3, r3, r2
 800ae54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae58:	464b      	mov	r3, r9
 800ae5a:	460a      	mov	r2, r1
 800ae5c:	eb42 0303 	adc.w	r3, r2, r3
 800ae60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	f04f 0300 	mov.w	r3, #0
 800ae78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	008b      	lsls	r3, r1, #2
 800ae80:	4641      	mov	r1, r8
 800ae82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae86:	4641      	mov	r1, r8
 800ae88:	008a      	lsls	r2, r1, #2
 800ae8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae8e:	f7f5 fa07 	bl	80002a0 <__aeabi_uldivmod>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4b39      	ldr	r3, [pc, #228]	; (800af7c <UART_SetConfig+0x4e4>)
 800ae98:	fba3 1302 	umull	r1, r3, r3, r2
 800ae9c:	095b      	lsrs	r3, r3, #5
 800ae9e:	2164      	movs	r1, #100	; 0x64
 800aea0:	fb01 f303 	mul.w	r3, r1, r3
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	3332      	adds	r3, #50	; 0x32
 800aeaa:	4a34      	ldr	r2, [pc, #208]	; (800af7c <UART_SetConfig+0x4e4>)
 800aeac:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb0:	095b      	lsrs	r3, r3, #5
 800aeb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeb6:	441c      	add	r4, r3
 800aeb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aebc:	2200      	movs	r2, #0
 800aebe:	673b      	str	r3, [r7, #112]	; 0x70
 800aec0:	677a      	str	r2, [r7, #116]	; 0x74
 800aec2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aec6:	4642      	mov	r2, r8
 800aec8:	464b      	mov	r3, r9
 800aeca:	1891      	adds	r1, r2, r2
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	415b      	adcs	r3, r3
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aed6:	4641      	mov	r1, r8
 800aed8:	1851      	adds	r1, r2, r1
 800aeda:	6039      	str	r1, [r7, #0]
 800aedc:	4649      	mov	r1, r9
 800aede:	414b      	adcs	r3, r1
 800aee0:	607b      	str	r3, [r7, #4]
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	f04f 0300 	mov.w	r3, #0
 800aeea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aeee:	4659      	mov	r1, fp
 800aef0:	00cb      	lsls	r3, r1, #3
 800aef2:	4651      	mov	r1, sl
 800aef4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aef8:	4651      	mov	r1, sl
 800aefa:	00ca      	lsls	r2, r1, #3
 800aefc:	4610      	mov	r0, r2
 800aefe:	4619      	mov	r1, r3
 800af00:	4603      	mov	r3, r0
 800af02:	4642      	mov	r2, r8
 800af04:	189b      	adds	r3, r3, r2
 800af06:	66bb      	str	r3, [r7, #104]	; 0x68
 800af08:	464b      	mov	r3, r9
 800af0a:	460a      	mov	r2, r1
 800af0c:	eb42 0303 	adc.w	r3, r2, r3
 800af10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	663b      	str	r3, [r7, #96]	; 0x60
 800af1c:	667a      	str	r2, [r7, #100]	; 0x64
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af2a:	4649      	mov	r1, r9
 800af2c:	008b      	lsls	r3, r1, #2
 800af2e:	4641      	mov	r1, r8
 800af30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af34:	4641      	mov	r1, r8
 800af36:	008a      	lsls	r2, r1, #2
 800af38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af3c:	f7f5 f9b0 	bl	80002a0 <__aeabi_uldivmod>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4b0d      	ldr	r3, [pc, #52]	; (800af7c <UART_SetConfig+0x4e4>)
 800af46:	fba3 1302 	umull	r1, r3, r3, r2
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	2164      	movs	r1, #100	; 0x64
 800af4e:	fb01 f303 	mul.w	r3, r1, r3
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	3332      	adds	r3, #50	; 0x32
 800af58:	4a08      	ldr	r2, [pc, #32]	; (800af7c <UART_SetConfig+0x4e4>)
 800af5a:	fba2 2303 	umull	r2, r3, r2, r3
 800af5e:	095b      	lsrs	r3, r3, #5
 800af60:	f003 020f 	and.w	r2, r3, #15
 800af64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4422      	add	r2, r4
 800af6c:	609a      	str	r2, [r3, #8]
}
 800af6e:	bf00      	nop
 800af70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af74:	46bd      	mov	sp, r7
 800af76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af7a:	bf00      	nop
 800af7c:	51eb851f 	.word	0x51eb851f

0800af80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d123      	bne.n	800afda <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800af9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	6851      	ldr	r1, [r2, #4]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	6892      	ldr	r2, [r2, #8]
 800afa6:	4311      	orrs	r1, r2
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	68d2      	ldr	r2, [r2, #12]
 800afac:	4311      	orrs	r1, r2
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	6912      	ldr	r2, [r2, #16]
 800afb2:	4311      	orrs	r1, r2
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	6952      	ldr	r2, [r2, #20]
 800afb8:	4311      	orrs	r1, r2
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	6992      	ldr	r2, [r2, #24]
 800afbe:	4311      	orrs	r1, r2
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	69d2      	ldr	r2, [r2, #28]
 800afc4:	4311      	orrs	r1, r2
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	6a12      	ldr	r2, [r2, #32]
 800afca:	4311      	orrs	r1, r2
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800afd0:	430a      	orrs	r2, r1
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	e028      	b.n	800b02c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	69d9      	ldr	r1, [r3, #28]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	4319      	orrs	r1, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	430b      	orrs	r3, r1
 800aff2:	431a      	orrs	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	6851      	ldr	r1, [r2, #4]
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	6892      	ldr	r2, [r2, #8]
 800b00c:	4311      	orrs	r1, r2
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	68d2      	ldr	r2, [r2, #12]
 800b012:	4311      	orrs	r1, r2
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	6912      	ldr	r2, [r2, #16]
 800b018:	4311      	orrs	r1, r2
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	6952      	ldr	r2, [r2, #20]
 800b01e:	4311      	orrs	r1, r2
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	6992      	ldr	r2, [r2, #24]
 800b024:	430a      	orrs	r2, r1
 800b026:	431a      	orrs	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b085      	sub	sp, #20
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d128      	bne.n	800b09e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1e59      	subs	r1, r3, #1
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	3b01      	subs	r3, #1
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	4319      	orrs	r1, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	3b01      	subs	r3, #1
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	4319      	orrs	r1, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	031b      	lsls	r3, r3, #12
 800b076:	4319      	orrs	r1, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	4319      	orrs	r1, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	3b01      	subs	r3, #1
 800b088:	051b      	lsls	r3, r3, #20
 800b08a:	4319      	orrs	r1, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	3b01      	subs	r3, #1
 800b092:	061b      	lsls	r3, r3, #24
 800b094:	430b      	orrs	r3, r1
 800b096:	431a      	orrs	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	609a      	str	r2, [r3, #8]
 800b09c:	e02f      	b.n	800b0fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	68d2      	ldr	r2, [r2, #12]
 800b0ae:	3a01      	subs	r2, #1
 800b0b0:	0311      	lsls	r1, r2, #12
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	6952      	ldr	r2, [r2, #20]
 800b0b6:	3a01      	subs	r2, #1
 800b0b8:	0512      	lsls	r2, r2, #20
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	1e59      	subs	r1, r3, #1
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	4319      	orrs	r1, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	4319      	orrs	r1, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	4319      	orrs	r1, r3
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	061b      	lsls	r3, r3, #24
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	0d9b      	lsrs	r3, r3, #22
 800b122:	059b      	lsls	r3, r3, #22
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	6811      	ldr	r1, [r2, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	6852      	ldr	r2, [r2, #4]
 800b12c:	4311      	orrs	r1, r2
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	6892      	ldr	r2, [r2, #8]
 800b132:	3a01      	subs	r2, #1
 800b134:	0152      	lsls	r2, r2, #5
 800b136:	4311      	orrs	r1, r2
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	68d2      	ldr	r2, [r2, #12]
 800b13c:	0252      	lsls	r2, r2, #9
 800b13e:	430a      	orrs	r2, r1
 800b140:	431a      	orrs	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b146:	f7f9 f8f5 	bl	8004334 <HAL_GetTick>
 800b14a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b14c:	e010      	b.n	800b170 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b154:	d00c      	beq.n	800b170 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d007      	beq.n	800b16c <FMC_SDRAM_SendCommand+0x60>
 800b15c:	f7f9 f8ea 	bl	8004334 <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d201      	bcs.n	800b170 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e006      	b.n	800b17e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	f003 0320 	and.w	r3, r3, #32
 800b178:	2b20      	cmp	r3, #32
 800b17a:	d0e8      	beq.n	800b14e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b198:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	0052      	lsls	r2, r2, #1
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	f107 001c 	add.w	r0, r7, #28
 800b1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d122      	bne.n	800b212 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d105      	bne.n	800b206 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f970 	bl	800b4ec <USB_CoreReset>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
 800b210:	e01a      	b.n	800b248 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f964 	bl	800b4ec <USB_CoreReset>
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	639a      	str	r2, [r3, #56]	; 0x38
 800b23a:	e005      	b.n	800b248 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d10b      	bne.n	800b266 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f043 0206 	orr.w	r2, r3, #6
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f043 0220 	orr.w	r2, r3, #32
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b272:	b004      	add	sp, #16
 800b274:	4770      	bx	lr

0800b276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	f023 0201 	bic.w	r2, r3, #1
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d115      	bne.n	800b2e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	f7f9 f840 	bl	800434c <HAL_Delay>
      ms++;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f8fb 	bl	800b4ce <USB_GetMode>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d01e      	beq.n	800b31c <USB_SetCurrentMode+0x84>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b31      	cmp	r3, #49	; 0x31
 800b2e2:	d9f0      	bls.n	800b2c6 <USB_SetCurrentMode+0x2e>
 800b2e4:	e01a      	b.n	800b31c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2e6:	78fb      	ldrb	r3, [r7, #3]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d115      	bne.n	800b318 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	f7f9 f827 	bl	800434c <HAL_Delay>
      ms++;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3301      	adds	r3, #1
 800b302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f8e2 	bl	800b4ce <USB_GetMode>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <USB_SetCurrentMode+0x84>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b31      	cmp	r3, #49	; 0x31
 800b314:	d9f0      	bls.n	800b2f8 <USB_SetCurrentMode+0x60>
 800b316:	e001      	b.n	800b31c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e005      	b.n	800b328 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b32      	cmp	r3, #50	; 0x32
 800b320:	d101      	bne.n	800b326 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4a13      	ldr	r2, [pc, #76]	; (800b394 <USB_FlushTxFifo+0x64>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d901      	bls.n	800b350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e01b      	b.n	800b388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	daf2      	bge.n	800b33e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	019b      	lsls	r3, r3, #6
 800b360:	f043 0220 	orr.w	r2, r3, #32
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4a08      	ldr	r2, [pc, #32]	; (800b394 <USB_FlushTxFifo+0x64>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d901      	bls.n	800b37a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e006      	b.n	800b388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b20      	cmp	r3, #32
 800b384:	d0f0      	beq.n	800b368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	00030d40 	.word	0x00030d40

0800b398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	4a11      	ldr	r2, [pc, #68]	; (800b3f4 <USB_FlushRxFifo+0x5c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d901      	bls.n	800b3b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e018      	b.n	800b3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	daf2      	bge.n	800b3a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2210      	movs	r2, #16
 800b3c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4a08      	ldr	r2, [pc, #32]	; (800b3f4 <USB_FlushRxFifo+0x5c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d901      	bls.n	800b3da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e006      	b.n	800b3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	f003 0310 	and.w	r3, r3, #16
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d0f0      	beq.n	800b3c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	00030d40 	.word	0x00030d40

0800b3f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b08b      	sub	sp, #44	; 0x2c
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b40e:	88fb      	ldrh	r3, [r7, #6]
 800b410:	089b      	lsrs	r3, r3, #2
 800b412:	b29b      	uxth	r3, r3
 800b414:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b41e:	2300      	movs	r3, #0
 800b420:	623b      	str	r3, [r7, #32]
 800b422:	e014      	b.n	800b44e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	3301      	adds	r3, #1
 800b434:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	3301      	adds	r3, #1
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	3301      	adds	r3, #1
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	3301      	adds	r3, #1
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	3301      	adds	r3, #1
 800b44c:	623b      	str	r3, [r7, #32]
 800b44e:	6a3a      	ldr	r2, [r7, #32]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	429a      	cmp	r2, r3
 800b454:	d3e6      	bcc.n	800b424 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b456:	8bfb      	ldrh	r3, [r7, #30]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d01e      	beq.n	800b49a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b466:	461a      	mov	r2, r3
 800b468:	f107 0310 	add.w	r3, r7, #16
 800b46c:	6812      	ldr	r2, [r2, #0]
 800b46e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	fa22 f303 	lsr.w	r3, r2, r3
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	701a      	strb	r2, [r3, #0]
      i++;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	3301      	adds	r3, #1
 800b486:	623b      	str	r3, [r7, #32]
      pDest++;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	3301      	adds	r3, #1
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b48e:	8bfb      	ldrh	r3, [r7, #30]
 800b490:	3b01      	subs	r3, #1
 800b492:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b494:	8bfb      	ldrh	r3, [r7, #30]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1ea      	bne.n	800b470 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	372c      	adds	r7, #44	; 0x2c
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4013      	ands	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f003 0301 	and.w	r3, r3, #1
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4a13      	ldr	r2, [pc, #76]	; (800b550 <USB_CoreReset+0x64>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d901      	bls.n	800b50a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e01b      	b.n	800b542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	daf2      	bge.n	800b4f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	f043 0201 	orr.w	r2, r3, #1
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4a09      	ldr	r2, [pc, #36]	; (800b550 <USB_CoreReset+0x64>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d901      	bls.n	800b534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e006      	b.n	800b542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d0f0      	beq.n	800b522 <USB_CoreReset+0x36>

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	00030d40 	.word	0x00030d40

0800b554 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b554:	b084      	sub	sp, #16
 800b556:	b580      	push	{r7, lr}
 800b558:	b086      	sub	sp, #24
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b574:	461a      	mov	r2, r3
 800b576:	2300      	movs	r3, #0
 800b578:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d10a      	bne.n	800b5c6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5be:	f043 0304 	orr.w	r3, r3, #4
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	e014      	b.n	800b5f0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5d4:	f023 0304 	bic.w	r3, r3, #4
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	e009      	b.n	800b5f0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5ea:	f023 0304 	bic.w	r3, r3, #4
 800b5ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b5f0:	2110      	movs	r1, #16
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe9c 	bl	800b330 <USB_FlushTxFifo>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff fec8 	bl	800b398 <USB_FlushRxFifo>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b612:	2300      	movs	r3, #0
 800b614:	613b      	str	r3, [r7, #16]
 800b616:	e015      	b.n	800b644 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b624:	461a      	mov	r2, r3
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b638:	461a      	mov	r2, r3
 800b63a:	2300      	movs	r3, #0
 800b63c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	3301      	adds	r3, #1
 800b642:	613b      	str	r3, [r7, #16]
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3e5      	bcc.n	800b618 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f04f 32ff 	mov.w	r2, #4294967295
 800b658:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b66c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a13      	ldr	r2, [pc, #76]	; (800b6c0 <USB_HostInit+0x16c>)
 800b672:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a13      	ldr	r2, [pc, #76]	; (800b6c4 <USB_HostInit+0x170>)
 800b678:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b67c:	e009      	b.n	800b692 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2280      	movs	r2, #128	; 0x80
 800b682:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a10      	ldr	r2, [pc, #64]	; (800b6c8 <USB_HostInit+0x174>)
 800b688:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a0f      	ldr	r2, [pc, #60]	; (800b6cc <USB_HostInit+0x178>)
 800b68e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f043 0210 	orr.w	r2, r3, #16
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	699a      	ldr	r2, [r3, #24]
 800b6a8:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <USB_HostInit+0x17c>)
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6bc:	b004      	add	sp, #16
 800b6be:	4770      	bx	lr
 800b6c0:	01000200 	.word	0x01000200
 800b6c4:	00e00300 	.word	0x00e00300
 800b6c8:	00600080 	.word	0x00600080
 800b6cc:	004000e0 	.word	0x004000e0
 800b6d0:	a3200008 	.word	0xa3200008

0800b6d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6f2:	f023 0303 	bic.w	r3, r3, #3
 800b6f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b70c:	4313      	orrs	r3, r2
 800b70e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d107      	bne.n	800b726 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b71c:	461a      	mov	r2, r3
 800b71e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b722:	6053      	str	r3, [r2, #4]
 800b724:	e009      	b.n	800b73a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b726:	78fb      	ldrb	r3, [r7, #3]
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d106      	bne.n	800b73a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b732:	461a      	mov	r2, r3
 800b734:	f241 7370 	movw	r3, #6000	; 0x1770
 800b738:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	b29b      	uxth	r3, r3
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b089      	sub	sp, #36	; 0x24
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	0c9b      	lsrs	r3, r3, #18
 800b792:	f003 0303 	and.w	r3, r3, #3
 800b796:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	0fdb      	lsrs	r3, r3, #31
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	f003 0320 	and.w	r3, r3, #32
 800b7b6:	2b20      	cmp	r3, #32
 800b7b8:	d104      	bne.n	800b7c4 <USB_HC_Halt+0x5a>
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e0c8      	b.n	800b956 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <USB_HC_Halt+0x66>
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d163      	bne.n	800b898 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	0151      	lsls	r1, r2, #5
 800b7e2:	69fa      	ldr	r2, [r7, #28]
 800b7e4:	440a      	add	r2, r1
 800b7e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f040 80ab 	bne.w	800b954 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d133      	bne.n	800b872 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4413      	add	r3, r2
 800b812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b828:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	015a      	lsls	r2, r3, #5
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	4413      	add	r3, r2
 800b832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	0151      	lsls	r1, r2, #5
 800b83c:	69fa      	ldr	r2, [r7, #28]
 800b83e:	440a      	add	r2, r1
 800b840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b848:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3301      	adds	r3, #1
 800b84e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b856:	d81d      	bhi.n	800b894 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b86a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86e:	d0ec      	beq.n	800b84a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b870:	e070      	b.n	800b954 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	0151      	lsls	r1, r2, #5
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	440a      	add	r2, r1
 800b888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b88c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b890:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b892:	e05f      	b.n	800b954 <USB_HC_Halt+0x1ea>
            break;
 800b894:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b896:	e05d      	b.n	800b954 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	0151      	lsls	r1, r2, #5
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	440a      	add	r2, r1
 800b8ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d133      	bne.n	800b930 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	0151      	lsls	r1, r2, #5
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	440a      	add	r2, r1
 800b8de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	0151      	lsls	r1, r2, #5
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	440a      	add	r2, r1
 800b8fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b906:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b914:	d81d      	bhi.n	800b952 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b92c:	d0ec      	beq.n	800b908 <USB_HC_Halt+0x19e>
 800b92e:	e011      	b.n	800b954 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	4413      	add	r3, r2
 800b938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	0151      	lsls	r1, r2, #5
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	440a      	add	r2, r1
 800b946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b94a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	e000      	b.n	800b954 <USB_HC_Halt+0x1ea>
          break;
 800b952:	bf00      	nop
    }
  }

  return HAL_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3724      	adds	r7, #36	; 0x24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <__errno>:
 800b964:	4b01      	ldr	r3, [pc, #4]	; (800b96c <__errno+0x8>)
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	20000090 	.word	0x20000090

0800b970 <__libc_init_array>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4d0d      	ldr	r5, [pc, #52]	; (800b9a8 <__libc_init_array+0x38>)
 800b974:	4c0d      	ldr	r4, [pc, #52]	; (800b9ac <__libc_init_array+0x3c>)
 800b976:	1b64      	subs	r4, r4, r5
 800b978:	10a4      	asrs	r4, r4, #2
 800b97a:	2600      	movs	r6, #0
 800b97c:	42a6      	cmp	r6, r4
 800b97e:	d109      	bne.n	800b994 <__libc_init_array+0x24>
 800b980:	4d0b      	ldr	r5, [pc, #44]	; (800b9b0 <__libc_init_array+0x40>)
 800b982:	4c0c      	ldr	r4, [pc, #48]	; (800b9b4 <__libc_init_array+0x44>)
 800b984:	f000 fc8e 	bl	800c2a4 <_init>
 800b988:	1b64      	subs	r4, r4, r5
 800b98a:	10a4      	asrs	r4, r4, #2
 800b98c:	2600      	movs	r6, #0
 800b98e:	42a6      	cmp	r6, r4
 800b990:	d105      	bne.n	800b99e <__libc_init_array+0x2e>
 800b992:	bd70      	pop	{r4, r5, r6, pc}
 800b994:	f855 3b04 	ldr.w	r3, [r5], #4
 800b998:	4798      	blx	r3
 800b99a:	3601      	adds	r6, #1
 800b99c:	e7ee      	b.n	800b97c <__libc_init_array+0xc>
 800b99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a2:	4798      	blx	r3
 800b9a4:	3601      	adds	r6, #1
 800b9a6:	e7f2      	b.n	800b98e <__libc_init_array+0x1e>
 800b9a8:	0800def8 	.word	0x0800def8
 800b9ac:	0800def8 	.word	0x0800def8
 800b9b0:	0800def8 	.word	0x0800def8
 800b9b4:	0800defc 	.word	0x0800defc

0800b9b8 <memset>:
 800b9b8:	4402      	add	r2, r0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d100      	bne.n	800b9c2 <memset+0xa>
 800b9c0:	4770      	bx	lr
 800b9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c6:	e7f9      	b.n	800b9bc <memset+0x4>

0800b9c8 <siprintf>:
 800b9c8:	b40e      	push	{r1, r2, r3}
 800b9ca:	b500      	push	{lr}
 800b9cc:	b09c      	sub	sp, #112	; 0x70
 800b9ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b9d0:	9002      	str	r0, [sp, #8]
 800b9d2:	9006      	str	r0, [sp, #24]
 800b9d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9d8:	4809      	ldr	r0, [pc, #36]	; (800ba00 <siprintf+0x38>)
 800b9da:	9107      	str	r1, [sp, #28]
 800b9dc:	9104      	str	r1, [sp, #16]
 800b9de:	4909      	ldr	r1, [pc, #36]	; (800ba04 <siprintf+0x3c>)
 800b9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e4:	9105      	str	r1, [sp, #20]
 800b9e6:	6800      	ldr	r0, [r0, #0]
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	a902      	add	r1, sp, #8
 800b9ec:	f000 f868 	bl	800bac0 <_svfiprintf_r>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	b01c      	add	sp, #112	; 0x70
 800b9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9fc:	b003      	add	sp, #12
 800b9fe:	4770      	bx	lr
 800ba00:	20000090 	.word	0x20000090
 800ba04:	ffff0208 	.word	0xffff0208

0800ba08 <__ssputs_r>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	688e      	ldr	r6, [r1, #8]
 800ba0e:	429e      	cmp	r6, r3
 800ba10:	4682      	mov	sl, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	4690      	mov	r8, r2
 800ba16:	461f      	mov	r7, r3
 800ba18:	d838      	bhi.n	800ba8c <__ssputs_r+0x84>
 800ba1a:	898a      	ldrh	r2, [r1, #12]
 800ba1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba20:	d032      	beq.n	800ba88 <__ssputs_r+0x80>
 800ba22:	6825      	ldr	r5, [r4, #0]
 800ba24:	6909      	ldr	r1, [r1, #16]
 800ba26:	eba5 0901 	sub.w	r9, r5, r1
 800ba2a:	6965      	ldr	r5, [r4, #20]
 800ba2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba34:	3301      	adds	r3, #1
 800ba36:	444b      	add	r3, r9
 800ba38:	106d      	asrs	r5, r5, #1
 800ba3a:	429d      	cmp	r5, r3
 800ba3c:	bf38      	it	cc
 800ba3e:	461d      	movcc	r5, r3
 800ba40:	0553      	lsls	r3, r2, #21
 800ba42:	d531      	bpl.n	800baa8 <__ssputs_r+0xa0>
 800ba44:	4629      	mov	r1, r5
 800ba46:	f000 fb63 	bl	800c110 <_malloc_r>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	b950      	cbnz	r0, 800ba64 <__ssputs_r+0x5c>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	f8ca 3000 	str.w	r3, [sl]
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba64:	6921      	ldr	r1, [r4, #16]
 800ba66:	464a      	mov	r2, r9
 800ba68:	f000 fabe 	bl	800bfe8 <memcpy>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	6126      	str	r6, [r4, #16]
 800ba7a:	6165      	str	r5, [r4, #20]
 800ba7c:	444e      	add	r6, r9
 800ba7e:	eba5 0509 	sub.w	r5, r5, r9
 800ba82:	6026      	str	r6, [r4, #0]
 800ba84:	60a5      	str	r5, [r4, #8]
 800ba86:	463e      	mov	r6, r7
 800ba88:	42be      	cmp	r6, r7
 800ba8a:	d900      	bls.n	800ba8e <__ssputs_r+0x86>
 800ba8c:	463e      	mov	r6, r7
 800ba8e:	6820      	ldr	r0, [r4, #0]
 800ba90:	4632      	mov	r2, r6
 800ba92:	4641      	mov	r1, r8
 800ba94:	f000 fab6 	bl	800c004 <memmove>
 800ba98:	68a3      	ldr	r3, [r4, #8]
 800ba9a:	1b9b      	subs	r3, r3, r6
 800ba9c:	60a3      	str	r3, [r4, #8]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	4433      	add	r3, r6
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	2000      	movs	r0, #0
 800baa6:	e7db      	b.n	800ba60 <__ssputs_r+0x58>
 800baa8:	462a      	mov	r2, r5
 800baaa:	f000 fba5 	bl	800c1f8 <_realloc_r>
 800baae:	4606      	mov	r6, r0
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1e1      	bne.n	800ba78 <__ssputs_r+0x70>
 800bab4:	6921      	ldr	r1, [r4, #16]
 800bab6:	4650      	mov	r0, sl
 800bab8:	f000 fabe 	bl	800c038 <_free_r>
 800babc:	e7c7      	b.n	800ba4e <__ssputs_r+0x46>
	...

0800bac0 <_svfiprintf_r>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4698      	mov	r8, r3
 800bac6:	898b      	ldrh	r3, [r1, #12]
 800bac8:	061b      	lsls	r3, r3, #24
 800baca:	b09d      	sub	sp, #116	; 0x74
 800bacc:	4607      	mov	r7, r0
 800bace:	460d      	mov	r5, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	d50e      	bpl.n	800baf2 <_svfiprintf_r+0x32>
 800bad4:	690b      	ldr	r3, [r1, #16]
 800bad6:	b963      	cbnz	r3, 800baf2 <_svfiprintf_r+0x32>
 800bad8:	2140      	movs	r1, #64	; 0x40
 800bada:	f000 fb19 	bl	800c110 <_malloc_r>
 800bade:	6028      	str	r0, [r5, #0]
 800bae0:	6128      	str	r0, [r5, #16]
 800bae2:	b920      	cbnz	r0, 800baee <_svfiprintf_r+0x2e>
 800bae4:	230c      	movs	r3, #12
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295
 800baec:	e0d1      	b.n	800bc92 <_svfiprintf_r+0x1d2>
 800baee:	2340      	movs	r3, #64	; 0x40
 800baf0:	616b      	str	r3, [r5, #20]
 800baf2:	2300      	movs	r3, #0
 800baf4:	9309      	str	r3, [sp, #36]	; 0x24
 800baf6:	2320      	movs	r3, #32
 800baf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb00:	2330      	movs	r3, #48	; 0x30
 800bb02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcac <_svfiprintf_r+0x1ec>
 800bb06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb0a:	f04f 0901 	mov.w	r9, #1
 800bb0e:	4623      	mov	r3, r4
 800bb10:	469a      	mov	sl, r3
 800bb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb16:	b10a      	cbz	r2, 800bb1c <_svfiprintf_r+0x5c>
 800bb18:	2a25      	cmp	r2, #37	; 0x25
 800bb1a:	d1f9      	bne.n	800bb10 <_svfiprintf_r+0x50>
 800bb1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb20:	d00b      	beq.n	800bb3a <_svfiprintf_r+0x7a>
 800bb22:	465b      	mov	r3, fp
 800bb24:	4622      	mov	r2, r4
 800bb26:	4629      	mov	r1, r5
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f7ff ff6d 	bl	800ba08 <__ssputs_r>
 800bb2e:	3001      	adds	r0, #1
 800bb30:	f000 80aa 	beq.w	800bc88 <_svfiprintf_r+0x1c8>
 800bb34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb36:	445a      	add	r2, fp
 800bb38:	9209      	str	r2, [sp, #36]	; 0x24
 800bb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 80a2 	beq.w	800bc88 <_svfiprintf_r+0x1c8>
 800bb44:	2300      	movs	r3, #0
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb4e:	f10a 0a01 	add.w	sl, sl, #1
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb5a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb5c:	4654      	mov	r4, sl
 800bb5e:	2205      	movs	r2, #5
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	4851      	ldr	r0, [pc, #324]	; (800bcac <_svfiprintf_r+0x1ec>)
 800bb66:	f7f4 fb4b 	bl	8000200 <memchr>
 800bb6a:	9a04      	ldr	r2, [sp, #16]
 800bb6c:	b9d8      	cbnz	r0, 800bba6 <_svfiprintf_r+0xe6>
 800bb6e:	06d0      	lsls	r0, r2, #27
 800bb70:	bf44      	itt	mi
 800bb72:	2320      	movmi	r3, #32
 800bb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb78:	0711      	lsls	r1, r2, #28
 800bb7a:	bf44      	itt	mi
 800bb7c:	232b      	movmi	r3, #43	; 0x2b
 800bb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb82:	f89a 3000 	ldrb.w	r3, [sl]
 800bb86:	2b2a      	cmp	r3, #42	; 0x2a
 800bb88:	d015      	beq.n	800bbb6 <_svfiprintf_r+0xf6>
 800bb8a:	9a07      	ldr	r2, [sp, #28]
 800bb8c:	4654      	mov	r4, sl
 800bb8e:	2000      	movs	r0, #0
 800bb90:	f04f 0c0a 	mov.w	ip, #10
 800bb94:	4621      	mov	r1, r4
 800bb96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9a:	3b30      	subs	r3, #48	; 0x30
 800bb9c:	2b09      	cmp	r3, #9
 800bb9e:	d94e      	bls.n	800bc3e <_svfiprintf_r+0x17e>
 800bba0:	b1b0      	cbz	r0, 800bbd0 <_svfiprintf_r+0x110>
 800bba2:	9207      	str	r2, [sp, #28]
 800bba4:	e014      	b.n	800bbd0 <_svfiprintf_r+0x110>
 800bba6:	eba0 0308 	sub.w	r3, r0, r8
 800bbaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	9304      	str	r3, [sp, #16]
 800bbb2:	46a2      	mov	sl, r4
 800bbb4:	e7d2      	b.n	800bb5c <_svfiprintf_r+0x9c>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	1d19      	adds	r1, r3, #4
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	9103      	str	r1, [sp, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bfbb      	ittet	lt
 800bbc2:	425b      	neglt	r3, r3
 800bbc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbc8:	9307      	strge	r3, [sp, #28]
 800bbca:	9307      	strlt	r3, [sp, #28]
 800bbcc:	bfb8      	it	lt
 800bbce:	9204      	strlt	r2, [sp, #16]
 800bbd0:	7823      	ldrb	r3, [r4, #0]
 800bbd2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd4:	d10c      	bne.n	800bbf0 <_svfiprintf_r+0x130>
 800bbd6:	7863      	ldrb	r3, [r4, #1]
 800bbd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbda:	d135      	bne.n	800bc48 <_svfiprintf_r+0x188>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	1d1a      	adds	r2, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9203      	str	r2, [sp, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bfb8      	it	lt
 800bbe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbec:	3402      	adds	r4, #2
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bcbc <_svfiprintf_r+0x1fc>
 800bbf4:	7821      	ldrb	r1, [r4, #0]
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	f7f4 fb01 	bl	8000200 <memchr>
 800bbfe:	b140      	cbz	r0, 800bc12 <_svfiprintf_r+0x152>
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	eba0 000a 	sub.w	r0, r0, sl
 800bc06:	fa03 f000 	lsl.w	r0, r3, r0
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	4303      	orrs	r3, r0
 800bc0e:	3401      	adds	r4, #1
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc16:	4826      	ldr	r0, [pc, #152]	; (800bcb0 <_svfiprintf_r+0x1f0>)
 800bc18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc1c:	2206      	movs	r2, #6
 800bc1e:	f7f4 faef 	bl	8000200 <memchr>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d038      	beq.n	800bc98 <_svfiprintf_r+0x1d8>
 800bc26:	4b23      	ldr	r3, [pc, #140]	; (800bcb4 <_svfiprintf_r+0x1f4>)
 800bc28:	bb1b      	cbnz	r3, 800bc72 <_svfiprintf_r+0x1b2>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	3307      	adds	r3, #7
 800bc2e:	f023 0307 	bic.w	r3, r3, #7
 800bc32:	3308      	adds	r3, #8
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	4433      	add	r3, r6
 800bc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3c:	e767      	b.n	800bb0e <_svfiprintf_r+0x4e>
 800bc3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc42:	460c      	mov	r4, r1
 800bc44:	2001      	movs	r0, #1
 800bc46:	e7a5      	b.n	800bb94 <_svfiprintf_r+0xd4>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	3401      	adds	r4, #1
 800bc4c:	9305      	str	r3, [sp, #20]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f04f 0c0a 	mov.w	ip, #10
 800bc54:	4620      	mov	r0, r4
 800bc56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5a:	3a30      	subs	r2, #48	; 0x30
 800bc5c:	2a09      	cmp	r2, #9
 800bc5e:	d903      	bls.n	800bc68 <_svfiprintf_r+0x1a8>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0c5      	beq.n	800bbf0 <_svfiprintf_r+0x130>
 800bc64:	9105      	str	r1, [sp, #20]
 800bc66:	e7c3      	b.n	800bbf0 <_svfiprintf_r+0x130>
 800bc68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e7f0      	b.n	800bc54 <_svfiprintf_r+0x194>
 800bc72:	ab03      	add	r3, sp, #12
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	462a      	mov	r2, r5
 800bc78:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <_svfiprintf_r+0x1f8>)
 800bc7a:	a904      	add	r1, sp, #16
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f3af 8000 	nop.w
 800bc82:	1c42      	adds	r2, r0, #1
 800bc84:	4606      	mov	r6, r0
 800bc86:	d1d6      	bne.n	800bc36 <_svfiprintf_r+0x176>
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	065b      	lsls	r3, r3, #25
 800bc8c:	f53f af2c 	bmi.w	800bae8 <_svfiprintf_r+0x28>
 800bc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc92:	b01d      	add	sp, #116	; 0x74
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	ab03      	add	r3, sp, #12
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <_svfiprintf_r+0x1f8>)
 800bca0:	a904      	add	r1, sp, #16
 800bca2:	4638      	mov	r0, r7
 800bca4:	f000 f87a 	bl	800bd9c <_printf_i>
 800bca8:	e7eb      	b.n	800bc82 <_svfiprintf_r+0x1c2>
 800bcaa:	bf00      	nop
 800bcac:	0800debc 	.word	0x0800debc
 800bcb0:	0800dec6 	.word	0x0800dec6
 800bcb4:	00000000 	.word	0x00000000
 800bcb8:	0800ba09 	.word	0x0800ba09
 800bcbc:	0800dec2 	.word	0x0800dec2

0800bcc0 <_printf_common>:
 800bcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc4:	4616      	mov	r6, r2
 800bcc6:	4699      	mov	r9, r3
 800bcc8:	688a      	ldr	r2, [r1, #8]
 800bcca:	690b      	ldr	r3, [r1, #16]
 800bccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	bfb8      	it	lt
 800bcd4:	4613      	movlt	r3, r2
 800bcd6:	6033      	str	r3, [r6, #0]
 800bcd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcdc:	4607      	mov	r7, r0
 800bcde:	460c      	mov	r4, r1
 800bce0:	b10a      	cbz	r2, 800bce6 <_printf_common+0x26>
 800bce2:	3301      	adds	r3, #1
 800bce4:	6033      	str	r3, [r6, #0]
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	0699      	lsls	r1, r3, #26
 800bcea:	bf42      	ittt	mi
 800bcec:	6833      	ldrmi	r3, [r6, #0]
 800bcee:	3302      	addmi	r3, #2
 800bcf0:	6033      	strmi	r3, [r6, #0]
 800bcf2:	6825      	ldr	r5, [r4, #0]
 800bcf4:	f015 0506 	ands.w	r5, r5, #6
 800bcf8:	d106      	bne.n	800bd08 <_printf_common+0x48>
 800bcfa:	f104 0a19 	add.w	sl, r4, #25
 800bcfe:	68e3      	ldr	r3, [r4, #12]
 800bd00:	6832      	ldr	r2, [r6, #0]
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	dc26      	bgt.n	800bd56 <_printf_common+0x96>
 800bd08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd0c:	1e13      	subs	r3, r2, #0
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	bf18      	it	ne
 800bd12:	2301      	movne	r3, #1
 800bd14:	0692      	lsls	r2, r2, #26
 800bd16:	d42b      	bmi.n	800bd70 <_printf_common+0xb0>
 800bd18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4638      	mov	r0, r7
 800bd20:	47c0      	blx	r8
 800bd22:	3001      	adds	r0, #1
 800bd24:	d01e      	beq.n	800bd64 <_printf_common+0xa4>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	68e5      	ldr	r5, [r4, #12]
 800bd2a:	6832      	ldr	r2, [r6, #0]
 800bd2c:	f003 0306 	and.w	r3, r3, #6
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	bf08      	it	eq
 800bd34:	1aad      	subeq	r5, r5, r2
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	6922      	ldr	r2, [r4, #16]
 800bd3a:	bf0c      	ite	eq
 800bd3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd40:	2500      	movne	r5, #0
 800bd42:	4293      	cmp	r3, r2
 800bd44:	bfc4      	itt	gt
 800bd46:	1a9b      	subgt	r3, r3, r2
 800bd48:	18ed      	addgt	r5, r5, r3
 800bd4a:	2600      	movs	r6, #0
 800bd4c:	341a      	adds	r4, #26
 800bd4e:	42b5      	cmp	r5, r6
 800bd50:	d11a      	bne.n	800bd88 <_printf_common+0xc8>
 800bd52:	2000      	movs	r0, #0
 800bd54:	e008      	b.n	800bd68 <_printf_common+0xa8>
 800bd56:	2301      	movs	r3, #1
 800bd58:	4652      	mov	r2, sl
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	47c0      	blx	r8
 800bd60:	3001      	adds	r0, #1
 800bd62:	d103      	bne.n	800bd6c <_printf_common+0xac>
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295
 800bd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6c:	3501      	adds	r5, #1
 800bd6e:	e7c6      	b.n	800bcfe <_printf_common+0x3e>
 800bd70:	18e1      	adds	r1, r4, r3
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	2030      	movs	r0, #48	; 0x30
 800bd76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd7a:	4422      	add	r2, r4
 800bd7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd84:	3302      	adds	r3, #2
 800bd86:	e7c7      	b.n	800bd18 <_printf_common+0x58>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	4638      	mov	r0, r7
 800bd90:	47c0      	blx	r8
 800bd92:	3001      	adds	r0, #1
 800bd94:	d0e6      	beq.n	800bd64 <_printf_common+0xa4>
 800bd96:	3601      	adds	r6, #1
 800bd98:	e7d9      	b.n	800bd4e <_printf_common+0x8e>
	...

0800bd9c <_printf_i>:
 800bd9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bda0:	7e0f      	ldrb	r7, [r1, #24]
 800bda2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bda4:	2f78      	cmp	r7, #120	; 0x78
 800bda6:	4691      	mov	r9, r2
 800bda8:	4680      	mov	r8, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	469a      	mov	sl, r3
 800bdae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdb2:	d807      	bhi.n	800bdc4 <_printf_i+0x28>
 800bdb4:	2f62      	cmp	r7, #98	; 0x62
 800bdb6:	d80a      	bhi.n	800bdce <_printf_i+0x32>
 800bdb8:	2f00      	cmp	r7, #0
 800bdba:	f000 80d8 	beq.w	800bf6e <_printf_i+0x1d2>
 800bdbe:	2f58      	cmp	r7, #88	; 0x58
 800bdc0:	f000 80a3 	beq.w	800bf0a <_printf_i+0x16e>
 800bdc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdcc:	e03a      	b.n	800be44 <_printf_i+0xa8>
 800bdce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdd2:	2b15      	cmp	r3, #21
 800bdd4:	d8f6      	bhi.n	800bdc4 <_printf_i+0x28>
 800bdd6:	a101      	add	r1, pc, #4	; (adr r1, 800bddc <_printf_i+0x40>)
 800bdd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bddc:	0800be35 	.word	0x0800be35
 800bde0:	0800be49 	.word	0x0800be49
 800bde4:	0800bdc5 	.word	0x0800bdc5
 800bde8:	0800bdc5 	.word	0x0800bdc5
 800bdec:	0800bdc5 	.word	0x0800bdc5
 800bdf0:	0800bdc5 	.word	0x0800bdc5
 800bdf4:	0800be49 	.word	0x0800be49
 800bdf8:	0800bdc5 	.word	0x0800bdc5
 800bdfc:	0800bdc5 	.word	0x0800bdc5
 800be00:	0800bdc5 	.word	0x0800bdc5
 800be04:	0800bdc5 	.word	0x0800bdc5
 800be08:	0800bf55 	.word	0x0800bf55
 800be0c:	0800be79 	.word	0x0800be79
 800be10:	0800bf37 	.word	0x0800bf37
 800be14:	0800bdc5 	.word	0x0800bdc5
 800be18:	0800bdc5 	.word	0x0800bdc5
 800be1c:	0800bf77 	.word	0x0800bf77
 800be20:	0800bdc5 	.word	0x0800bdc5
 800be24:	0800be79 	.word	0x0800be79
 800be28:	0800bdc5 	.word	0x0800bdc5
 800be2c:	0800bdc5 	.word	0x0800bdc5
 800be30:	0800bf3f 	.word	0x0800bf3f
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	1d1a      	adds	r2, r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	602a      	str	r2, [r5, #0]
 800be3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be44:	2301      	movs	r3, #1
 800be46:	e0a3      	b.n	800bf90 <_printf_i+0x1f4>
 800be48:	6820      	ldr	r0, [r4, #0]
 800be4a:	6829      	ldr	r1, [r5, #0]
 800be4c:	0606      	lsls	r6, r0, #24
 800be4e:	f101 0304 	add.w	r3, r1, #4
 800be52:	d50a      	bpl.n	800be6a <_printf_i+0xce>
 800be54:	680e      	ldr	r6, [r1, #0]
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	2e00      	cmp	r6, #0
 800be5a:	da03      	bge.n	800be64 <_printf_i+0xc8>
 800be5c:	232d      	movs	r3, #45	; 0x2d
 800be5e:	4276      	negs	r6, r6
 800be60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be64:	485e      	ldr	r0, [pc, #376]	; (800bfe0 <_printf_i+0x244>)
 800be66:	230a      	movs	r3, #10
 800be68:	e019      	b.n	800be9e <_printf_i+0x102>
 800be6a:	680e      	ldr	r6, [r1, #0]
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be72:	bf18      	it	ne
 800be74:	b236      	sxthne	r6, r6
 800be76:	e7ef      	b.n	800be58 <_printf_i+0xbc>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	6820      	ldr	r0, [r4, #0]
 800be7c:	1d19      	adds	r1, r3, #4
 800be7e:	6029      	str	r1, [r5, #0]
 800be80:	0601      	lsls	r1, r0, #24
 800be82:	d501      	bpl.n	800be88 <_printf_i+0xec>
 800be84:	681e      	ldr	r6, [r3, #0]
 800be86:	e002      	b.n	800be8e <_printf_i+0xf2>
 800be88:	0646      	lsls	r6, r0, #25
 800be8a:	d5fb      	bpl.n	800be84 <_printf_i+0xe8>
 800be8c:	881e      	ldrh	r6, [r3, #0]
 800be8e:	4854      	ldr	r0, [pc, #336]	; (800bfe0 <_printf_i+0x244>)
 800be90:	2f6f      	cmp	r7, #111	; 0x6f
 800be92:	bf0c      	ite	eq
 800be94:	2308      	moveq	r3, #8
 800be96:	230a      	movne	r3, #10
 800be98:	2100      	movs	r1, #0
 800be9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be9e:	6865      	ldr	r5, [r4, #4]
 800bea0:	60a5      	str	r5, [r4, #8]
 800bea2:	2d00      	cmp	r5, #0
 800bea4:	bfa2      	ittt	ge
 800bea6:	6821      	ldrge	r1, [r4, #0]
 800bea8:	f021 0104 	bicge.w	r1, r1, #4
 800beac:	6021      	strge	r1, [r4, #0]
 800beae:	b90e      	cbnz	r6, 800beb4 <_printf_i+0x118>
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	d04d      	beq.n	800bf50 <_printf_i+0x1b4>
 800beb4:	4615      	mov	r5, r2
 800beb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800beba:	fb03 6711 	mls	r7, r3, r1, r6
 800bebe:	5dc7      	ldrb	r7, [r0, r7]
 800bec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bec4:	4637      	mov	r7, r6
 800bec6:	42bb      	cmp	r3, r7
 800bec8:	460e      	mov	r6, r1
 800beca:	d9f4      	bls.n	800beb6 <_printf_i+0x11a>
 800becc:	2b08      	cmp	r3, #8
 800bece:	d10b      	bne.n	800bee8 <_printf_i+0x14c>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	07de      	lsls	r6, r3, #31
 800bed4:	d508      	bpl.n	800bee8 <_printf_i+0x14c>
 800bed6:	6923      	ldr	r3, [r4, #16]
 800bed8:	6861      	ldr	r1, [r4, #4]
 800beda:	4299      	cmp	r1, r3
 800bedc:	bfde      	ittt	le
 800bede:	2330      	movle	r3, #48	; 0x30
 800bee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bee8:	1b52      	subs	r2, r2, r5
 800beea:	6122      	str	r2, [r4, #16]
 800beec:	f8cd a000 	str.w	sl, [sp]
 800bef0:	464b      	mov	r3, r9
 800bef2:	aa03      	add	r2, sp, #12
 800bef4:	4621      	mov	r1, r4
 800bef6:	4640      	mov	r0, r8
 800bef8:	f7ff fee2 	bl	800bcc0 <_printf_common>
 800befc:	3001      	adds	r0, #1
 800befe:	d14c      	bne.n	800bf9a <_printf_i+0x1fe>
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	b004      	add	sp, #16
 800bf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0a:	4835      	ldr	r0, [pc, #212]	; (800bfe0 <_printf_i+0x244>)
 800bf0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf10:	6829      	ldr	r1, [r5, #0]
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf18:	6029      	str	r1, [r5, #0]
 800bf1a:	061d      	lsls	r5, r3, #24
 800bf1c:	d514      	bpl.n	800bf48 <_printf_i+0x1ac>
 800bf1e:	07df      	lsls	r7, r3, #31
 800bf20:	bf44      	itt	mi
 800bf22:	f043 0320 	orrmi.w	r3, r3, #32
 800bf26:	6023      	strmi	r3, [r4, #0]
 800bf28:	b91e      	cbnz	r6, 800bf32 <_printf_i+0x196>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	f023 0320 	bic.w	r3, r3, #32
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	2310      	movs	r3, #16
 800bf34:	e7b0      	b.n	800be98 <_printf_i+0xfc>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	f043 0320 	orr.w	r3, r3, #32
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	2378      	movs	r3, #120	; 0x78
 800bf40:	4828      	ldr	r0, [pc, #160]	; (800bfe4 <_printf_i+0x248>)
 800bf42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf46:	e7e3      	b.n	800bf10 <_printf_i+0x174>
 800bf48:	0659      	lsls	r1, r3, #25
 800bf4a:	bf48      	it	mi
 800bf4c:	b2b6      	uxthmi	r6, r6
 800bf4e:	e7e6      	b.n	800bf1e <_printf_i+0x182>
 800bf50:	4615      	mov	r5, r2
 800bf52:	e7bb      	b.n	800becc <_printf_i+0x130>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	6826      	ldr	r6, [r4, #0]
 800bf58:	6961      	ldr	r1, [r4, #20]
 800bf5a:	1d18      	adds	r0, r3, #4
 800bf5c:	6028      	str	r0, [r5, #0]
 800bf5e:	0635      	lsls	r5, r6, #24
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	d501      	bpl.n	800bf68 <_printf_i+0x1cc>
 800bf64:	6019      	str	r1, [r3, #0]
 800bf66:	e002      	b.n	800bf6e <_printf_i+0x1d2>
 800bf68:	0670      	lsls	r0, r6, #25
 800bf6a:	d5fb      	bpl.n	800bf64 <_printf_i+0x1c8>
 800bf6c:	8019      	strh	r1, [r3, #0]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	6123      	str	r3, [r4, #16]
 800bf72:	4615      	mov	r5, r2
 800bf74:	e7ba      	b.n	800beec <_printf_i+0x150>
 800bf76:	682b      	ldr	r3, [r5, #0]
 800bf78:	1d1a      	adds	r2, r3, #4
 800bf7a:	602a      	str	r2, [r5, #0]
 800bf7c:	681d      	ldr	r5, [r3, #0]
 800bf7e:	6862      	ldr	r2, [r4, #4]
 800bf80:	2100      	movs	r1, #0
 800bf82:	4628      	mov	r0, r5
 800bf84:	f7f4 f93c 	bl	8000200 <memchr>
 800bf88:	b108      	cbz	r0, 800bf8e <_printf_i+0x1f2>
 800bf8a:	1b40      	subs	r0, r0, r5
 800bf8c:	6060      	str	r0, [r4, #4]
 800bf8e:	6863      	ldr	r3, [r4, #4]
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	2300      	movs	r3, #0
 800bf94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf98:	e7a8      	b.n	800beec <_printf_i+0x150>
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	47d0      	blx	sl
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d0ab      	beq.n	800bf00 <_printf_i+0x164>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	079b      	lsls	r3, r3, #30
 800bfac:	d413      	bmi.n	800bfd6 <_printf_i+0x23a>
 800bfae:	68e0      	ldr	r0, [r4, #12]
 800bfb0:	9b03      	ldr	r3, [sp, #12]
 800bfb2:	4298      	cmp	r0, r3
 800bfb4:	bfb8      	it	lt
 800bfb6:	4618      	movlt	r0, r3
 800bfb8:	e7a4      	b.n	800bf04 <_printf_i+0x168>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	47d0      	blx	sl
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d09b      	beq.n	800bf00 <_printf_i+0x164>
 800bfc8:	3501      	adds	r5, #1
 800bfca:	68e3      	ldr	r3, [r4, #12]
 800bfcc:	9903      	ldr	r1, [sp, #12]
 800bfce:	1a5b      	subs	r3, r3, r1
 800bfd0:	42ab      	cmp	r3, r5
 800bfd2:	dcf2      	bgt.n	800bfba <_printf_i+0x21e>
 800bfd4:	e7eb      	b.n	800bfae <_printf_i+0x212>
 800bfd6:	2500      	movs	r5, #0
 800bfd8:	f104 0619 	add.w	r6, r4, #25
 800bfdc:	e7f5      	b.n	800bfca <_printf_i+0x22e>
 800bfde:	bf00      	nop
 800bfe0:	0800decd 	.word	0x0800decd
 800bfe4:	0800dede 	.word	0x0800dede

0800bfe8 <memcpy>:
 800bfe8:	440a      	add	r2, r1
 800bfea:	4291      	cmp	r1, r2
 800bfec:	f100 33ff 	add.w	r3, r0, #4294967295
 800bff0:	d100      	bne.n	800bff4 <memcpy+0xc>
 800bff2:	4770      	bx	lr
 800bff4:	b510      	push	{r4, lr}
 800bff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bffe:	4291      	cmp	r1, r2
 800c000:	d1f9      	bne.n	800bff6 <memcpy+0xe>
 800c002:	bd10      	pop	{r4, pc}

0800c004 <memmove>:
 800c004:	4288      	cmp	r0, r1
 800c006:	b510      	push	{r4, lr}
 800c008:	eb01 0402 	add.w	r4, r1, r2
 800c00c:	d902      	bls.n	800c014 <memmove+0x10>
 800c00e:	4284      	cmp	r4, r0
 800c010:	4623      	mov	r3, r4
 800c012:	d807      	bhi.n	800c024 <memmove+0x20>
 800c014:	1e43      	subs	r3, r0, #1
 800c016:	42a1      	cmp	r1, r4
 800c018:	d008      	beq.n	800c02c <memmove+0x28>
 800c01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c022:	e7f8      	b.n	800c016 <memmove+0x12>
 800c024:	4402      	add	r2, r0
 800c026:	4601      	mov	r1, r0
 800c028:	428a      	cmp	r2, r1
 800c02a:	d100      	bne.n	800c02e <memmove+0x2a>
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c036:	e7f7      	b.n	800c028 <memmove+0x24>

0800c038 <_free_r>:
 800c038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03a:	2900      	cmp	r1, #0
 800c03c:	d044      	beq.n	800c0c8 <_free_r+0x90>
 800c03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c042:	9001      	str	r0, [sp, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f1a1 0404 	sub.w	r4, r1, #4
 800c04a:	bfb8      	it	lt
 800c04c:	18e4      	addlt	r4, r4, r3
 800c04e:	f000 f913 	bl	800c278 <__malloc_lock>
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <_free_r+0x94>)
 800c054:	9801      	ldr	r0, [sp, #4]
 800c056:	6813      	ldr	r3, [r2, #0]
 800c058:	b933      	cbnz	r3, 800c068 <_free_r+0x30>
 800c05a:	6063      	str	r3, [r4, #4]
 800c05c:	6014      	str	r4, [r2, #0]
 800c05e:	b003      	add	sp, #12
 800c060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c064:	f000 b90e 	b.w	800c284 <__malloc_unlock>
 800c068:	42a3      	cmp	r3, r4
 800c06a:	d908      	bls.n	800c07e <_free_r+0x46>
 800c06c:	6825      	ldr	r5, [r4, #0]
 800c06e:	1961      	adds	r1, r4, r5
 800c070:	428b      	cmp	r3, r1
 800c072:	bf01      	itttt	eq
 800c074:	6819      	ldreq	r1, [r3, #0]
 800c076:	685b      	ldreq	r3, [r3, #4]
 800c078:	1949      	addeq	r1, r1, r5
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	e7ed      	b.n	800c05a <_free_r+0x22>
 800c07e:	461a      	mov	r2, r3
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	b10b      	cbz	r3, 800c088 <_free_r+0x50>
 800c084:	42a3      	cmp	r3, r4
 800c086:	d9fa      	bls.n	800c07e <_free_r+0x46>
 800c088:	6811      	ldr	r1, [r2, #0]
 800c08a:	1855      	adds	r5, r2, r1
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	d10b      	bne.n	800c0a8 <_free_r+0x70>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	4421      	add	r1, r4
 800c094:	1854      	adds	r4, r2, r1
 800c096:	42a3      	cmp	r3, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	d1e0      	bne.n	800c05e <_free_r+0x26>
 800c09c:	681c      	ldr	r4, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	6053      	str	r3, [r2, #4]
 800c0a2:	4421      	add	r1, r4
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	e7da      	b.n	800c05e <_free_r+0x26>
 800c0a8:	d902      	bls.n	800c0b0 <_free_r+0x78>
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	e7d6      	b.n	800c05e <_free_r+0x26>
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1961      	adds	r1, r4, r5
 800c0b4:	428b      	cmp	r3, r1
 800c0b6:	bf04      	itt	eq
 800c0b8:	6819      	ldreq	r1, [r3, #0]
 800c0ba:	685b      	ldreq	r3, [r3, #4]
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	bf04      	itt	eq
 800c0c0:	1949      	addeq	r1, r1, r5
 800c0c2:	6021      	streq	r1, [r4, #0]
 800c0c4:	6054      	str	r4, [r2, #4]
 800c0c6:	e7ca      	b.n	800c05e <_free_r+0x26>
 800c0c8:	b003      	add	sp, #12
 800c0ca:	bd30      	pop	{r4, r5, pc}
 800c0cc:	20000a44 	.word	0x20000a44

0800c0d0 <sbrk_aligned>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	4e0e      	ldr	r6, [pc, #56]	; (800c10c <sbrk_aligned+0x3c>)
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	4605      	mov	r5, r0
 800c0da:	b911      	cbnz	r1, 800c0e2 <sbrk_aligned+0x12>
 800c0dc:	f000 f8bc 	bl	800c258 <_sbrk_r>
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f8b7 	bl	800c258 <_sbrk_r>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d00a      	beq.n	800c104 <sbrk_aligned+0x34>
 800c0ee:	1cc4      	adds	r4, r0, #3
 800c0f0:	f024 0403 	bic.w	r4, r4, #3
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d007      	beq.n	800c108 <sbrk_aligned+0x38>
 800c0f8:	1a21      	subs	r1, r4, r0
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f8ac 	bl	800c258 <_sbrk_r>
 800c100:	3001      	adds	r0, #1
 800c102:	d101      	bne.n	800c108 <sbrk_aligned+0x38>
 800c104:	f04f 34ff 	mov.w	r4, #4294967295
 800c108:	4620      	mov	r0, r4
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	20000a48 	.word	0x20000a48

0800c110 <_malloc_r>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	1ccd      	adds	r5, r1, #3
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	2d00      	cmp	r5, #0
 800c124:	4607      	mov	r7, r0
 800c126:	db01      	blt.n	800c12c <_malloc_r+0x1c>
 800c128:	42a9      	cmp	r1, r5
 800c12a:	d905      	bls.n	800c138 <_malloc_r+0x28>
 800c12c:	230c      	movs	r3, #12
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	2600      	movs	r6, #0
 800c132:	4630      	mov	r0, r6
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	4e2e      	ldr	r6, [pc, #184]	; (800c1f4 <_malloc_r+0xe4>)
 800c13a:	f000 f89d 	bl	800c278 <__malloc_lock>
 800c13e:	6833      	ldr	r3, [r6, #0]
 800c140:	461c      	mov	r4, r3
 800c142:	bb34      	cbnz	r4, 800c192 <_malloc_r+0x82>
 800c144:	4629      	mov	r1, r5
 800c146:	4638      	mov	r0, r7
 800c148:	f7ff ffc2 	bl	800c0d0 <sbrk_aligned>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	4604      	mov	r4, r0
 800c150:	d14d      	bne.n	800c1ee <_malloc_r+0xde>
 800c152:	6834      	ldr	r4, [r6, #0]
 800c154:	4626      	mov	r6, r4
 800c156:	2e00      	cmp	r6, #0
 800c158:	d140      	bne.n	800c1dc <_malloc_r+0xcc>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4631      	mov	r1, r6
 800c15e:	4638      	mov	r0, r7
 800c160:	eb04 0803 	add.w	r8, r4, r3
 800c164:	f000 f878 	bl	800c258 <_sbrk_r>
 800c168:	4580      	cmp	r8, r0
 800c16a:	d13a      	bne.n	800c1e2 <_malloc_r+0xd2>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	3503      	adds	r5, #3
 800c170:	1a6d      	subs	r5, r5, r1
 800c172:	f025 0503 	bic.w	r5, r5, #3
 800c176:	3508      	adds	r5, #8
 800c178:	2d0c      	cmp	r5, #12
 800c17a:	bf38      	it	cc
 800c17c:	250c      	movcc	r5, #12
 800c17e:	4629      	mov	r1, r5
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff ffa5 	bl	800c0d0 <sbrk_aligned>
 800c186:	3001      	adds	r0, #1
 800c188:	d02b      	beq.n	800c1e2 <_malloc_r+0xd2>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	442b      	add	r3, r5
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	e00e      	b.n	800c1b0 <_malloc_r+0xa0>
 800c192:	6822      	ldr	r2, [r4, #0]
 800c194:	1b52      	subs	r2, r2, r5
 800c196:	d41e      	bmi.n	800c1d6 <_malloc_r+0xc6>
 800c198:	2a0b      	cmp	r2, #11
 800c19a:	d916      	bls.n	800c1ca <_malloc_r+0xba>
 800c19c:	1961      	adds	r1, r4, r5
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	6025      	str	r5, [r4, #0]
 800c1a2:	bf18      	it	ne
 800c1a4:	6059      	strne	r1, [r3, #4]
 800c1a6:	6863      	ldr	r3, [r4, #4]
 800c1a8:	bf08      	it	eq
 800c1aa:	6031      	streq	r1, [r6, #0]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f104 060b 	add.w	r6, r4, #11
 800c1b6:	f000 f865 	bl	800c284 <__malloc_unlock>
 800c1ba:	f026 0607 	bic.w	r6, r6, #7
 800c1be:	1d23      	adds	r3, r4, #4
 800c1c0:	1af2      	subs	r2, r6, r3
 800c1c2:	d0b6      	beq.n	800c132 <_malloc_r+0x22>
 800c1c4:	1b9b      	subs	r3, r3, r6
 800c1c6:	50a3      	str	r3, [r4, r2]
 800c1c8:	e7b3      	b.n	800c132 <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	6032      	streq	r2, [r6, #0]
 800c1d2:	605a      	strne	r2, [r3, #4]
 800c1d4:	e7ec      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	6864      	ldr	r4, [r4, #4]
 800c1da:	e7b2      	b.n	800c142 <_malloc_r+0x32>
 800c1dc:	4634      	mov	r4, r6
 800c1de:	6876      	ldr	r6, [r6, #4]
 800c1e0:	e7b9      	b.n	800c156 <_malloc_r+0x46>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f000 f84c 	bl	800c284 <__malloc_unlock>
 800c1ec:	e7a1      	b.n	800c132 <_malloc_r+0x22>
 800c1ee:	6025      	str	r5, [r4, #0]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1f2:	bf00      	nop
 800c1f4:	20000a44 	.word	0x20000a44

0800c1f8 <_realloc_r>:
 800c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	4614      	mov	r4, r2
 800c200:	460e      	mov	r6, r1
 800c202:	b921      	cbnz	r1, 800c20e <_realloc_r+0x16>
 800c204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c208:	4611      	mov	r1, r2
 800c20a:	f7ff bf81 	b.w	800c110 <_malloc_r>
 800c20e:	b92a      	cbnz	r2, 800c21c <_realloc_r+0x24>
 800c210:	f7ff ff12 	bl	800c038 <_free_r>
 800c214:	4625      	mov	r5, r4
 800c216:	4628      	mov	r0, r5
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	f000 f838 	bl	800c290 <_malloc_usable_size_r>
 800c220:	4284      	cmp	r4, r0
 800c222:	4607      	mov	r7, r0
 800c224:	d802      	bhi.n	800c22c <_realloc_r+0x34>
 800c226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c22a:	d812      	bhi.n	800c252 <_realloc_r+0x5a>
 800c22c:	4621      	mov	r1, r4
 800c22e:	4640      	mov	r0, r8
 800c230:	f7ff ff6e 	bl	800c110 <_malloc_r>
 800c234:	4605      	mov	r5, r0
 800c236:	2800      	cmp	r0, #0
 800c238:	d0ed      	beq.n	800c216 <_realloc_r+0x1e>
 800c23a:	42bc      	cmp	r4, r7
 800c23c:	4622      	mov	r2, r4
 800c23e:	4631      	mov	r1, r6
 800c240:	bf28      	it	cs
 800c242:	463a      	movcs	r2, r7
 800c244:	f7ff fed0 	bl	800bfe8 <memcpy>
 800c248:	4631      	mov	r1, r6
 800c24a:	4640      	mov	r0, r8
 800c24c:	f7ff fef4 	bl	800c038 <_free_r>
 800c250:	e7e1      	b.n	800c216 <_realloc_r+0x1e>
 800c252:	4635      	mov	r5, r6
 800c254:	e7df      	b.n	800c216 <_realloc_r+0x1e>
	...

0800c258 <_sbrk_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_sbrk_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f5 fe60 	bl	8001f28 <_sbrk>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_sbrk_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_sbrk_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	20000a4c 	.word	0x20000a4c

0800c278 <__malloc_lock>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__malloc_lock+0x8>)
 800c27a:	f000 b811 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800c27e:	bf00      	nop
 800c280:	20000a50 	.word	0x20000a50

0800c284 <__malloc_unlock>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__malloc_unlock+0x8>)
 800c286:	f000 b80c 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800c28a:	bf00      	nop
 800c28c:	20000a50 	.word	0x20000a50

0800c290 <_malloc_usable_size_r>:
 800c290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c294:	1f18      	subs	r0, r3, #4
 800c296:	2b00      	cmp	r3, #0
 800c298:	bfbc      	itt	lt
 800c29a:	580b      	ldrlt	r3, [r1, r0]
 800c29c:	18c0      	addlt	r0, r0, r3
 800c29e:	4770      	bx	lr

0800c2a0 <__retarget_lock_acquire_recursive>:
 800c2a0:	4770      	bx	lr

0800c2a2 <__retarget_lock_release_recursive>:
 800c2a2:	4770      	bx	lr

0800c2a4 <_init>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	bf00      	nop
 800c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2aa:	bc08      	pop	{r3}
 800c2ac:	469e      	mov	lr, r3
 800c2ae:	4770      	bx	lr

0800c2b0 <_fini>:
 800c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b2:	bf00      	nop
 800c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	469e      	mov	lr, r3
 800c2ba:	4770      	bx	lr
